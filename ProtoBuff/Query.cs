// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: s2clientprotocol/query.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SC2APIProtocol
{

    /// <summary>Holder for reflection information generated from s2clientprotocol/query.proto</summary>
    public static partial class QueryReflection
    {

        #region Descriptor
        /// <summary>File descriptor for s2clientprotocol/query.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static QueryReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "ChxzMmNsaWVudHByb3RvY29sL3F1ZXJ5LnByb3RvEg5TQzJBUElQcm90b2Nv",
                  "bBodczJjbGllbnRwcm90b2NvbC9jb21tb24ucHJvdG8aHHMyY2xpZW50cHJv",
                  "dG9jb2wvZXJyb3IucHJvdG8i8AEKDFJlcXVlc3RRdWVyeRI0CgdwYXRoaW5n",
                  "GAEgAygLMiMuU0MyQVBJUHJvdG9jb2wuUmVxdWVzdFF1ZXJ5UGF0aGluZxJB",
                  "CglhYmlsaXRpZXMYAiADKAsyLi5TQzJBUElQcm90b2NvbC5SZXF1ZXN0UXVl",
                  "cnlBdmFpbGFibGVBYmlsaXRpZXMSQQoKcGxhY2VtZW50cxgDIAMoCzItLlND",
                  "MkFQSVByb3RvY29sLlJlcXVlc3RRdWVyeUJ1aWxkaW5nUGxhY2VtZW50EiQK",
                  "HGlnbm9yZV9yZXNvdXJjZV9yZXF1aXJlbWVudHMYBCABKAgizgEKDVJlc3Bv",
                  "bnNlUXVlcnkSNQoHcGF0aGluZxgBIAMoCzIkLlNDMkFQSVByb3RvY29sLlJl",
                  "c3BvbnNlUXVlcnlQYXRoaW5nEkIKCWFiaWxpdGllcxgCIAMoCzIvLlNDMkFQ",
                  "SVByb3RvY29sLlJlc3BvbnNlUXVlcnlBdmFpbGFibGVBYmlsaXRpZXMSQgoK",
                  "cGxhY2VtZW50cxgDIAMoCzIuLlNDMkFQSVByb3RvY29sLlJlc3BvbnNlUXVl",
                  "cnlCdWlsZGluZ1BsYWNlbWVudCKKAQoTUmVxdWVzdFF1ZXJ5UGF0aGluZxIs",
                  "CglzdGFydF9wb3MYASABKAsyFy5TQzJBUElQcm90b2NvbC5Qb2ludDJESAAS",
                  "EgoIdW5pdF90YWcYAiABKARIABIoCgdlbmRfcG9zGAMgASgLMhcuU0MyQVBJ",
                  "UHJvdG9jb2wuUG9pbnQyREIHCgVzdGFydCIoChRSZXNwb25zZVF1ZXJ5UGF0",
                  "aGluZxIQCghkaXN0YW5jZRgBIAEoAiIyCh5SZXF1ZXN0UXVlcnlBdmFpbGFi",
                  "bGVBYmlsaXRpZXMSEAoIdW5pdF90YWcYASABKAQifgofUmVzcG9uc2VRdWVy",
                  "eUF2YWlsYWJsZUFiaWxpdGllcxIzCglhYmlsaXRpZXMYASADKAsyIC5TQzJB",
                  "UElQcm90b2NvbC5BdmFpbGFibGVBYmlsaXR5EhAKCHVuaXRfdGFnGAIgASgE",
                  "EhQKDHVuaXRfdHlwZV9pZBgDIAEoDSJ6Ch1SZXF1ZXN0UXVlcnlCdWlsZGlu",
                  "Z1BsYWNlbWVudBISCgphYmlsaXR5X2lkGAEgASgFEisKCnRhcmdldF9wb3MY",
                  "AiABKAsyFy5TQzJBUElQcm90b2NvbC5Qb2ludDJEEhgKEHBsYWNpbmdfdW5p",
                  "dF90YWcYAyABKAQiTgoeUmVzcG9uc2VRdWVyeUJ1aWxkaW5nUGxhY2VtZW50",
                  "EiwKBnJlc3VsdBgBIAEoDjIcLlNDMkFQSVByb3RvY29sLkFjdGlvblJlc3Vs",
                  "dA=="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { global::SC2APIProtocol.CommonReflection.Descriptor, global::SC2APIProtocol.ErrorReflection.Descriptor, },
                new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.RequestQuery), global::SC2APIProtocol.RequestQuery.Parser, new[]{ "Pathing", "Abilities", "Placements", "IgnoreResourceRequirements" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ResponseQuery), global::SC2APIProtocol.ResponseQuery.Parser, new[]{ "Pathing", "Abilities", "Placements" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.RequestQueryPathing), global::SC2APIProtocol.RequestQueryPathing.Parser, new[]{ "StartPos", "UnitTag", "EndPos" }, new[]{ "Start" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ResponseQueryPathing), global::SC2APIProtocol.ResponseQueryPathing.Parser, new[]{ "Distance" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.RequestQueryAvailableAbilities), global::SC2APIProtocol.RequestQueryAvailableAbilities.Parser, new[]{ "UnitTag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ResponseQueryAvailableAbilities), global::SC2APIProtocol.ResponseQueryAvailableAbilities.Parser, new[]{ "Abilities", "UnitTag", "UnitTypeId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.RequestQueryBuildingPlacement), global::SC2APIProtocol.RequestQueryBuildingPlacement.Parser, new[]{ "AbilityId", "TargetPos", "PlacingUnitTag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ResponseQueryBuildingPlacement), global::SC2APIProtocol.ResponseQueryBuildingPlacement.Parser, new[]{ "Result" }, null, null, null, null)
                }));
        }
        #endregion

    }
    #region Messages
    public sealed partial class RequestQuery : pb::IMessage<RequestQuery>
    {
        private static readonly pb::MessageParser<RequestQuery> _parser = new pb::MessageParser<RequestQuery>(() => new RequestQuery());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestQuery> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.QueryReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestQuery()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestQuery(RequestQuery other) : this()
        {
            _hasBits0 = other._hasBits0;
            pathing_ = other.pathing_.Clone();
            abilities_ = other.abilities_.Clone();
            placements_ = other.placements_.Clone();
            ignoreResourceRequirements_ = other.ignoreResourceRequirements_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestQuery Clone()
        {
            return new RequestQuery(this);
        }

        /// <summary>Field number for the "pathing" field.</summary>
        public const int PathingFieldNumber = 1;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.RequestQueryPathing> _repeated_pathing_codec
            = pb::FieldCodec.ForMessage(10, global::SC2APIProtocol.RequestQueryPathing.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.RequestQueryPathing> pathing_ = new pbc::RepeatedField<global::SC2APIProtocol.RequestQueryPathing>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.RequestQueryPathing> Pathing
        {
            get { return pathing_; }
        }

        /// <summary>Field number for the "abilities" field.</summary>
        public const int AbilitiesFieldNumber = 2;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.RequestQueryAvailableAbilities> _repeated_abilities_codec
            = pb::FieldCodec.ForMessage(18, global::SC2APIProtocol.RequestQueryAvailableAbilities.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.RequestQueryAvailableAbilities> abilities_ = new pbc::RepeatedField<global::SC2APIProtocol.RequestQueryAvailableAbilities>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.RequestQueryAvailableAbilities> Abilities
        {
            get { return abilities_; }
        }

        /// <summary>Field number for the "placements" field.</summary>
        public const int PlacementsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.RequestQueryBuildingPlacement> _repeated_placements_codec
            = pb::FieldCodec.ForMessage(26, global::SC2APIProtocol.RequestQueryBuildingPlacement.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.RequestQueryBuildingPlacement> placements_ = new pbc::RepeatedField<global::SC2APIProtocol.RequestQueryBuildingPlacement>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.RequestQueryBuildingPlacement> Placements
        {
            get { return placements_; }
        }

        /// <summary>Field number for the "ignore_resource_requirements" field.</summary>
        public const int IgnoreResourceRequirementsFieldNumber = 4;
        private readonly static bool IgnoreResourceRequirementsDefaultValue = false;

        private bool ignoreResourceRequirements_;
        /// <summary>
        /// Ignores requirements like food, minerals and so on.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IgnoreResourceRequirements
        {
            get { if ((_hasBits0 & 1) != 0) { return ignoreResourceRequirements_; } else { return IgnoreResourceRequirementsDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                ignoreResourceRequirements_ = value;
            }
        }
        /// <summary>Gets whether the "ignore_resource_requirements" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIgnoreResourceRequirements
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "ignore_resource_requirements" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIgnoreResourceRequirements()
        {
            _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestQuery);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestQuery other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!pathing_.Equals(other.pathing_)) return false;
            if (!abilities_.Equals(other.abilities_)) return false;
            if (!placements_.Equals(other.placements_)) return false;
            if (IgnoreResourceRequirements != other.IgnoreResourceRequirements) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= pathing_.GetHashCode();
            hash ^= abilities_.GetHashCode();
            hash ^= placements_.GetHashCode();
            if (HasIgnoreResourceRequirements) hash ^= IgnoreResourceRequirements.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            pathing_.WriteTo(output, _repeated_pathing_codec);
            abilities_.WriteTo(output, _repeated_abilities_codec);
            placements_.WriteTo(output, _repeated_placements_codec);
            if (HasIgnoreResourceRequirements)
            {
                output.WriteRawTag(32);
                output.WriteBool(IgnoreResourceRequirements);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += pathing_.CalculateSize(_repeated_pathing_codec);
            size += abilities_.CalculateSize(_repeated_abilities_codec);
            size += placements_.CalculateSize(_repeated_placements_codec);
            if (HasIgnoreResourceRequirements)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestQuery other)
        {
            if (other == null)
            {
                return;
            }
            pathing_.Add(other.pathing_);
            abilities_.Add(other.abilities_);
            placements_.Add(other.placements_);
            if (other.HasIgnoreResourceRequirements)
            {
                IgnoreResourceRequirements = other.IgnoreResourceRequirements;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            pathing_.AddEntriesFrom(input, _repeated_pathing_codec);
                            break;
                        }
                    case 18:
                        {
                            abilities_.AddEntriesFrom(input, _repeated_abilities_codec);
                            break;
                        }
                    case 26:
                        {
                            placements_.AddEntriesFrom(input, _repeated_placements_codec);
                            break;
                        }
                    case 32:
                        {
                            IgnoreResourceRequirements = input.ReadBool();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ResponseQuery : pb::IMessage<ResponseQuery>
    {
        private static readonly pb::MessageParser<ResponseQuery> _parser = new pb::MessageParser<ResponseQuery>(() => new ResponseQuery());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseQuery> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.QueryReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseQuery()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseQuery(ResponseQuery other) : this()
        {
            pathing_ = other.pathing_.Clone();
            abilities_ = other.abilities_.Clone();
            placements_ = other.placements_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseQuery Clone()
        {
            return new ResponseQuery(this);
        }

        /// <summary>Field number for the "pathing" field.</summary>
        public const int PathingFieldNumber = 1;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.ResponseQueryPathing> _repeated_pathing_codec
            = pb::FieldCodec.ForMessage(10, global::SC2APIProtocol.ResponseQueryPathing.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.ResponseQueryPathing> pathing_ = new pbc::RepeatedField<global::SC2APIProtocol.ResponseQueryPathing>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.ResponseQueryPathing> Pathing
        {
            get { return pathing_; }
        }

        /// <summary>Field number for the "abilities" field.</summary>
        public const int AbilitiesFieldNumber = 2;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.ResponseQueryAvailableAbilities> _repeated_abilities_codec
            = pb::FieldCodec.ForMessage(18, global::SC2APIProtocol.ResponseQueryAvailableAbilities.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.ResponseQueryAvailableAbilities> abilities_ = new pbc::RepeatedField<global::SC2APIProtocol.ResponseQueryAvailableAbilities>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.ResponseQueryAvailableAbilities> Abilities
        {
            get { return abilities_; }
        }

        /// <summary>Field number for the "placements" field.</summary>
        public const int PlacementsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.ResponseQueryBuildingPlacement> _repeated_placements_codec
            = pb::FieldCodec.ForMessage(26, global::SC2APIProtocol.ResponseQueryBuildingPlacement.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.ResponseQueryBuildingPlacement> placements_ = new pbc::RepeatedField<global::SC2APIProtocol.ResponseQueryBuildingPlacement>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.ResponseQueryBuildingPlacement> Placements
        {
            get { return placements_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseQuery);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseQuery other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!pathing_.Equals(other.pathing_)) return false;
            if (!abilities_.Equals(other.abilities_)) return false;
            if (!placements_.Equals(other.placements_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= pathing_.GetHashCode();
            hash ^= abilities_.GetHashCode();
            hash ^= placements_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            pathing_.WriteTo(output, _repeated_pathing_codec);
            abilities_.WriteTo(output, _repeated_abilities_codec);
            placements_.WriteTo(output, _repeated_placements_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += pathing_.CalculateSize(_repeated_pathing_codec);
            size += abilities_.CalculateSize(_repeated_abilities_codec);
            size += placements_.CalculateSize(_repeated_placements_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseQuery other)
        {
            if (other == null)
            {
                return;
            }
            pathing_.Add(other.pathing_);
            abilities_.Add(other.abilities_);
            placements_.Add(other.placements_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            pathing_.AddEntriesFrom(input, _repeated_pathing_codec);
                            break;
                        }
                    case 18:
                        {
                            abilities_.AddEntriesFrom(input, _repeated_abilities_codec);
                            break;
                        }
                    case 26:
                        {
                            placements_.AddEntriesFrom(input, _repeated_placements_codec);
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    ///--------------------------------------------------------------------------------------------------
    /// </summary>
    public sealed partial class RequestQueryPathing : pb::IMessage<RequestQueryPathing>
    {
        private static readonly pb::MessageParser<RequestQueryPathing> _parser = new pb::MessageParser<RequestQueryPathing>(() => new RequestQueryPathing());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestQueryPathing> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.QueryReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestQueryPathing()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestQueryPathing(RequestQueryPathing other) : this()
        {
            _hasBits0 = other._hasBits0;
            endPos_ = other.HasEndPos ? other.endPos_.Clone() : null;
            switch (other.StartCase)
            {
                case StartOneofCase.StartPos:
                    StartPos = other.StartPos.Clone();
                    break;
                case StartOneofCase.UnitTag:
                    UnitTag = other.UnitTag;
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestQueryPathing Clone()
        {
            return new RequestQueryPathing(this);
        }

        /// <summary>Field number for the "start_pos" field.</summary>
        public const int StartPosFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.Point2D StartPos
        {
            get { return HasStartPos ? (global::SC2APIProtocol.Point2D)start_ : null; }
            set
            {
                start_ = value;
                startCase_ = value == null ? StartOneofCase.None : StartOneofCase.StartPos;
            }
        }
        /// <summary>Gets whether the "start_pos" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasStartPos
        {
            get { return startCase_ == StartOneofCase.StartPos; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "start_pos" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearStartPos()
        {
            if (HasStartPos)
            {
                ClearStart();
            }
        }

        /// <summary>Field number for the "unit_tag" field.</summary>
        public const int UnitTagFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong UnitTag
        {
            get { return HasUnitTag ? (ulong)start_ : 0UL; }
            set
            {
                start_ = value;
                startCase_ = StartOneofCase.UnitTag;
            }
        }
        /// <summary>Gets whether the "unit_tag" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnitTag
        {
            get { return startCase_ == StartOneofCase.UnitTag; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "unit_tag" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnitTag()
        {
            if (HasUnitTag)
            {
                ClearStart();
            }
        }

        /// <summary>Field number for the "end_pos" field.</summary>
        public const int EndPosFieldNumber = 3;
        private global::SC2APIProtocol.Point2D endPos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.Point2D EndPos
        {
            get { return endPos_; }
            set
            {
                endPos_ = value;
            }
        }
        /// <summary>Gets whether the end_pos field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasEndPos
        {
            get { return endPos_ != null; }
        }
        /// <summary>Clears the value of the end_pos field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearEndPos()
        {
            endPos_ = null;
        }

        private object start_;
        /// <summary>Enum of possible cases for the "start" oneof.</summary>
        public enum StartOneofCase
        {
            None = 0,
            StartPos = 1,
            UnitTag = 2,
        }
        private StartOneofCase startCase_ = StartOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StartOneofCase StartCase
        {
            get { return startCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearStart()
        {
            startCase_ = StartOneofCase.None;
            start_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestQueryPathing);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestQueryPathing other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(StartPos, other.StartPos)) return false;
            if (UnitTag != other.UnitTag) return false;
            if (!object.Equals(EndPos, other.EndPos)) return false;
            if (StartCase != other.StartCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasStartPos) hash ^= StartPos.GetHashCode();
            if (HasUnitTag) hash ^= UnitTag.GetHashCode();
            if (HasEndPos) hash ^= EndPos.GetHashCode();
            hash ^= (int)startCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasStartPos)
            {
                output.WriteRawTag(10);
                output.WriteMessage(StartPos);
            }
            if (HasUnitTag)
            {
                output.WriteRawTag(16);
                output.WriteUInt64(UnitTag);
            }
            if (HasEndPos)
            {
                output.WriteRawTag(26);
                output.WriteMessage(EndPos);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasStartPos)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartPos);
            }
            if (HasUnitTag)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UnitTag);
            }
            if (HasEndPos)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndPos);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestQueryPathing other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasEndPos)
            {
                if (!HasEndPos)
                {
                    EndPos = new global::SC2APIProtocol.Point2D();
                }
                EndPos.MergeFrom(other.EndPos);
            }
            switch (other.StartCase)
            {
                case StartOneofCase.StartPos:
                    if (StartPos == null)
                    {
                        StartPos = new global::SC2APIProtocol.Point2D();
                    }
                    StartPos.MergeFrom(other.StartPos);
                    break;
                case StartOneofCase.UnitTag:
                    UnitTag = other.UnitTag;
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            global::SC2APIProtocol.Point2D subBuilder = new global::SC2APIProtocol.Point2D();
                            if (HasStartPos)
                            {
                                subBuilder.MergeFrom(StartPos);
                            }
                            input.ReadMessage(subBuilder);
                            StartPos = subBuilder;
                            break;
                        }
                    case 16:
                        {
                            UnitTag = input.ReadUInt64();
                            break;
                        }
                    case 26:
                        {
                            if (!HasEndPos)
                            {
                                EndPos = new global::SC2APIProtocol.Point2D();
                            }
                            input.ReadMessage(EndPos);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ResponseQueryPathing : pb::IMessage<ResponseQueryPathing>
    {
        private static readonly pb::MessageParser<ResponseQueryPathing> _parser = new pb::MessageParser<ResponseQueryPathing>(() => new ResponseQueryPathing());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseQueryPathing> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.QueryReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseQueryPathing()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseQueryPathing(ResponseQueryPathing other) : this()
        {
            _hasBits0 = other._hasBits0;
            distance_ = other.distance_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseQueryPathing Clone()
        {
            return new ResponseQueryPathing(this);
        }

        /// <summary>Field number for the "distance" field.</summary>
        public const int DistanceFieldNumber = 1;
        private readonly static float DistanceDefaultValue = 0F;

        private float distance_;
        /// <summary>
        /// 0 if no path exists
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Distance
        {
            get { if ((_hasBits0 & 1) != 0) { return distance_; } else { return DistanceDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                distance_ = value;
            }
        }
        /// <summary>Gets whether the "distance" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDistance
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "distance" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDistance()
        {
            _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseQueryPathing);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseQueryPathing other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Distance, other.Distance)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasDistance) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Distance);
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasDistance)
            {
                output.WriteRawTag(13);
                output.WriteFloat(Distance);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasDistance)
            {
                size += 1 + 4;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseQueryPathing other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasDistance)
            {
                Distance = other.Distance;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 13:
                        {
                            Distance = input.ReadFloat();
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    ///--------------------------------------------------------------------------------------------------
    /// </summary>
    public sealed partial class RequestQueryAvailableAbilities : pb::IMessage<RequestQueryAvailableAbilities>
    {
        private static readonly pb::MessageParser<RequestQueryAvailableAbilities> _parser = new pb::MessageParser<RequestQueryAvailableAbilities>(() => new RequestQueryAvailableAbilities());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestQueryAvailableAbilities> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.QueryReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestQueryAvailableAbilities()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestQueryAvailableAbilities(RequestQueryAvailableAbilities other) : this()
        {
            _hasBits0 = other._hasBits0;
            unitTag_ = other.unitTag_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestQueryAvailableAbilities Clone()
        {
            return new RequestQueryAvailableAbilities(this);
        }

        /// <summary>Field number for the "unit_tag" field.</summary>
        public const int UnitTagFieldNumber = 1;
        private readonly static ulong UnitTagDefaultValue = 0UL;

        private ulong unitTag_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong UnitTag
        {
            get { if ((_hasBits0 & 1) != 0) { return unitTag_; } else { return UnitTagDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                unitTag_ = value;
            }
        }
        /// <summary>Gets whether the "unit_tag" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnitTag
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "unit_tag" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnitTag()
        {
            _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestQueryAvailableAbilities);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestQueryAvailableAbilities other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UnitTag != other.UnitTag) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasUnitTag) hash ^= UnitTag.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasUnitTag)
            {
                output.WriteRawTag(8);
                output.WriteUInt64(UnitTag);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasUnitTag)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UnitTag);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestQueryAvailableAbilities other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasUnitTag)
            {
                UnitTag = other.UnitTag;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            UnitTag = input.ReadUInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ResponseQueryAvailableAbilities : pb::IMessage<ResponseQueryAvailableAbilities>
    {
        private static readonly pb::MessageParser<ResponseQueryAvailableAbilities> _parser = new pb::MessageParser<ResponseQueryAvailableAbilities>(() => new ResponseQueryAvailableAbilities());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseQueryAvailableAbilities> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.QueryReflection.Descriptor.MessageTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseQueryAvailableAbilities()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseQueryAvailableAbilities(ResponseQueryAvailableAbilities other) : this()
        {
            _hasBits0 = other._hasBits0;
            abilities_ = other.abilities_.Clone();
            unitTag_ = other.unitTag_;
            unitTypeId_ = other.unitTypeId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseQueryAvailableAbilities Clone()
        {
            return new ResponseQueryAvailableAbilities(this);
        }

        /// <summary>Field number for the "abilities" field.</summary>
        public const int AbilitiesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.AvailableAbility> _repeated_abilities_codec
            = pb::FieldCodec.ForMessage(10, global::SC2APIProtocol.AvailableAbility.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.AvailableAbility> abilities_ = new pbc::RepeatedField<global::SC2APIProtocol.AvailableAbility>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.AvailableAbility> Abilities
        {
            get { return abilities_; }
        }

        /// <summary>Field number for the "unit_tag" field.</summary>
        public const int UnitTagFieldNumber = 2;
        private readonly static ulong UnitTagDefaultValue = 0UL;

        private ulong unitTag_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong UnitTag
        {
            get { if ((_hasBits0 & 1) != 0) { return unitTag_; } else { return UnitTagDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                unitTag_ = value;
            }
        }
        /// <summary>Gets whether the "unit_tag" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnitTag
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "unit_tag" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnitTag()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "unit_type_id" field.</summary>
        public const int UnitTypeIdFieldNumber = 3;
        private readonly static uint UnitTypeIdDefaultValue = 0;

        private uint unitTypeId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint UnitTypeId
        {
            get { if ((_hasBits0 & 2) != 0) { return unitTypeId_; } else { return UnitTypeIdDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                unitTypeId_ = value;
            }
        }
        /// <summary>Gets whether the "unit_type_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnitTypeId
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "unit_type_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnitTypeId()
        {
            _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseQueryAvailableAbilities);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseQueryAvailableAbilities other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!abilities_.Equals(other.abilities_)) return false;
            if (UnitTag != other.UnitTag) return false;
            if (UnitTypeId != other.UnitTypeId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= abilities_.GetHashCode();
            if (HasUnitTag) hash ^= UnitTag.GetHashCode();
            if (HasUnitTypeId) hash ^= UnitTypeId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            abilities_.WriteTo(output, _repeated_abilities_codec);
            if (HasUnitTag)
            {
                output.WriteRawTag(16);
                output.WriteUInt64(UnitTag);
            }
            if (HasUnitTypeId)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(UnitTypeId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += abilities_.CalculateSize(_repeated_abilities_codec);
            if (HasUnitTag)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UnitTag);
            }
            if (HasUnitTypeId)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnitTypeId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseQueryAvailableAbilities other)
        {
            if (other == null)
            {
                return;
            }
            abilities_.Add(other.abilities_);
            if (other.HasUnitTag)
            {
                UnitTag = other.UnitTag;
            }
            if (other.HasUnitTypeId)
            {
                UnitTypeId = other.UnitTypeId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            abilities_.AddEntriesFrom(input, _repeated_abilities_codec);
                            break;
                        }
                    case 16:
                        {
                            UnitTag = input.ReadUInt64();
                            break;
                        }
                    case 24:
                        {
                            UnitTypeId = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    ///--------------------------------------------------------------------------------------------------
    /// </summary>
    public sealed partial class RequestQueryBuildingPlacement : pb::IMessage<RequestQueryBuildingPlacement>
    {
        private static readonly pb::MessageParser<RequestQueryBuildingPlacement> _parser = new pb::MessageParser<RequestQueryBuildingPlacement>(() => new RequestQueryBuildingPlacement());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestQueryBuildingPlacement> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.QueryReflection.Descriptor.MessageTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestQueryBuildingPlacement()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestQueryBuildingPlacement(RequestQueryBuildingPlacement other) : this()
        {
            _hasBits0 = other._hasBits0;
            abilityId_ = other.abilityId_;
            targetPos_ = other.HasTargetPos ? other.targetPos_.Clone() : null;
            placingUnitTag_ = other.placingUnitTag_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestQueryBuildingPlacement Clone()
        {
            return new RequestQueryBuildingPlacement(this);
        }

        /// <summary>Field number for the "ability_id" field.</summary>
        public const int AbilityIdFieldNumber = 1;
        private readonly static int AbilityIdDefaultValue = 0;

        private int abilityId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AbilityId
        {
            get { if ((_hasBits0 & 1) != 0) { return abilityId_; } else { return AbilityIdDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                abilityId_ = value;
            }
        }
        /// <summary>Gets whether the "ability_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAbilityId
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "ability_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAbilityId()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "target_pos" field.</summary>
        public const int TargetPosFieldNumber = 2;
        private global::SC2APIProtocol.Point2D targetPos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.Point2D TargetPos
        {
            get { return targetPos_; }
            set
            {
                targetPos_ = value;
            }
        }
        /// <summary>Gets whether the target_pos field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTargetPos
        {
            get { return targetPos_ != null; }
        }
        /// <summary>Clears the value of the target_pos field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTargetPos()
        {
            targetPos_ = null;
        }

        /// <summary>Field number for the "placing_unit_tag" field.</summary>
        public const int PlacingUnitTagFieldNumber = 3;
        private readonly static ulong PlacingUnitTagDefaultValue = 0UL;

        private ulong placingUnitTag_;
        /// <summary>
        /// Not required
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong PlacingUnitTag
        {
            get { if ((_hasBits0 & 2) != 0) { return placingUnitTag_; } else { return PlacingUnitTagDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                placingUnitTag_ = value;
            }
        }
        /// <summary>Gets whether the "placing_unit_tag" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlacingUnitTag
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "placing_unit_tag" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlacingUnitTag()
        {
            _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestQueryBuildingPlacement);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestQueryBuildingPlacement other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (AbilityId != other.AbilityId) return false;
            if (!object.Equals(TargetPos, other.TargetPos)) return false;
            if (PlacingUnitTag != other.PlacingUnitTag) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasAbilityId) hash ^= AbilityId.GetHashCode();
            if (HasTargetPos) hash ^= TargetPos.GetHashCode();
            if (HasPlacingUnitTag) hash ^= PlacingUnitTag.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasAbilityId)
            {
                output.WriteRawTag(8);
                output.WriteInt32(AbilityId);
            }
            if (HasTargetPos)
            {
                output.WriteRawTag(18);
                output.WriteMessage(TargetPos);
            }
            if (HasPlacingUnitTag)
            {
                output.WriteRawTag(24);
                output.WriteUInt64(PlacingUnitTag);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasAbilityId)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityId);
            }
            if (HasTargetPos)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetPos);
            }
            if (HasPlacingUnitTag)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlacingUnitTag);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestQueryBuildingPlacement other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasAbilityId)
            {
                AbilityId = other.AbilityId;
            }
            if (other.HasTargetPos)
            {
                if (!HasTargetPos)
                {
                    TargetPos = new global::SC2APIProtocol.Point2D();
                }
                TargetPos.MergeFrom(other.TargetPos);
            }
            if (other.HasPlacingUnitTag)
            {
                PlacingUnitTag = other.PlacingUnitTag;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            AbilityId = input.ReadInt32();
                            break;
                        }
                    case 18:
                        {
                            if (!HasTargetPos)
                            {
                                TargetPos = new global::SC2APIProtocol.Point2D();
                            }
                            input.ReadMessage(TargetPos);
                            break;
                        }
                    case 24:
                        {
                            PlacingUnitTag = input.ReadUInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ResponseQueryBuildingPlacement : pb::IMessage<ResponseQueryBuildingPlacement>
    {
        private static readonly pb::MessageParser<ResponseQueryBuildingPlacement> _parser = new pb::MessageParser<ResponseQueryBuildingPlacement>(() => new ResponseQueryBuildingPlacement());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseQueryBuildingPlacement> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.QueryReflection.Descriptor.MessageTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseQueryBuildingPlacement()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseQueryBuildingPlacement(ResponseQueryBuildingPlacement other) : this()
        {
            _hasBits0 = other._hasBits0;
            result_ = other.result_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseQueryBuildingPlacement Clone()
        {
            return new ResponseQueryBuildingPlacement(this);
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 1;
        private readonly static global::SC2APIProtocol.ActionResult ResultDefaultValue = global::SC2APIProtocol.ActionResult.Success;

        private global::SC2APIProtocol.ActionResult result_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ActionResult Result
        {
            get { if ((_hasBits0 & 1) != 0) { return result_; } else { return ResultDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                result_ = value;
            }
        }
        /// <summary>Gets whether the "result" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasResult
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "result" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearResult()
        {
            _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseQueryBuildingPlacement);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseQueryBuildingPlacement other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Result != other.Result) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasResult) hash ^= Result.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasResult)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Result);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasResult)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Result);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseQueryBuildingPlacement other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasResult)
            {
                Result = other.Result;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Result = (global::SC2APIProtocol.ActionResult)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code
