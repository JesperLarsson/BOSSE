// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: s2clientprotocol/sc2api.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SC2APIProtocol
{

    /// <summary>Holder for reflection information generated from s2clientprotocol/sc2api.proto</summary>
    public static partial class Sc2ApiReflection
    {

        #region Descriptor
        /// <summary>File descriptor for s2clientprotocol/sc2api.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static Sc2ApiReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "Ch1zMmNsaWVudHByb3RvY29sL3NjMmFwaS5wcm90bxIOU0MyQVBJUHJvdG9j",
                  "b2waHXMyY2xpZW50cHJvdG9jb2wvY29tbW9uLnByb3RvGhtzMmNsaWVudHBy",
                  "b3RvY29sL2RhdGEucHJvdG8aHHMyY2xpZW50cHJvdG9jb2wvZGVidWcucHJv",
                  "dG8aHHMyY2xpZW50cHJvdG9jb2wvZXJyb3IucHJvdG8aHHMyY2xpZW50cHJv",
                  "dG9jb2wvcXVlcnkucHJvdG8aGnMyY2xpZW50cHJvdG9jb2wvcmF3LnByb3Rv",
                  "GhxzMmNsaWVudHByb3RvY29sL3Njb3JlLnByb3RvGh5zMmNsaWVudHByb3Rv",
                  "Y29sL3NwYXRpYWwucHJvdG8aGXMyY2xpZW50cHJvdG9jb2wvdWkucHJvdG8i",
                  "wwkKB1JlcXVlc3QSOAoLY3JlYXRlX2dhbWUYASABKAsyIS5TQzJBUElQcm90",
                  "b2NvbC5SZXF1ZXN0Q3JlYXRlR2FtZUgAEjQKCWpvaW5fZ2FtZRgCIAEoCzIf",
                  "LlNDMkFQSVByb3RvY29sLlJlcXVlc3RKb2luR2FtZUgAEjoKDHJlc3RhcnRf",
                  "Z2FtZRgDIAEoCzIiLlNDMkFQSVByb3RvY29sLlJlcXVlc3RSZXN0YXJ0R2Ft",
                  "ZUgAEjoKDHN0YXJ0X3JlcGxheRgEIAEoCzIiLlNDMkFQSVByb3RvY29sLlJl",
                  "cXVlc3RTdGFydFJlcGxheUgAEjYKCmxlYXZlX2dhbWUYBSABKAsyIC5TQzJB",
                  "UElQcm90b2NvbC5SZXF1ZXN0TGVhdmVHYW1lSAASNgoKcXVpY2tfc2F2ZRgG",
                  "IAEoCzIgLlNDMkFQSVByb3RvY29sLlJlcXVlc3RRdWlja1NhdmVIABI2Cgpx",
                  "dWlja19sb2FkGAcgASgLMiAuU0MyQVBJUHJvdG9jb2wuUmVxdWVzdFF1aWNr",
                  "TG9hZEgAEisKBHF1aXQYCCABKAsyGy5TQzJBUElQcm90b2NvbC5SZXF1ZXN0",
                  "UXVpdEgAEjQKCWdhbWVfaW5mbxgJIAEoCzIfLlNDMkFQSVByb3RvY29sLlJl",
                  "cXVlc3RHYW1lSW5mb0gAEjkKC29ic2VydmF0aW9uGAogASgLMiIuU0MyQVBJ",
                  "UHJvdG9jb2wuUmVxdWVzdE9ic2VydmF0aW9uSAASLwoGYWN0aW9uGAsgASgL",
                  "Mh0uU0MyQVBJUHJvdG9jb2wuUmVxdWVzdEFjdGlvbkgAEjsKCm9ic19hY3Rp",
                  "b24YFSABKAsyJS5TQzJBUElQcm90b2NvbC5SZXF1ZXN0T2JzZXJ2ZXJBY3Rp",
                  "b25IABIrCgRzdGVwGAwgASgLMhsuU0MyQVBJUHJvdG9jb2wuUmVxdWVzdFN0",
                  "ZXBIABIrCgRkYXRhGA0gASgLMhsuU0MyQVBJUHJvdG9jb2wuUmVxdWVzdERh",
                  "dGFIABItCgVxdWVyeRgOIAEoCzIcLlNDMkFQSVByb3RvY29sLlJlcXVlc3RR",
                  "dWVyeUgAEjgKC3NhdmVfcmVwbGF5GA8gASgLMiEuU0MyQVBJUHJvdG9jb2wu",
                  "UmVxdWVzdFNhdmVSZXBsYXlIABI4CgttYXBfY29tbWFuZBgWIAEoCzIhLlND",
                  "MkFQSVByb3RvY29sLlJlcXVlc3RNYXBDb21tYW5kSAASOAoLcmVwbGF5X2lu",
                  "Zm8YECABKAsyIS5TQzJBUElQcm90b2NvbC5SZXF1ZXN0UmVwbGF5SW5mb0gA",
                  "Ej4KDmF2YWlsYWJsZV9tYXBzGBEgASgLMiQuU0MyQVBJUHJvdG9jb2wuUmVx",
                  "dWVzdEF2YWlsYWJsZU1hcHNIABIyCghzYXZlX21hcBgSIAEoCzIeLlNDMkFQ",
                  "SVByb3RvY29sLlJlcXVlc3RTYXZlTWFwSAASKwoEcGluZxgTIAEoCzIbLlND",
                  "MkFQSVByb3RvY29sLlJlcXVlc3RQaW5nSAASLQoFZGVidWcYFCABKAsyHC5T",
                  "QzJBUElQcm90b2NvbC5SZXF1ZXN0RGVidWdIABIKCgJpZBhhIAEoDUIJCgdy",
                  "ZXF1ZXN0IpIKCghSZXNwb25zZRI5CgtjcmVhdGVfZ2FtZRgBIAEoCzIiLlND",
                  "MkFQSVByb3RvY29sLlJlc3BvbnNlQ3JlYXRlR2FtZUgAEjUKCWpvaW5fZ2Ft",
                  "ZRgCIAEoCzIgLlNDMkFQSVByb3RvY29sLlJlc3BvbnNlSm9pbkdhbWVIABI7",
                  "CgxyZXN0YXJ0X2dhbWUYAyABKAsyIy5TQzJBUElQcm90b2NvbC5SZXNwb25z",
                  "ZVJlc3RhcnRHYW1lSAASOwoMc3RhcnRfcmVwbGF5GAQgASgLMiMuU0MyQVBJ",
                  "UHJvdG9jb2wuUmVzcG9uc2VTdGFydFJlcGxheUgAEjcKCmxlYXZlX2dhbWUY",
                  "BSABKAsyIS5TQzJBUElQcm90b2NvbC5SZXNwb25zZUxlYXZlR2FtZUgAEjcK",
                  "CnF1aWNrX3NhdmUYBiABKAsyIS5TQzJBUElQcm90b2NvbC5SZXNwb25zZVF1",
                  "aWNrU2F2ZUgAEjcKCnF1aWNrX2xvYWQYByABKAsyIS5TQzJBUElQcm90b2Nv",
                  "bC5SZXNwb25zZVF1aWNrTG9hZEgAEiwKBHF1aXQYCCABKAsyHC5TQzJBUElQ",
                  "cm90b2NvbC5SZXNwb25zZVF1aXRIABI1CglnYW1lX2luZm8YCSABKAsyIC5T",
                  "QzJBUElQcm90b2NvbC5SZXNwb25zZUdhbWVJbmZvSAASOgoLb2JzZXJ2YXRp",
                  "b24YCiABKAsyIy5TQzJBUElQcm90b2NvbC5SZXNwb25zZU9ic2VydmF0aW9u",
                  "SAASMAoGYWN0aW9uGAsgASgLMh4uU0MyQVBJUHJvdG9jb2wuUmVzcG9uc2VB",
                  "Y3Rpb25IABI8CgpvYnNfYWN0aW9uGBUgASgLMiYuU0MyQVBJUHJvdG9jb2wu",
                  "UmVzcG9uc2VPYnNlcnZlckFjdGlvbkgAEiwKBHN0ZXAYDCABKAsyHC5TQzJB",
                  "UElQcm90b2NvbC5SZXNwb25zZVN0ZXBIABIsCgRkYXRhGA0gASgLMhwuU0My",
                  "QVBJUHJvdG9jb2wuUmVzcG9uc2VEYXRhSAASLgoFcXVlcnkYDiABKAsyHS5T",
                  "QzJBUElQcm90b2NvbC5SZXNwb25zZVF1ZXJ5SAASOQoLc2F2ZV9yZXBsYXkY",
                  "DyABKAsyIi5TQzJBUElQcm90b2NvbC5SZXNwb25zZVNhdmVSZXBsYXlIABI5",
                  "CgtyZXBsYXlfaW5mbxgQIAEoCzIiLlNDMkFQSVByb3RvY29sLlJlc3BvbnNl",
                  "UmVwbGF5SW5mb0gAEj8KDmF2YWlsYWJsZV9tYXBzGBEgASgLMiUuU0MyQVBJ",
                  "UHJvdG9jb2wuUmVzcG9uc2VBdmFpbGFibGVNYXBzSAASMwoIc2F2ZV9tYXAY",
                  "EiABKAsyHy5TQzJBUElQcm90b2NvbC5SZXNwb25zZVNhdmVNYXBIABI5Cgtt",
                  "YXBfY29tbWFuZBgWIAEoCzIiLlNDMkFQSVByb3RvY29sLlJlc3BvbnNlTWFw",
                  "Q29tbWFuZEgAEiwKBHBpbmcYEyABKAsyHC5TQzJBUElQcm90b2NvbC5SZXNw",
                  "b25zZVBpbmdIABIuCgVkZWJ1ZxgUIAEoCzIdLlNDMkFQSVByb3RvY29sLlJl",
                  "c3BvbnNlRGVidWdIABIKCgJpZBhhIAEoDRINCgVlcnJvchhiIAMoCRImCgZz",
                  "dGF0dXMYYyABKA4yFi5TQzJBUElQcm90b2NvbC5TdGF0dXNCCgoIcmVzcG9u",
                  "c2Ui1gEKEVJlcXVlc3RDcmVhdGVHYW1lEi0KCWxvY2FsX21hcBgBIAEoCzIY",
                  "LlNDMkFQSVByb3RvY29sLkxvY2FsTWFwSAASHAoSYmF0dGxlbmV0X21hcF9u",
                  "YW1lGAIgASgJSAASMQoMcGxheWVyX3NldHVwGAMgAygLMhsuU0MyQVBJUHJv",
                  "dG9jb2wuUGxheWVyU2V0dXASEwoLZGlzYWJsZV9mb2cYBCABKAgSEwoLcmFu",
                  "ZG9tX3NlZWQYBSABKA0SEAoIcmVhbHRpbWUYBiABKAhCBQoDTWFwIi4KCExv",
                  "Y2FsTWFwEhAKCG1hcF9wYXRoGAEgASgJEhAKCG1hcF9kYXRhGAcgASgMIpwC",
                  "ChJSZXNwb25zZUNyZWF0ZUdhbWUSNwoFZXJyb3IYASABKA4yKC5TQzJBUElQ",
                  "cm90b2NvbC5SZXNwb25zZUNyZWF0ZUdhbWUuRXJyb3ISFQoNZXJyb3JfZGV0",
                  "YWlscxgCIAEoCSK1AQoFRXJyb3ISDgoKTWlzc2luZ01hcBABEhIKDkludmFs",
                  "aWRNYXBQYXRoEAISEgoOSW52YWxpZE1hcERhdGEQAxISCg5JbnZhbGlkTWFw",
                  "TmFtZRAEEhQKEEludmFsaWRNYXBIYW5kbGUQBRIWChJNaXNzaW5nUGxheWVy",
                  "U2V0dXAQBhIWChJJbnZhbGlkUGxheWVyU2V0dXAQBxIaChZNdWx0aXBsYXll",
                  "clVuc3VwcG9ydGVkEAgisgIKD1JlcXVlc3RKb2luR2FtZRIkCgRyYWNlGAEg",
                  "ASgOMhQuU0MyQVBJUHJvdG9jb2wuUmFjZUgAEhwKEm9ic2VydmVkX3BsYXll",
                  "cl9pZBgCIAEoDUgAEjEKB29wdGlvbnMYAyABKAsyIC5TQzJBUElQcm90b2Nv",
                  "bC5JbnRlcmZhY2VPcHRpb25zEi0KDHNlcnZlcl9wb3J0cxgEIAEoCzIXLlND",
                  "MkFQSVByb3RvY29sLlBvcnRTZXQSLQoMY2xpZW50X3BvcnRzGAUgAygLMhcu",
                  "U0MyQVBJUHJvdG9jb2wuUG9ydFNldBITCgtzaGFyZWRfcG9ydBgGIAEoBRIT",
                  "CgtwbGF5ZXJfbmFtZRgHIAEoCRIPCgdob3N0X2lwGAggASgJQg8KDXBhcnRp",
                  "Y2lwYXRpb24iLwoHUG9ydFNldBIRCglnYW1lX3BvcnQYASABKAUSEQoJYmFz",
                  "ZV9wb3J0GAIgASgFIoIDChBSZXNwb25zZUpvaW5HYW1lEhEKCXBsYXllcl9p",
                  "ZBgBIAEoDRI1CgVlcnJvchgCIAEoDjImLlNDMkFQSVByb3RvY29sLlJlc3Bv",
                  "bnNlSm9pbkdhbWUuRXJyb3ISFQoNZXJyb3JfZGV0YWlscxgDIAEoCSKMAgoF",
                  "RXJyb3ISGAoUTWlzc2luZ1BhcnRpY2lwYXRpb24QARIbChdJbnZhbGlkT2Jz",
                  "ZXJ2ZWRQbGF5ZXJJZBACEhIKDk1pc3NpbmdPcHRpb25zEAMSEAoMTWlzc2lu",
                  "Z1BvcnRzEAQSDAoIR2FtZUZ1bGwQBRIPCgtMYXVuY2hFcnJvchAGEhYKEkZl",
                  "YXR1cmVVbnN1cHBvcnRlZBAHEhIKDk5vU3BhY2VGb3JVc2VyEAgSEwoPTWFw",
                  "RG9lc05vdEV4aXN0EAkSEQoNQ2Fubm90T3Blbk1hcBAKEhEKDUNoZWNrc3Vt",
                  "RXJyb3IQCxIQCgxOZXR3b3JrRXJyb3IQDBIOCgpPdGhlckVycm9yEA0iFAoS",
                  "UmVxdWVzdFJlc3RhcnRHYW1lIpkBChNSZXNwb25zZVJlc3RhcnRHYW1lEjgK",
                  "BWVycm9yGAEgASgOMikuU0MyQVBJUHJvdG9jb2wuUmVzcG9uc2VSZXN0YXJ0",
                  "R2FtZS5FcnJvchIVCg1lcnJvcl9kZXRhaWxzGAIgASgJEhcKD25lZWRfaGFy",
                  "ZF9yZXNldBgDIAEoCCIYCgVFcnJvchIPCgtMYXVuY2hFcnJvchABIusBChJS",
                  "ZXF1ZXN0U3RhcnRSZXBsYXkSFQoLcmVwbGF5X3BhdGgYASABKAlIABIVCgty",
                  "ZXBsYXlfZGF0YRgFIAEoDEgAEhAKCG1hcF9kYXRhGAYgASgMEhoKEm9ic2Vy",
                  "dmVkX3BsYXllcl9pZBgCIAEoBRIxCgdvcHRpb25zGAMgASgLMiAuU0MyQVBJ",
                  "UHJvdG9jb2wuSW50ZXJmYWNlT3B0aW9ucxITCgtkaXNhYmxlX2ZvZxgEIAEo",
                  "CBIQCghyZWFsdGltZRgHIAEoCBIVCg1yZWNvcmRfcmVwbGF5GAggASgIQggK",
                  "BnJlcGxheSKHAgoTUmVzcG9uc2VTdGFydFJlcGxheRI4CgVlcnJvchgBIAEo",
                  "DjIpLlNDMkFQSVByb3RvY29sLlJlc3BvbnNlU3RhcnRSZXBsYXkuRXJyb3IS",
                  "FQoNZXJyb3JfZGV0YWlscxgCIAEoCSKeAQoFRXJyb3ISEQoNTWlzc2luZ1Jl",
                  "cGxheRABEhUKEUludmFsaWRSZXBsYXlQYXRoEAISFQoRSW52YWxpZFJlcGxh",
                  "eURhdGEQAxISCg5JbnZhbGlkTWFwRGF0YRAEEhsKF0ludmFsaWRPYnNlcnZl",
                  "ZFBsYXllcklkEAUSEgoOTWlzc2luZ09wdGlvbnMQBhIPCgtMYXVuY2hFcnJv",
                  "chAHIigKEVJlcXVlc3RNYXBDb21tYW5kEhMKC3RyaWdnZXJfY21kGAEgASgJ",
                  "IoEBChJSZXNwb25zZU1hcENvbW1hbmQSNwoFZXJyb3IYASABKA4yKC5TQzJB",
                  "UElQcm90b2NvbC5SZXNwb25zZU1hcENvbW1hbmQuRXJyb3ISFQoNZXJyb3Jf",
                  "ZGV0YWlscxgCIAEoCSIbCgVFcnJvchISCg5Ob1RyaWdnZXJFcnJvchABIhIK",
                  "EFJlcXVlc3RMZWF2ZUdhbWUiEwoRUmVzcG9uc2VMZWF2ZUdhbWUiEgoQUmVx",
                  "dWVzdFF1aWNrU2F2ZSITChFSZXNwb25zZVF1aWNrU2F2ZSISChBSZXF1ZXN0",
                  "UXVpY2tMb2FkIhMKEVJlc3BvbnNlUXVpY2tMb2FkIg0KC1JlcXVlc3RRdWl0",
                  "Ig4KDFJlc3BvbnNlUXVpdCIRCg9SZXF1ZXN0R2FtZUluZm8i4AEKEFJlc3Bv",
                  "bnNlR2FtZUluZm8SEAoIbWFwX25hbWUYASABKAkSEQoJbW9kX25hbWVzGAYg",
                  "AygJEhYKDmxvY2FsX21hcF9wYXRoGAIgASgJEi8KC3BsYXllcl9pbmZvGAMg",
                  "AygLMhouU0MyQVBJUHJvdG9jb2wuUGxheWVySW5mbxIrCglzdGFydF9yYXcY",
                  "BCABKAsyGC5TQzJBUElQcm90b2NvbC5TdGFydFJhdxIxCgdvcHRpb25zGAUg",
                  "ASgLMiAuU0MyQVBJUHJvdG9jb2wuSW50ZXJmYWNlT3B0aW9ucyI8ChJSZXF1",
                  "ZXN0T2JzZXJ2YXRpb24SEwoLZGlzYWJsZV9mb2cYASABKAgSEQoJZ2FtZV9s",
                  "b29wGAIgASgNIoUCChNSZXNwb25zZU9ic2VydmF0aW9uEicKB2FjdGlvbnMY",
                  "ASADKAsyFi5TQzJBUElQcm90b2NvbC5BY3Rpb24SMgoNYWN0aW9uX2Vycm9y",
                  "cxgCIAMoCzIbLlNDMkFQSVByb3RvY29sLkFjdGlvbkVycm9yEjAKC29ic2Vy",
                  "dmF0aW9uGAMgASgLMhsuU0MyQVBJUHJvdG9jb2wuT2JzZXJ2YXRpb24SMwoN",
                  "cGxheWVyX3Jlc3VsdBgEIAMoCzIcLlNDMkFQSVByb3RvY29sLlBsYXllclJl",
                  "c3VsdBIqCgRjaGF0GAUgAygLMhwuU0MyQVBJUHJvdG9jb2wuQ2hhdFJlY2Vp",
                  "dmVkIjIKDENoYXRSZWNlaXZlZBIRCglwbGF5ZXJfaWQYASABKA0SDwoHbWVz",
                  "c2FnZRgCIAEoCSI4Cg1SZXF1ZXN0QWN0aW9uEicKB2FjdGlvbnMYASADKAsy",
                  "Fi5TQzJBUElQcm90b2NvbC5BY3Rpb24iPgoOUmVzcG9uc2VBY3Rpb24SLAoG",
                  "cmVzdWx0GAEgAygOMhwuU0MyQVBJUHJvdG9jb2wuQWN0aW9uUmVzdWx0IkgK",
                  "FVJlcXVlc3RPYnNlcnZlckFjdGlvbhIvCgdhY3Rpb25zGAEgAygLMh4uU0My",
                  "QVBJUHJvdG9jb2wuT2JzZXJ2ZXJBY3Rpb24iGAoWUmVzcG9uc2VPYnNlcnZl",
                  "ckFjdGlvbiIcCgtSZXF1ZXN0U3RlcBINCgVjb3VudBgBIAEoDSInCgxSZXNw",
                  "b25zZVN0ZXASFwoPc2ltdWxhdGlvbl9sb29wGAEgASgNIm8KC1JlcXVlc3RE",
                  "YXRhEhIKCmFiaWxpdHlfaWQYASABKAgSFAoMdW5pdF90eXBlX2lkGAIgASgI",
                  "EhIKCnVwZ3JhZGVfaWQYAyABKAgSDwoHYnVmZl9pZBgEIAEoCBIRCgllZmZl",
                  "Y3RfaWQYBSABKAgi8AEKDFJlc3BvbnNlRGF0YRIuCglhYmlsaXRpZXMYASAD",
                  "KAsyGy5TQzJBUElQcm90b2NvbC5BYmlsaXR5RGF0YRIrCgV1bml0cxgCIAMo",
                  "CzIcLlNDMkFQSVByb3RvY29sLlVuaXRUeXBlRGF0YRItCgh1cGdyYWRlcxgD",
                  "IAMoCzIbLlNDMkFQSVByb3RvY29sLlVwZ3JhZGVEYXRhEicKBWJ1ZmZzGAQg",
                  "AygLMhguU0MyQVBJUHJvdG9jb2wuQnVmZkRhdGESKwoHZWZmZWN0cxgFIAMo",
                  "CzIaLlNDMkFQSVByb3RvY29sLkVmZmVjdERhdGEiEwoRUmVxdWVzdFNhdmVS",
                  "ZXBsYXkiIgoSUmVzcG9uc2VTYXZlUmVwbGF5EgwKBGRhdGEYASABKAwiYgoR",
                  "UmVxdWVzdFJlcGxheUluZm8SFQoLcmVwbGF5X3BhdGgYASABKAlIABIVCgty",
                  "ZXBsYXlfZGF0YRgCIAEoDEgAEhUKDWRvd25sb2FkX2RhdGEYAyABKAhCCAoG",
                  "cmVwbGF5Ip8BCg9QbGF5ZXJJbmZvRXh0cmESLwoLcGxheWVyX2luZm8YASAB",
                  "KAsyGi5TQzJBUElQcm90b2NvbC5QbGF5ZXJJbmZvEjMKDXBsYXllcl9yZXN1",
                  "bHQYAiABKAsyHC5TQzJBUElQcm90b2NvbC5QbGF5ZXJSZXN1bHQSEgoKcGxh",
                  "eWVyX21tchgDIAEoBRISCgpwbGF5ZXJfYXBtGAQgASgFIsMDChJSZXNwb25z",
                  "ZVJlcGxheUluZm8SEAoIbWFwX25hbWUYASABKAkSFgoObG9jYWxfbWFwX3Bh",
                  "dGgYAiABKAkSNAoLcGxheWVyX2luZm8YAyADKAsyHy5TQzJBUElQcm90b2Nv",
                  "bC5QbGF5ZXJJbmZvRXh0cmESGwoTZ2FtZV9kdXJhdGlvbl9sb29wcxgEIAEo",
                  "DRIdChVnYW1lX2R1cmF0aW9uX3NlY29uZHMYBSABKAISFAoMZ2FtZV92ZXJz",
                  "aW9uGAYgASgJEhQKDGRhdGFfdmVyc2lvbhgLIAEoCRISCgpkYXRhX2J1aWxk",
                  "GAcgASgNEhIKCmJhc2VfYnVpbGQYCCABKA0SNwoFZXJyb3IYCSABKA4yKC5T",
                  "QzJBUElQcm90b2NvbC5SZXNwb25zZVJlcGxheUluZm8uRXJyb3ISFQoNZXJy",
                  "b3JfZGV0YWlscxgKIAEoCSJtCgVFcnJvchIRCg1NaXNzaW5nUmVwbGF5EAES",
                  "FQoRSW52YWxpZFJlcGxheVBhdGgQAhIVChFJbnZhbGlkUmVwbGF5RGF0YRAD",
                  "EhAKDFBhcnNpbmdFcnJvchAEEhEKDURvd25sb2FkRXJyb3IQBSIWChRSZXF1",
                  "ZXN0QXZhaWxhYmxlTWFwcyJNChVSZXNwb25zZUF2YWlsYWJsZU1hcHMSFwoP",
                  "bG9jYWxfbWFwX3BhdGhzGAEgAygJEhsKE2JhdHRsZW5ldF9tYXBfbmFtZXMY",
                  "AiADKAkiNAoOUmVxdWVzdFNhdmVNYXASEAoIbWFwX3BhdGgYASABKAkSEAoI",
                  "bWFwX2RhdGEYAiABKAwiZAoPUmVzcG9uc2VTYXZlTWFwEjQKBWVycm9yGAEg",
                  "ASgOMiUuU0MyQVBJUHJvdG9jb2wuUmVzcG9uc2VTYXZlTWFwLkVycm9yIhsK",
                  "BUVycm9yEhIKDkludmFsaWRNYXBEYXRhEAEiDQoLUmVxdWVzdFBpbmciYgoM",
                  "UmVzcG9uc2VQaW5nEhQKDGdhbWVfdmVyc2lvbhgBIAEoCRIUCgxkYXRhX3Zl",
                  "cnNpb24YAiABKAkSEgoKZGF0YV9idWlsZBgDIAEoDRISCgpiYXNlX2J1aWxk",
                  "GAQgASgNIjsKDFJlcXVlc3REZWJ1ZxIrCgVkZWJ1ZxgBIAMoCzIcLlNDMkFQ",
                  "SVByb3RvY29sLkRlYnVnQ29tbWFuZCIPCg1SZXNwb25zZURlYnVnIssBCgtQ",
                  "bGF5ZXJTZXR1cBIoCgR0eXBlGAEgASgOMhouU0MyQVBJUHJvdG9jb2wuUGxh",
                  "eWVyVHlwZRIiCgRyYWNlGAIgASgOMhQuU0MyQVBJUHJvdG9jb2wuUmFjZRIu",
                  "CgpkaWZmaWN1bHR5GAMgASgOMhouU0MyQVBJUHJvdG9jb2wuRGlmZmljdWx0",
                  "eRITCgtwbGF5ZXJfbmFtZRgEIAEoCRIpCghhaV9idWlsZBgFIAEoDjIXLlND",
                  "MkFQSVByb3RvY29sLkFJQnVpbGQiwwEKElNwYXRpYWxDYW1lcmFTZXR1cBIr",
                  "CgpyZXNvbHV0aW9uGAIgASgLMhcuU0MyQVBJUHJvdG9jb2wuU2l6ZTJESRIz",
                  "ChJtaW5pbWFwX3Jlc29sdXRpb24YAyABKAsyFy5TQzJBUElQcm90b2NvbC5T",
                  "aXplMkRJEg0KBXdpZHRoGAEgASgCEh0KFWNyb3BfdG9fcGxheWFibGVfYXJl",
                  "YRgEIAEoCBIdChVhbGxvd19jaGVhdGluZ19sYXllcnMYBSABKAgirwIKEElu",
                  "dGVyZmFjZU9wdGlvbnMSCwoDcmF3GAEgASgIEg0KBXNjb3JlGAIgASgIEjkK",
                  "DWZlYXR1cmVfbGF5ZXIYAyABKAsyIi5TQzJBUElQcm90b2NvbC5TcGF0aWFs",
                  "Q2FtZXJhU2V0dXASMgoGcmVuZGVyGAQgASgLMiIuU0MyQVBJUHJvdG9jb2wu",
                  "U3BhdGlhbENhbWVyYVNldHVwEhQKDHNob3dfY2xvYWtlZBgFIAEoCBIdChVz",
                  "aG93X2J1cnJvd2VkX3NoYWRvd3MYCSABKAgSGQoRc2hvd19wbGFjZWhvbGRl",
                  "cnMYCCABKAgSHQoVcmF3X2FmZmVjdHNfc2VsZWN0aW9uGAYgASgIEiEKGXJh",
                  "d19jcm9wX3RvX3BsYXlhYmxlX2FyZWEYByABKAgikgIKClBsYXllckluZm8S",
                  "EQoJcGxheWVyX2lkGAEgASgNEigKBHR5cGUYAiABKA4yGi5TQzJBUElQcm90",
                  "b2NvbC5QbGF5ZXJUeXBlEiwKDnJhY2VfcmVxdWVzdGVkGAMgASgOMhQuU0My",
                  "QVBJUHJvdG9jb2wuUmFjZRIpCgtyYWNlX2FjdHVhbBgEIAEoDjIULlNDMkFQ",
                  "SVByb3RvY29sLlJhY2USLgoKZGlmZmljdWx0eRgFIAEoDjIaLlNDMkFQSVBy",
                  "b3RvY29sLkRpZmZpY3VsdHkSKQoIYWlfYnVpbGQYByABKA4yFy5TQzJBUElQ",
                  "cm90b2NvbC5BSUJ1aWxkEhMKC3BsYXllcl9uYW1lGAYgASgJIu8BCgxQbGF5",
                  "ZXJDb21tb24SEQoJcGxheWVyX2lkGAEgASgNEhAKCG1pbmVyYWxzGAIgASgN",
                  "Eg8KB3Zlc3BlbmUYAyABKA0SEAoIZm9vZF9jYXAYBCABKA0SEQoJZm9vZF91",
                  "c2VkGAUgASgNEhEKCWZvb2RfYXJteRgGIAEoDRIUCgxmb29kX3dvcmtlcnMY",
                  "ByABKA0SGQoRaWRsZV93b3JrZXJfY291bnQYCCABKA0SEgoKYXJteV9jb3Vu",
                  "dBgJIAEoDRIXCg93YXJwX2dhdGVfY291bnQYCiABKA0SEwoLbGFydmFfY291",
                  "bnQYCyABKA0itgMKC09ic2VydmF0aW9uEhEKCWdhbWVfbG9vcBgJIAEoDRIz",
                  "Cg1wbGF5ZXJfY29tbW9uGAEgASgLMhwuU0MyQVBJUHJvdG9jb2wuUGxheWVy",
                  "Q29tbW9uEiUKBmFsZXJ0cxgKIAMoDjIVLlNDMkFQSVByb3RvY29sLkFsZXJ0",
                  "EjMKCWFiaWxpdGllcxgDIAMoCzIgLlNDMkFQSVByb3RvY29sLkF2YWlsYWJs",
                  "ZUFiaWxpdHkSJAoFc2NvcmUYBCABKAsyFS5TQzJBUElQcm90b2NvbC5TY29y",
                  "ZRIwCghyYXdfZGF0YRgFIAEoCzIeLlNDMkFQSVByb3RvY29sLk9ic2VydmF0",
                  "aW9uUmF3EkMKEmZlYXR1cmVfbGF5ZXJfZGF0YRgGIAEoCzInLlNDMkFQSVBy",
                  "b3RvY29sLk9ic2VydmF0aW9uRmVhdHVyZUxheWVyEjYKC3JlbmRlcl9kYXRh",
                  "GAcgASgLMiEuU0MyQVBJUHJvdG9jb2wuT2JzZXJ2YXRpb25SZW5kZXISLgoH",
                  "dWlfZGF0YRgIIAEoCzIdLlNDMkFQSVByb3RvY29sLk9ic2VydmF0aW9uVUki",
                  "mwIKBkFjdGlvbhItCgphY3Rpb25fcmF3GAEgASgLMhkuU0MyQVBJUHJvdG9j",
                  "b2wuQWN0aW9uUmF3EjsKFGFjdGlvbl9mZWF0dXJlX2xheWVyGAIgASgLMh0u",
                  "U0MyQVBJUHJvdG9jb2wuQWN0aW9uU3BhdGlhbBI0Cg1hY3Rpb25fcmVuZGVy",
                  "GAMgASgLMh0uU0MyQVBJUHJvdG9jb2wuQWN0aW9uU3BhdGlhbBIrCglhY3Rp",
                  "b25fdWkYBCABKAsyGC5TQzJBUElQcm90b2NvbC5BY3Rpb25VSRIvCgthY3Rp",
                  "b25fY2hhdBgGIAEoCzIaLlNDMkFQSVByb3RvY29sLkFjdGlvbkNoYXQSEQoJ",
                  "Z2FtZV9sb29wGAcgASgNInYKCkFjdGlvbkNoYXQSMwoHY2hhbm5lbBgBIAEo",
                  "DjIiLlNDMkFQSVByb3RvY29sLkFjdGlvbkNoYXQuQ2hhbm5lbBIPCgdtZXNz",
                  "YWdlGAIgASgJIiIKB0NoYW5uZWwSDQoJQnJvYWRjYXN0EAESCAoEVGVhbRAC",
                  "ImEKC0FjdGlvbkVycm9yEhAKCHVuaXRfdGFnGAEgASgEEhIKCmFiaWxpdHlf",
                  "aWQYAiABKAQSLAoGcmVzdWx0GAMgASgOMhwuU0MyQVBJUHJvdG9jb2wuQWN0",
                  "aW9uUmVzdWx0IswCCg5PYnNlcnZlckFjdGlvbhJNChJwbGF5ZXJfcGVyc3Bl",
                  "Y3RpdmUYASABKAsyLy5TQzJBUElQcm90b2NvbC5BY3Rpb25PYnNlcnZlclBs",
                  "YXllclBlcnNwZWN0aXZlSAASPwoLY2FtZXJhX21vdmUYAiABKAsyKC5TQzJB",
                  "UElQcm90b2NvbC5BY3Rpb25PYnNlcnZlckNhbWVyYU1vdmVIABJQChRjYW1l",
                  "cmFfZm9sbG93X3BsYXllchgDIAEoCzIwLlNDMkFQSVByb3RvY29sLkFjdGlv",
                  "bk9ic2VydmVyQ2FtZXJhRm9sbG93UGxheWVySAASTgoTY2FtZXJhX2ZvbGxv",
                  "d191bml0cxgEIAEoCzIvLlNDMkFQSVByb3RvY29sLkFjdGlvbk9ic2VydmVy",
                  "Q2FtZXJhRm9sbG93VW5pdHNIAEIICgZhY3Rpb24iNAofQWN0aW9uT2JzZXJ2",
                  "ZXJQbGF5ZXJQZXJzcGVjdGl2ZRIRCglwbGF5ZXJfaWQYASABKA0iWAoYQWN0",
                  "aW9uT2JzZXJ2ZXJDYW1lcmFNb3ZlEioKCXdvcmxkX3BvcxgBIAEoCzIXLlND",
                  "MkFQSVByb3RvY29sLlBvaW50MkQSEAoIZGlzdGFuY2UYAiABKAIiNQogQWN0",
                  "aW9uT2JzZXJ2ZXJDYW1lcmFGb2xsb3dQbGF5ZXISEQoJcGxheWVyX2lkGAEg",
                  "ASgNIjQKH0FjdGlvbk9ic2VydmVyQ2FtZXJhRm9sbG93VW5pdHMSEQoJdW5p",
                  "dF90YWdzGAEgAygEIkkKDFBsYXllclJlc3VsdBIRCglwbGF5ZXJfaWQYASAB",
                  "KA0SJgoGcmVzdWx0GAIgASgOMhYuU0MyQVBJUHJvdG9jb2wuUmVzdWx0KmMK",
                  "BlN0YXR1cxIMCghsYXVuY2hlZBABEg0KCWluaXRfZ2FtZRACEgsKB2luX2dh",
                  "bWUQAxINCglpbl9yZXBsYXkQBBIJCgVlbmRlZBAFEggKBHF1aXQQBhILCgd1",
                  "bmtub3duEGMqlgEKCkRpZmZpY3VsdHkSDAoIVmVyeUVhc3kQARIICgRFYXN5",
                  "EAISCgoGTWVkaXVtEAMSDgoKTWVkaXVtSGFyZBAEEggKBEhhcmQQBRIKCgZI",
                  "YXJkZXIQBhIMCghWZXJ5SGFyZBAHEg8KC0NoZWF0VmlzaW9uEAgSDgoKQ2hl",
                  "YXRNb25leRAJEg8KC0NoZWF0SW5zYW5lEAoqOQoKUGxheWVyVHlwZRIPCgtQ",
                  "YXJ0aWNpcGFudBABEgwKCENvbXB1dGVyEAISDAoIT2JzZXJ2ZXIQAypPCgdB",
                  "SUJ1aWxkEg8KC1JhbmRvbUJ1aWxkEAESCAoEUnVzaBACEgoKBlRpbWluZxAD",
                  "EgkKBVBvd2VyEAQSCQoFTWFjcm8QBRIHCgNBaXIQBirbAwoFQWxlcnQSDgoK",
                  "QWxlcnRFcnJvchADEhEKDUFkZE9uQ29tcGxldGUQBBIUChBCdWlsZGluZ0Nv",
                  "bXBsZXRlEAUSFwoTQnVpbGRpbmdVbmRlckF0dGFjaxAGEhAKDExhcnZhSGF0",
                  "Y2hlZBAHEhEKDU1lcmdlQ29tcGxldGUQCBIVChFNaW5lcmFsc0V4aGF1c3Rl",
                  "ZBAJEhEKDU1vcnBoQ29tcGxldGUQChIWChJNb3RoZXJzaGlwQ29tcGxldGUQ",
                  "CxIPCgtNVUxFRXhwaXJlZBAMEhkKFU51Y2xlYXJMYXVuY2hEZXRlY3RlZBAB",
                  "EhAKDE51a2VDb21wbGV0ZRANEhUKEU55ZHVzV29ybURldGVjdGVkEAISFAoQ",
                  "UmVzZWFyY2hDb21wbGV0ZRAOEg4KClRyYWluRXJyb3IQDxIVChFUcmFpblVu",
                  "aXRDb21wbGV0ZRAQEhcKE1RyYWluV29ya2VyQ29tcGxldGUQERIaChZUcmFu",
                  "c2Zvcm1hdGlvbkNvbXBsZXRlEBISEwoPVW5pdFVuZGVyQXR0YWNrEBMSEwoP",
                  "VXBncmFkZUNvbXBsZXRlEBQSFAoQVmVzcGVuZUV4aGF1c3RlZBAVEhIKDldh",
                  "cnBJbkNvbXBsZXRlEBYqOQoGUmVzdWx0EgsKB1ZpY3RvcnkQARIKCgZEZWZl",
                  "YXQQAhIHCgNUaWUQAxINCglVbmRlY2lkZWQQBA=="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { global::SC2APIProtocol.CommonReflection.Descriptor, global::SC2APIProtocol.DataReflection.Descriptor, global::SC2APIProtocol.DebugReflection.Descriptor, global::SC2APIProtocol.ErrorReflection.Descriptor, global::SC2APIProtocol.QueryReflection.Descriptor, global::SC2APIProtocol.RawReflection.Descriptor, global::SC2APIProtocol.ScoreReflection.Descriptor, global::SC2APIProtocol.SpatialReflection.Descriptor, global::SC2APIProtocol.UiReflection.Descriptor, },
                new pbr::GeneratedClrTypeInfo(new[] { typeof(global::SC2APIProtocol.Status), typeof(global::SC2APIProtocol.Difficulty), typeof(global::SC2APIProtocol.PlayerType), typeof(global::SC2APIProtocol.AIBuild), typeof(global::SC2APIProtocol.Alert), typeof(global::SC2APIProtocol.Result), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.Request), global::SC2APIProtocol.Request.Parser, new[]{ "CreateGame", "JoinGame", "RestartGame", "StartReplay", "LeaveGame", "QuickSave", "QuickLoad", "Quit", "GameInfo", "Observation", "Action", "ObsAction", "Step", "Data", "Query", "SaveReplay", "MapCommand", "ReplayInfo", "AvailableMaps", "SaveMap", "Ping", "Debug", "Id" }, new[]{ "Request" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.Response), global::SC2APIProtocol.Response.Parser, new[]{ "CreateGame", "JoinGame", "RestartGame", "StartReplay", "LeaveGame", "QuickSave", "QuickLoad", "Quit", "GameInfo", "Observation", "Action", "ObsAction", "Step", "Data", "Query", "SaveReplay", "ReplayInfo", "AvailableMaps", "SaveMap", "MapCommand", "Ping", "Debug", "Id", "Error", "Status" }, new[]{ "Response" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.RequestCreateGame), global::SC2APIProtocol.RequestCreateGame.Parser, new[]{ "LocalMap", "BattlenetMapName", "PlayerSetup", "DisableFog", "RandomSeed", "Realtime" }, new[]{ "Map" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.LocalMap), global::SC2APIProtocol.LocalMap.Parser, new[]{ "MapPath", "MapData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ResponseCreateGame), global::SC2APIProtocol.ResponseCreateGame.Parser, new[]{ "Error", "ErrorDetails" }, null, new[]{ typeof(global::SC2APIProtocol.ResponseCreateGame.Types.Error) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.RequestJoinGame), global::SC2APIProtocol.RequestJoinGame.Parser, new[]{ "Race", "ObservedPlayerId", "Options", "ServerPorts", "ClientPorts", "SharedPort", "PlayerName", "HostIp" }, new[]{ "Participation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.PortSet), global::SC2APIProtocol.PortSet.Parser, new[]{ "GamePort", "BasePort" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ResponseJoinGame), global::SC2APIProtocol.ResponseJoinGame.Parser, new[]{ "PlayerId", "Error", "ErrorDetails" }, null, new[]{ typeof(global::SC2APIProtocol.ResponseJoinGame.Types.Error) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.RequestRestartGame), global::SC2APIProtocol.RequestRestartGame.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ResponseRestartGame), global::SC2APIProtocol.ResponseRestartGame.Parser, new[]{ "Error", "ErrorDetails", "NeedHardReset" }, null, new[]{ typeof(global::SC2APIProtocol.ResponseRestartGame.Types.Error) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.RequestStartReplay), global::SC2APIProtocol.RequestStartReplay.Parser, new[]{ "ReplayPath", "ReplayData", "MapData", "ObservedPlayerId", "Options", "DisableFog", "Realtime", "RecordReplay" }, new[]{ "Replay" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ResponseStartReplay), global::SC2APIProtocol.ResponseStartReplay.Parser, new[]{ "Error", "ErrorDetails" }, null, new[]{ typeof(global::SC2APIProtocol.ResponseStartReplay.Types.Error) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.RequestMapCommand), global::SC2APIProtocol.RequestMapCommand.Parser, new[]{ "TriggerCmd" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ResponseMapCommand), global::SC2APIProtocol.ResponseMapCommand.Parser, new[]{ "Error", "ErrorDetails" }, null, new[]{ typeof(global::SC2APIProtocol.ResponseMapCommand.Types.Error) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.RequestLeaveGame), global::SC2APIProtocol.RequestLeaveGame.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ResponseLeaveGame), global::SC2APIProtocol.ResponseLeaveGame.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.RequestQuickSave), global::SC2APIProtocol.RequestQuickSave.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ResponseQuickSave), global::SC2APIProtocol.ResponseQuickSave.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.RequestQuickLoad), global::SC2APIProtocol.RequestQuickLoad.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ResponseQuickLoad), global::SC2APIProtocol.ResponseQuickLoad.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.RequestQuit), global::SC2APIProtocol.RequestQuit.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ResponseQuit), global::SC2APIProtocol.ResponseQuit.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.RequestGameInfo), global::SC2APIProtocol.RequestGameInfo.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ResponseGameInfo), global::SC2APIProtocol.ResponseGameInfo.Parser, new[]{ "MapName", "ModNames", "LocalMapPath", "PlayerInfo", "StartRaw", "Options" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.RequestObservation), global::SC2APIProtocol.RequestObservation.Parser, new[]{ "DisableFog", "GameLoop" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ResponseObservation), global::SC2APIProtocol.ResponseObservation.Parser, new[]{ "Actions", "ActionErrors", "Observation", "PlayerResult", "Chat" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ChatReceived), global::SC2APIProtocol.ChatReceived.Parser, new[]{ "PlayerId", "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.RequestAction), global::SC2APIProtocol.RequestAction.Parser, new[]{ "Actions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ResponseAction), global::SC2APIProtocol.ResponseAction.Parser, new[]{ "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.RequestObserverAction), global::SC2APIProtocol.RequestObserverAction.Parser, new[]{ "Actions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ResponseObserverAction), global::SC2APIProtocol.ResponseObserverAction.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.RequestStep), global::SC2APIProtocol.RequestStep.Parser, new[]{ "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ResponseStep), global::SC2APIProtocol.ResponseStep.Parser, new[]{ "SimulationLoop" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.RequestData), global::SC2APIProtocol.RequestData.Parser, new[]{ "AbilityId", "UnitTypeId", "UpgradeId", "BuffId", "EffectId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ResponseData), global::SC2APIProtocol.ResponseData.Parser, new[]{ "Abilities", "Units", "Upgrades", "Buffs", "Effects" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.RequestSaveReplay), global::SC2APIProtocol.RequestSaveReplay.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ResponseSaveReplay), global::SC2APIProtocol.ResponseSaveReplay.Parser, new[]{ "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.RequestReplayInfo), global::SC2APIProtocol.RequestReplayInfo.Parser, new[]{ "ReplayPath", "ReplayData", "DownloadData" }, new[]{ "Replay" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.PlayerInfoExtra), global::SC2APIProtocol.PlayerInfoExtra.Parser, new[]{ "PlayerInfo", "PlayerResult", "PlayerMmr", "PlayerApm" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ResponseReplayInfo), global::SC2APIProtocol.ResponseReplayInfo.Parser, new[]{ "MapName", "LocalMapPath", "PlayerInfo", "GameDurationLoops", "GameDurationSeconds", "GameVersion", "DataVersion", "DataBuild", "BaseBuild", "Error", "ErrorDetails" }, null, new[]{ typeof(global::SC2APIProtocol.ResponseReplayInfo.Types.Error) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.RequestAvailableMaps), global::SC2APIProtocol.RequestAvailableMaps.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ResponseAvailableMaps), global::SC2APIProtocol.ResponseAvailableMaps.Parser, new[]{ "LocalMapPaths", "BattlenetMapNames" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.RequestSaveMap), global::SC2APIProtocol.RequestSaveMap.Parser, new[]{ "MapPath", "MapData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ResponseSaveMap), global::SC2APIProtocol.ResponseSaveMap.Parser, new[]{ "Error" }, null, new[]{ typeof(global::SC2APIProtocol.ResponseSaveMap.Types.Error) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.RequestPing), global::SC2APIProtocol.RequestPing.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ResponsePing), global::SC2APIProtocol.ResponsePing.Parser, new[]{ "GameVersion", "DataVersion", "DataBuild", "BaseBuild" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.RequestDebug), global::SC2APIProtocol.RequestDebug.Parser, new[]{ "Debug" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ResponseDebug), global::SC2APIProtocol.ResponseDebug.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.PlayerSetup), global::SC2APIProtocol.PlayerSetup.Parser, new[]{ "Type", "Race", "Difficulty", "PlayerName", "AiBuild" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.SpatialCameraSetup), global::SC2APIProtocol.SpatialCameraSetup.Parser, new[]{ "Resolution", "MinimapResolution", "Width", "CropToPlayableArea", "AllowCheatingLayers" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.InterfaceOptions), global::SC2APIProtocol.InterfaceOptions.Parser, new[]{ "Raw", "Score", "FeatureLayer", "Render", "ShowCloaked", "ShowBurrowedShadows", "ShowPlaceholders", "RawAffectsSelection", "RawCropToPlayableArea" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.PlayerInfo), global::SC2APIProtocol.PlayerInfo.Parser, new[]{ "PlayerId", "Type", "RaceRequested", "RaceActual", "Difficulty", "AiBuild", "PlayerName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.PlayerCommon), global::SC2APIProtocol.PlayerCommon.Parser, new[]{ "PlayerId", "Minerals", "Vespene", "FoodCap", "FoodUsed", "FoodArmy", "FoodWorkers", "IdleWorkerCount", "ArmyCount", "WarpGateCount", "LarvaCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.Observation), global::SC2APIProtocol.Observation.Parser, new[]{ "GameLoop", "PlayerCommon", "Alerts", "Abilities", "Score", "RawData", "FeatureLayerData", "RenderData", "UiData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.Action), global::SC2APIProtocol.Action.Parser, new[]{ "ActionRaw", "ActionFeatureLayer", "ActionRender", "ActionUi", "ActionChat", "GameLoop" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionChat), global::SC2APIProtocol.ActionChat.Parser, new[]{ "Channel", "Message" }, null, new[]{ typeof(global::SC2APIProtocol.ActionChat.Types.Channel) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionError), global::SC2APIProtocol.ActionError.Parser, new[]{ "UnitTag", "AbilityId", "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ObserverAction), global::SC2APIProtocol.ObserverAction.Parser, new[]{ "PlayerPerspective", "CameraMove", "CameraFollowPlayer", "CameraFollowUnits" }, new[]{ "Action" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionObserverPlayerPerspective), global::SC2APIProtocol.ActionObserverPlayerPerspective.Parser, new[]{ "PlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionObserverCameraMove), global::SC2APIProtocol.ActionObserverCameraMove.Parser, new[]{ "WorldPos", "Distance" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionObserverCameraFollowPlayer), global::SC2APIProtocol.ActionObserverCameraFollowPlayer.Parser, new[]{ "PlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionObserverCameraFollowUnits), global::SC2APIProtocol.ActionObserverCameraFollowUnits.Parser, new[]{ "UnitTags" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.PlayerResult), global::SC2APIProtocol.PlayerResult.Parser, new[]{ "PlayerId", "Result" }, null, null, null, null)
                }));
        }
        #endregion

    }
    #region Enums
    public enum Status
    {
        /// <summary>
        /// Game has been launch and is not yet doing anything.
        /// </summary>
        [pbr::OriginalName("launched")] Launched = 1,
        /// <summary>
        /// Create game has been called, and the host is awaiting players.
        /// </summary>
        [pbr::OriginalName("init_game")] InitGame = 2,
        /// <summary>
        /// In a single or multiplayer game.
        /// </summary>
        [pbr::OriginalName("in_game")] InGame = 3,
        /// <summary>
        /// In a replay.
        /// </summary>
        [pbr::OriginalName("in_replay")] InReplay = 4,
        /// <summary>
        /// Game has ended, can still request game info, but ready for a new game.
        /// </summary>
        [pbr::OriginalName("ended")] Ended = 5,
        /// <summary>
        /// Application is shutting down.
        /// </summary>
        [pbr::OriginalName("quit")] Quit = 6,
        /// <summary>
        /// Should not happen, but indicates an error if it occurs.
        /// </summary>
        [pbr::OriginalName("unknown")] Unknown = 99,
    }

    public enum Difficulty
    {
        [pbr::OriginalName("VeryEasy")] VeryEasy = 1,
        [pbr::OriginalName("Easy")] Easy = 2,
        [pbr::OriginalName("Medium")] Medium = 3,
        [pbr::OriginalName("MediumHard")] MediumHard = 4,
        [pbr::OriginalName("Hard")] Hard = 5,
        [pbr::OriginalName("Harder")] Harder = 6,
        [pbr::OriginalName("VeryHard")] VeryHard = 7,
        [pbr::OriginalName("CheatVision")] CheatVision = 8,
        [pbr::OriginalName("CheatMoney")] CheatMoney = 9,
        [pbr::OriginalName("CheatInsane")] CheatInsane = 10,
    }

    public enum PlayerType
    {
        [pbr::OriginalName("Participant")] Participant = 1,
        [pbr::OriginalName("Computer")] Computer = 2,
        [pbr::OriginalName("Observer")] Observer = 3,
    }

    public enum AIBuild
    {
        [pbr::OriginalName("RandomBuild")] RandomBuild = 1,
        [pbr::OriginalName("Rush")] Rush = 2,
        [pbr::OriginalName("Timing")] Timing = 3,
        [pbr::OriginalName("Power")] Power = 4,
        [pbr::OriginalName("Macro")] Macro = 5,
        [pbr::OriginalName("Air")] Air = 6,
    }

    public enum Alert
    {
        [pbr::OriginalName("AlertError")] Error = 3,
        [pbr::OriginalName("AddOnComplete")] AddOnComplete = 4,
        [pbr::OriginalName("BuildingComplete")] BuildingComplete = 5,
        [pbr::OriginalName("BuildingUnderAttack")] BuildingUnderAttack = 6,
        [pbr::OriginalName("LarvaHatched")] LarvaHatched = 7,
        [pbr::OriginalName("MergeComplete")] MergeComplete = 8,
        [pbr::OriginalName("MineralsExhausted")] MineralsExhausted = 9,
        [pbr::OriginalName("MorphComplete")] MorphComplete = 10,
        [pbr::OriginalName("MothershipComplete")] MothershipComplete = 11,
        [pbr::OriginalName("MULEExpired")] Muleexpired = 12,
        [pbr::OriginalName("NuclearLaunchDetected")] NuclearLaunchDetected = 1,
        [pbr::OriginalName("NukeComplete")] NukeComplete = 13,
        [pbr::OriginalName("NydusWormDetected")] NydusWormDetected = 2,
        [pbr::OriginalName("ResearchComplete")] ResearchComplete = 14,
        [pbr::OriginalName("TrainError")] TrainError = 15,
        [pbr::OriginalName("TrainUnitComplete")] TrainUnitComplete = 16,
        [pbr::OriginalName("TrainWorkerComplete")] TrainWorkerComplete = 17,
        [pbr::OriginalName("TransformationComplete")] TransformationComplete = 18,
        [pbr::OriginalName("UnitUnderAttack")] UnitUnderAttack = 19,
        [pbr::OriginalName("UpgradeComplete")] UpgradeComplete = 20,
        [pbr::OriginalName("VespeneExhausted")] VespeneExhausted = 21,
        [pbr::OriginalName("WarpInComplete")] WarpInComplete = 22,
    }

    public enum Result
    {
        [pbr::OriginalName("Victory")] Victory = 1,
        [pbr::OriginalName("Defeat")] Defeat = 2,
        [pbr::OriginalName("Tie")] Tie = 3,
        [pbr::OriginalName("Undecided")] Undecided = 4,
    }

    #endregion

    #region Messages
    public sealed partial class Request : pb::IMessage<Request>
    {
        private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Request> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request(Request other) : this()
        {
            _hasBits0 = other._hasBits0;
            id_ = other.id_;
            switch (other.RequestCase)
            {
                case RequestOneofCase.CreateGame:
                    CreateGame = other.CreateGame.Clone();
                    break;
                case RequestOneofCase.JoinGame:
                    JoinGame = other.JoinGame.Clone();
                    break;
                case RequestOneofCase.RestartGame:
                    RestartGame = other.RestartGame.Clone();
                    break;
                case RequestOneofCase.StartReplay:
                    StartReplay = other.StartReplay.Clone();
                    break;
                case RequestOneofCase.LeaveGame:
                    LeaveGame = other.LeaveGame.Clone();
                    break;
                case RequestOneofCase.QuickSave:
                    QuickSave = other.QuickSave.Clone();
                    break;
                case RequestOneofCase.QuickLoad:
                    QuickLoad = other.QuickLoad.Clone();
                    break;
                case RequestOneofCase.Quit:
                    Quit = other.Quit.Clone();
                    break;
                case RequestOneofCase.GameInfo:
                    GameInfo = other.GameInfo.Clone();
                    break;
                case RequestOneofCase.Observation:
                    Observation = other.Observation.Clone();
                    break;
                case RequestOneofCase.Action:
                    Action = other.Action.Clone();
                    break;
                case RequestOneofCase.ObsAction:
                    ObsAction = other.ObsAction.Clone();
                    break;
                case RequestOneofCase.Step:
                    Step = other.Step.Clone();
                    break;
                case RequestOneofCase.Data:
                    Data = other.Data.Clone();
                    break;
                case RequestOneofCase.Query:
                    Query = other.Query.Clone();
                    break;
                case RequestOneofCase.SaveReplay:
                    SaveReplay = other.SaveReplay.Clone();
                    break;
                case RequestOneofCase.MapCommand:
                    MapCommand = other.MapCommand.Clone();
                    break;
                case RequestOneofCase.ReplayInfo:
                    ReplayInfo = other.ReplayInfo.Clone();
                    break;
                case RequestOneofCase.AvailableMaps:
                    AvailableMaps = other.AvailableMaps.Clone();
                    break;
                case RequestOneofCase.SaveMap:
                    SaveMap = other.SaveMap.Clone();
                    break;
                case RequestOneofCase.Ping:
                    Ping = other.Ping.Clone();
                    break;
                case RequestOneofCase.Debug:
                    Debug = other.Debug.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request Clone()
        {
            return new Request(this);
        }

        /// <summary>Field number for the "create_game" field.</summary>
        public const int CreateGameFieldNumber = 1;
        /// <summary>
        /// Game Setup
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.RequestCreateGame CreateGame
        {
            get { return HasCreateGame ? (global::SC2APIProtocol.RequestCreateGame)request_ : null; }
            set
            {
                request_ = value;
                requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.CreateGame;
            }
        }
        /// <summary>Gets whether the "create_game" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCreateGame
        {
            get { return requestCase_ == RequestOneofCase.CreateGame; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "create_game" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCreateGame()
        {
            if (HasCreateGame)
            {
                ClearRequest();
            }
        }

        /// <summary>Field number for the "join_game" field.</summary>
        public const int JoinGameFieldNumber = 2;
        /// <summary>
        /// Send to host and all clients for game to begin.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.RequestJoinGame JoinGame
        {
            get { return HasJoinGame ? (global::SC2APIProtocol.RequestJoinGame)request_ : null; }
            set
            {
                request_ = value;
                requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.JoinGame;
            }
        }
        /// <summary>Gets whether the "join_game" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasJoinGame
        {
            get { return requestCase_ == RequestOneofCase.JoinGame; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "join_game" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearJoinGame()
        {
            if (HasJoinGame)
            {
                ClearRequest();
            }
        }

        /// <summary>Field number for the "restart_game" field.</summary>
        public const int RestartGameFieldNumber = 3;
        /// <summary>
        /// Single player only. Reinitializes the game with the same player setup.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.RequestRestartGame RestartGame
        {
            get { return HasRestartGame ? (global::SC2APIProtocol.RequestRestartGame)request_ : null; }
            set
            {
                request_ = value;
                requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.RestartGame;
            }
        }
        /// <summary>Gets whether the "restart_game" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRestartGame
        {
            get { return requestCase_ == RequestOneofCase.RestartGame; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "restart_game" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRestartGame()
        {
            if (HasRestartGame)
            {
                ClearRequest();
            }
        }

        /// <summary>Field number for the "start_replay" field.</summary>
        public const int StartReplayFieldNumber = 4;
        /// <summary>
        /// Start playing a replay.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.RequestStartReplay StartReplay
        {
            get { return HasStartReplay ? (global::SC2APIProtocol.RequestStartReplay)request_ : null; }
            set
            {
                request_ = value;
                requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.StartReplay;
            }
        }
        /// <summary>Gets whether the "start_replay" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasStartReplay
        {
            get { return requestCase_ == RequestOneofCase.StartReplay; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "start_replay" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearStartReplay()
        {
            if (HasStartReplay)
            {
                ClearRequest();
            }
        }

        /// <summary>Field number for the "leave_game" field.</summary>
        public const int LeaveGameFieldNumber = 5;
        /// <summary>
        /// Multiplayer only. Disconnects from a multiplayer game, equivalent to surrender.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.RequestLeaveGame LeaveGame
        {
            get { return HasLeaveGame ? (global::SC2APIProtocol.RequestLeaveGame)request_ : null; }
            set
            {
                request_ = value;
                requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.LeaveGame;
            }
        }
        /// <summary>Gets whether the "leave_game" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLeaveGame
        {
            get { return requestCase_ == RequestOneofCase.LeaveGame; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "leave_game" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLeaveGame()
        {
            if (HasLeaveGame)
            {
                ClearRequest();
            }
        }

        /// <summary>Field number for the "quick_save" field.</summary>
        public const int QuickSaveFieldNumber = 6;
        /// <summary>
        /// Saves game to an in-memory bookmark.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.RequestQuickSave QuickSave
        {
            get { return HasQuickSave ? (global::SC2APIProtocol.RequestQuickSave)request_ : null; }
            set
            {
                request_ = value;
                requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.QuickSave;
            }
        }
        /// <summary>Gets whether the "quick_save" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasQuickSave
        {
            get { return requestCase_ == RequestOneofCase.QuickSave; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "quick_save" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearQuickSave()
        {
            if (HasQuickSave)
            {
                ClearRequest();
            }
        }

        /// <summary>Field number for the "quick_load" field.</summary>
        public const int QuickLoadFieldNumber = 7;
        /// <summary>
        /// Loads from an in-memory bookmark.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.RequestQuickLoad QuickLoad
        {
            get { return HasQuickLoad ? (global::SC2APIProtocol.RequestQuickLoad)request_ : null; }
            set
            {
                request_ = value;
                requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.QuickLoad;
            }
        }
        /// <summary>Gets whether the "quick_load" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasQuickLoad
        {
            get { return requestCase_ == RequestOneofCase.QuickLoad; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "quick_load" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearQuickLoad()
        {
            if (HasQuickLoad)
            {
                ClearRequest();
            }
        }

        /// <summary>Field number for the "quit" field.</summary>
        public const int QuitFieldNumber = 8;
        /// <summary>
        /// Terminates the application.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.RequestQuit Quit
        {
            get { return HasQuit ? (global::SC2APIProtocol.RequestQuit)request_ : null; }
            set
            {
                request_ = value;
                requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.Quit;
            }
        }
        /// <summary>Gets whether the "quit" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasQuit
        {
            get { return requestCase_ == RequestOneofCase.Quit; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "quit" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearQuit()
        {
            if (HasQuit)
            {
                ClearRequest();
            }
        }

        /// <summary>Field number for the "game_info" field.</summary>
        public const int GameInfoFieldNumber = 9;
        /// <summary>
        /// During Game
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.RequestGameInfo GameInfo
        {
            get { return HasGameInfo ? (global::SC2APIProtocol.RequestGameInfo)request_ : null; }
            set
            {
                request_ = value;
                requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.GameInfo;
            }
        }
        /// <summary>Gets whether the "game_info" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGameInfo
        {
            get { return requestCase_ == RequestOneofCase.GameInfo; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "game_info" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGameInfo()
        {
            if (HasGameInfo)
            {
                ClearRequest();
            }
        }

        /// <summary>Field number for the "observation" field.</summary>
        public const int ObservationFieldNumber = 10;
        /// <summary>
        /// Snapshot of the current game state.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.RequestObservation Observation
        {
            get { return HasObservation ? (global::SC2APIProtocol.RequestObservation)request_ : null; }
            set
            {
                request_ = value;
                requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.Observation;
            }
        }
        /// <summary>Gets whether the "observation" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasObservation
        {
            get { return requestCase_ == RequestOneofCase.Observation; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "observation" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearObservation()
        {
            if (HasObservation)
            {
                ClearRequest();
            }
        }

        /// <summary>Field number for the "action" field.</summary>
        public const int ActionFieldNumber = 11;
        /// <summary>
        /// Executes an action for a participant.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.RequestAction Action
        {
            get { return HasAction ? (global::SC2APIProtocol.RequestAction)request_ : null; }
            set
            {
                request_ = value;
                requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.Action;
            }
        }
        /// <summary>Gets whether the "action" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAction
        {
            get { return requestCase_ == RequestOneofCase.Action; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "action" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAction()
        {
            if (HasAction)
            {
                ClearRequest();
            }
        }

        /// <summary>Field number for the "obs_action" field.</summary>
        public const int ObsActionFieldNumber = 21;
        /// <summary>
        /// Executes an action for an observer.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.RequestObserverAction ObsAction
        {
            get { return HasObsAction ? (global::SC2APIProtocol.RequestObserverAction)request_ : null; }
            set
            {
                request_ = value;
                requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.ObsAction;
            }
        }
        /// <summary>Gets whether the "obs_action" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasObsAction
        {
            get { return requestCase_ == RequestOneofCase.ObsAction; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "obs_action" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearObsAction()
        {
            if (HasObsAction)
            {
                ClearRequest();
            }
        }

        /// <summary>Field number for the "step" field.</summary>
        public const int StepFieldNumber = 12;
        /// <summary>
        /// Advances the game simulation.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.RequestStep Step
        {
            get { return HasStep ? (global::SC2APIProtocol.RequestStep)request_ : null; }
            set
            {
                request_ = value;
                requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.Step;
            }
        }
        /// <summary>Gets whether the "step" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasStep
        {
            get { return requestCase_ == RequestOneofCase.Step; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "step" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearStep()
        {
            if (HasStep)
            {
                ClearRequest();
            }
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 13;
        /// <summary>
        /// Data about different gameplay elements. May be different for different games.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.RequestData Data
        {
            get { return HasData ? (global::SC2APIProtocol.RequestData)request_ : null; }
            set
            {
                request_ = value;
                requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.Data;
            }
        }
        /// <summary>Gets whether the "data" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasData
        {
            get { return requestCase_ == RequestOneofCase.Data; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "data" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData()
        {
            if (HasData)
            {
                ClearRequest();
            }
        }

        /// <summary>Field number for the "query" field.</summary>
        public const int QueryFieldNumber = 14;
        /// <summary>
        /// Additional methods for inspecting game state.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.RequestQuery Query
        {
            get { return HasQuery ? (global::SC2APIProtocol.RequestQuery)request_ : null; }
            set
            {
                request_ = value;
                requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.Query;
            }
        }
        /// <summary>Gets whether the "query" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasQuery
        {
            get { return requestCase_ == RequestOneofCase.Query; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "query" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearQuery()
        {
            if (HasQuery)
            {
                ClearRequest();
            }
        }

        /// <summary>Field number for the "save_replay" field.</summary>
        public const int SaveReplayFieldNumber = 15;
        /// <summary>
        /// Generates a replay.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.RequestSaveReplay SaveReplay
        {
            get { return HasSaveReplay ? (global::SC2APIProtocol.RequestSaveReplay)request_ : null; }
            set
            {
                request_ = value;
                requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.SaveReplay;
            }
        }
        /// <summary>Gets whether the "save_replay" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSaveReplay
        {
            get { return requestCase_ == RequestOneofCase.SaveReplay; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "save_replay" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSaveReplay()
        {
            if (HasSaveReplay)
            {
                ClearRequest();
            }
        }

        /// <summary>Field number for the "map_command" field.</summary>
        public const int MapCommandFieldNumber = 22;
        /// <summary>
        /// Execute a particular trigger through a string interface
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.RequestMapCommand MapCommand
        {
            get { return HasMapCommand ? (global::SC2APIProtocol.RequestMapCommand)request_ : null; }
            set
            {
                request_ = value;
                requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.MapCommand;
            }
        }
        /// <summary>Gets whether the "map_command" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMapCommand
        {
            get { return requestCase_ == RequestOneofCase.MapCommand; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "map_command" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMapCommand()
        {
            if (HasMapCommand)
            {
                ClearRequest();
            }
        }

        /// <summary>Field number for the "replay_info" field.</summary>
        public const int ReplayInfoFieldNumber = 16;
        /// <summary>
        /// Other.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.RequestReplayInfo ReplayInfo
        {
            get { return HasReplayInfo ? (global::SC2APIProtocol.RequestReplayInfo)request_ : null; }
            set
            {
                request_ = value;
                requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.ReplayInfo;
            }
        }
        /// <summary>Gets whether the "replay_info" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasReplayInfo
        {
            get { return requestCase_ == RequestOneofCase.ReplayInfo; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "replay_info" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearReplayInfo()
        {
            if (HasReplayInfo)
            {
                ClearRequest();
            }
        }

        /// <summary>Field number for the "available_maps" field.</summary>
        public const int AvailableMapsFieldNumber = 17;
        /// <summary>
        /// Returns directory of maps that can be played on.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.RequestAvailableMaps AvailableMaps
        {
            get { return HasAvailableMaps ? (global::SC2APIProtocol.RequestAvailableMaps)request_ : null; }
            set
            {
                request_ = value;
                requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.AvailableMaps;
            }
        }
        /// <summary>Gets whether the "available_maps" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAvailableMaps
        {
            get { return requestCase_ == RequestOneofCase.AvailableMaps; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "available_maps" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAvailableMaps()
        {
            if (HasAvailableMaps)
            {
                ClearRequest();
            }
        }

        /// <summary>Field number for the "save_map" field.</summary>
        public const int SaveMapFieldNumber = 18;
        /// <summary>
        /// Saves binary map data to the local temp directory.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.RequestSaveMap SaveMap
        {
            get { return HasSaveMap ? (global::SC2APIProtocol.RequestSaveMap)request_ : null; }
            set
            {
                request_ = value;
                requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.SaveMap;
            }
        }
        /// <summary>Gets whether the "save_map" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSaveMap
        {
            get { return requestCase_ == RequestOneofCase.SaveMap; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "save_map" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSaveMap()
        {
            if (HasSaveMap)
            {
                ClearRequest();
            }
        }

        /// <summary>Field number for the "ping" field.</summary>
        public const int PingFieldNumber = 19;
        /// <summary>
        /// Debugging
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.RequestPing Ping
        {
            get { return HasPing ? (global::SC2APIProtocol.RequestPing)request_ : null; }
            set
            {
                request_ = value;
                requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.Ping;
            }
        }
        /// <summary>Gets whether the "ping" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPing
        {
            get { return requestCase_ == RequestOneofCase.Ping; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "ping" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPing()
        {
            if (HasPing)
            {
                ClearRequest();
            }
        }

        /// <summary>Field number for the "debug" field.</summary>
        public const int DebugFieldNumber = 20;
        /// <summary>
        /// Display debug information and execute debug actions.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.RequestDebug Debug
        {
            get { return HasDebug ? (global::SC2APIProtocol.RequestDebug)request_ : null; }
            set
            {
                request_ = value;
                requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.Debug;
            }
        }
        /// <summary>Gets whether the "debug" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDebug
        {
            get { return requestCase_ == RequestOneofCase.Debug; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "debug" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDebug()
        {
            if (HasDebug)
            {
                ClearRequest();
            }
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 97;
        private readonly static uint IdDefaultValue = 0;

        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id
        {
            get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                id_ = value;
            }
        }
        /// <summary>Gets whether the "id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasId
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearId()
        {
            _hasBits0 &= ~1;
        }

        private object request_;
        /// <summary>Enum of possible cases for the "request" oneof.</summary>
        public enum RequestOneofCase
        {
            None = 0,
            CreateGame = 1,
            JoinGame = 2,
            RestartGame = 3,
            StartReplay = 4,
            LeaveGame = 5,
            QuickSave = 6,
            QuickLoad = 7,
            Quit = 8,
            GameInfo = 9,
            Observation = 10,
            Action = 11,
            ObsAction = 21,
            Step = 12,
            Data = 13,
            Query = 14,
            SaveReplay = 15,
            MapCommand = 22,
            ReplayInfo = 16,
            AvailableMaps = 17,
            SaveMap = 18,
            Ping = 19,
            Debug = 20,
        }
        private RequestOneofCase requestCase_ = RequestOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestOneofCase RequestCase
        {
            get { return requestCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRequest()
        {
            requestCase_ = RequestOneofCase.None;
            request_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Request);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Request other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(CreateGame, other.CreateGame)) return false;
            if (!object.Equals(JoinGame, other.JoinGame)) return false;
            if (!object.Equals(RestartGame, other.RestartGame)) return false;
            if (!object.Equals(StartReplay, other.StartReplay)) return false;
            if (!object.Equals(LeaveGame, other.LeaveGame)) return false;
            if (!object.Equals(QuickSave, other.QuickSave)) return false;
            if (!object.Equals(QuickLoad, other.QuickLoad)) return false;
            if (!object.Equals(Quit, other.Quit)) return false;
            if (!object.Equals(GameInfo, other.GameInfo)) return false;
            if (!object.Equals(Observation, other.Observation)) return false;
            if (!object.Equals(Action, other.Action)) return false;
            if (!object.Equals(ObsAction, other.ObsAction)) return false;
            if (!object.Equals(Step, other.Step)) return false;
            if (!object.Equals(Data, other.Data)) return false;
            if (!object.Equals(Query, other.Query)) return false;
            if (!object.Equals(SaveReplay, other.SaveReplay)) return false;
            if (!object.Equals(MapCommand, other.MapCommand)) return false;
            if (!object.Equals(ReplayInfo, other.ReplayInfo)) return false;
            if (!object.Equals(AvailableMaps, other.AvailableMaps)) return false;
            if (!object.Equals(SaveMap, other.SaveMap)) return false;
            if (!object.Equals(Ping, other.Ping)) return false;
            if (!object.Equals(Debug, other.Debug)) return false;
            if (Id != other.Id) return false;
            if (RequestCase != other.RequestCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasCreateGame) hash ^= CreateGame.GetHashCode();
            if (HasJoinGame) hash ^= JoinGame.GetHashCode();
            if (HasRestartGame) hash ^= RestartGame.GetHashCode();
            if (HasStartReplay) hash ^= StartReplay.GetHashCode();
            if (HasLeaveGame) hash ^= LeaveGame.GetHashCode();
            if (HasQuickSave) hash ^= QuickSave.GetHashCode();
            if (HasQuickLoad) hash ^= QuickLoad.GetHashCode();
            if (HasQuit) hash ^= Quit.GetHashCode();
            if (HasGameInfo) hash ^= GameInfo.GetHashCode();
            if (HasObservation) hash ^= Observation.GetHashCode();
            if (HasAction) hash ^= Action.GetHashCode();
            if (HasObsAction) hash ^= ObsAction.GetHashCode();
            if (HasStep) hash ^= Step.GetHashCode();
            if (HasData) hash ^= Data.GetHashCode();
            if (HasQuery) hash ^= Query.GetHashCode();
            if (HasSaveReplay) hash ^= SaveReplay.GetHashCode();
            if (HasMapCommand) hash ^= MapCommand.GetHashCode();
            if (HasReplayInfo) hash ^= ReplayInfo.GetHashCode();
            if (HasAvailableMaps) hash ^= AvailableMaps.GetHashCode();
            if (HasSaveMap) hash ^= SaveMap.GetHashCode();
            if (HasPing) hash ^= Ping.GetHashCode();
            if (HasDebug) hash ^= Debug.GetHashCode();
            if (HasId) hash ^= Id.GetHashCode();
            hash ^= (int)requestCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasCreateGame)
            {
                output.WriteRawTag(10);
                output.WriteMessage(CreateGame);
            }
            if (HasJoinGame)
            {
                output.WriteRawTag(18);
                output.WriteMessage(JoinGame);
            }
            if (HasRestartGame)
            {
                output.WriteRawTag(26);
                output.WriteMessage(RestartGame);
            }
            if (HasStartReplay)
            {
                output.WriteRawTag(34);
                output.WriteMessage(StartReplay);
            }
            if (HasLeaveGame)
            {
                output.WriteRawTag(42);
                output.WriteMessage(LeaveGame);
            }
            if (HasQuickSave)
            {
                output.WriteRawTag(50);
                output.WriteMessage(QuickSave);
            }
            if (HasQuickLoad)
            {
                output.WriteRawTag(58);
                output.WriteMessage(QuickLoad);
            }
            if (HasQuit)
            {
                output.WriteRawTag(66);
                output.WriteMessage(Quit);
            }
            if (HasGameInfo)
            {
                output.WriteRawTag(74);
                output.WriteMessage(GameInfo);
            }
            if (HasObservation)
            {
                output.WriteRawTag(82);
                output.WriteMessage(Observation);
            }
            if (HasAction)
            {
                output.WriteRawTag(90);
                output.WriteMessage(Action);
            }
            if (HasStep)
            {
                output.WriteRawTag(98);
                output.WriteMessage(Step);
            }
            if (HasData)
            {
                output.WriteRawTag(106);
                output.WriteMessage(Data);
            }
            if (HasQuery)
            {
                output.WriteRawTag(114);
                output.WriteMessage(Query);
            }
            if (HasSaveReplay)
            {
                output.WriteRawTag(122);
                output.WriteMessage(SaveReplay);
            }
            if (HasReplayInfo)
            {
                output.WriteRawTag(130, 1);
                output.WriteMessage(ReplayInfo);
            }
            if (HasAvailableMaps)
            {
                output.WriteRawTag(138, 1);
                output.WriteMessage(AvailableMaps);
            }
            if (HasSaveMap)
            {
                output.WriteRawTag(146, 1);
                output.WriteMessage(SaveMap);
            }
            if (HasPing)
            {
                output.WriteRawTag(154, 1);
                output.WriteMessage(Ping);
            }
            if (HasDebug)
            {
                output.WriteRawTag(162, 1);
                output.WriteMessage(Debug);
            }
            if (HasObsAction)
            {
                output.WriteRawTag(170, 1);
                output.WriteMessage(ObsAction);
            }
            if (HasMapCommand)
            {
                output.WriteRawTag(178, 1);
                output.WriteMessage(MapCommand);
            }
            if (HasId)
            {
                output.WriteRawTag(136, 6);
                output.WriteUInt32(Id);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasCreateGame)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateGame);
            }
            if (HasJoinGame)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(JoinGame);
            }
            if (HasRestartGame)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(RestartGame);
            }
            if (HasStartReplay)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartReplay);
            }
            if (HasLeaveGame)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeaveGame);
            }
            if (HasQuickSave)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(QuickSave);
            }
            if (HasQuickLoad)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(QuickLoad);
            }
            if (HasQuit)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Quit);
            }
            if (HasGameInfo)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameInfo);
            }
            if (HasObservation)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Observation);
            }
            if (HasAction)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Action);
            }
            if (HasObsAction)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(ObsAction);
            }
            if (HasStep)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Step);
            }
            if (HasData)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
            }
            if (HasQuery)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Query);
            }
            if (HasSaveReplay)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SaveReplay);
            }
            if (HasMapCommand)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(MapCommand);
            }
            if (HasReplayInfo)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReplayInfo);
            }
            if (HasAvailableMaps)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(AvailableMaps);
            }
            if (HasSaveMap)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(SaveMap);
            }
            if (HasPing)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ping);
            }
            if (HasDebug)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(Debug);
            }
            if (HasId)
            {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Id);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Request other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasId)
            {
                Id = other.Id;
            }
            switch (other.RequestCase)
            {
                case RequestOneofCase.CreateGame:
                    if (CreateGame == null)
                    {
                        CreateGame = new global::SC2APIProtocol.RequestCreateGame();
                    }
                    CreateGame.MergeFrom(other.CreateGame);
                    break;
                case RequestOneofCase.JoinGame:
                    if (JoinGame == null)
                    {
                        JoinGame = new global::SC2APIProtocol.RequestJoinGame();
                    }
                    JoinGame.MergeFrom(other.JoinGame);
                    break;
                case RequestOneofCase.RestartGame:
                    if (RestartGame == null)
                    {
                        RestartGame = new global::SC2APIProtocol.RequestRestartGame();
                    }
                    RestartGame.MergeFrom(other.RestartGame);
                    break;
                case RequestOneofCase.StartReplay:
                    if (StartReplay == null)
                    {
                        StartReplay = new global::SC2APIProtocol.RequestStartReplay();
                    }
                    StartReplay.MergeFrom(other.StartReplay);
                    break;
                case RequestOneofCase.LeaveGame:
                    if (LeaveGame == null)
                    {
                        LeaveGame = new global::SC2APIProtocol.RequestLeaveGame();
                    }
                    LeaveGame.MergeFrom(other.LeaveGame);
                    break;
                case RequestOneofCase.QuickSave:
                    if (QuickSave == null)
                    {
                        QuickSave = new global::SC2APIProtocol.RequestQuickSave();
                    }
                    QuickSave.MergeFrom(other.QuickSave);
                    break;
                case RequestOneofCase.QuickLoad:
                    if (QuickLoad == null)
                    {
                        QuickLoad = new global::SC2APIProtocol.RequestQuickLoad();
                    }
                    QuickLoad.MergeFrom(other.QuickLoad);
                    break;
                case RequestOneofCase.Quit:
                    if (Quit == null)
                    {
                        Quit = new global::SC2APIProtocol.RequestQuit();
                    }
                    Quit.MergeFrom(other.Quit);
                    break;
                case RequestOneofCase.GameInfo:
                    if (GameInfo == null)
                    {
                        GameInfo = new global::SC2APIProtocol.RequestGameInfo();
                    }
                    GameInfo.MergeFrom(other.GameInfo);
                    break;
                case RequestOneofCase.Observation:
                    if (Observation == null)
                    {
                        Observation = new global::SC2APIProtocol.RequestObservation();
                    }
                    Observation.MergeFrom(other.Observation);
                    break;
                case RequestOneofCase.Action:
                    if (Action == null)
                    {
                        Action = new global::SC2APIProtocol.RequestAction();
                    }
                    Action.MergeFrom(other.Action);
                    break;
                case RequestOneofCase.ObsAction:
                    if (ObsAction == null)
                    {
                        ObsAction = new global::SC2APIProtocol.RequestObserverAction();
                    }
                    ObsAction.MergeFrom(other.ObsAction);
                    break;
                case RequestOneofCase.Step:
                    if (Step == null)
                    {
                        Step = new global::SC2APIProtocol.RequestStep();
                    }
                    Step.MergeFrom(other.Step);
                    break;
                case RequestOneofCase.Data:
                    if (Data == null)
                    {
                        Data = new global::SC2APIProtocol.RequestData();
                    }
                    Data.MergeFrom(other.Data);
                    break;
                case RequestOneofCase.Query:
                    if (Query == null)
                    {
                        Query = new global::SC2APIProtocol.RequestQuery();
                    }
                    Query.MergeFrom(other.Query);
                    break;
                case RequestOneofCase.SaveReplay:
                    if (SaveReplay == null)
                    {
                        SaveReplay = new global::SC2APIProtocol.RequestSaveReplay();
                    }
                    SaveReplay.MergeFrom(other.SaveReplay);
                    break;
                case RequestOneofCase.MapCommand:
                    if (MapCommand == null)
                    {
                        MapCommand = new global::SC2APIProtocol.RequestMapCommand();
                    }
                    MapCommand.MergeFrom(other.MapCommand);
                    break;
                case RequestOneofCase.ReplayInfo:
                    if (ReplayInfo == null)
                    {
                        ReplayInfo = new global::SC2APIProtocol.RequestReplayInfo();
                    }
                    ReplayInfo.MergeFrom(other.ReplayInfo);
                    break;
                case RequestOneofCase.AvailableMaps:
                    if (AvailableMaps == null)
                    {
                        AvailableMaps = new global::SC2APIProtocol.RequestAvailableMaps();
                    }
                    AvailableMaps.MergeFrom(other.AvailableMaps);
                    break;
                case RequestOneofCase.SaveMap:
                    if (SaveMap == null)
                    {
                        SaveMap = new global::SC2APIProtocol.RequestSaveMap();
                    }
                    SaveMap.MergeFrom(other.SaveMap);
                    break;
                case RequestOneofCase.Ping:
                    if (Ping == null)
                    {
                        Ping = new global::SC2APIProtocol.RequestPing();
                    }
                    Ping.MergeFrom(other.Ping);
                    break;
                case RequestOneofCase.Debug:
                    if (Debug == null)
                    {
                        Debug = new global::SC2APIProtocol.RequestDebug();
                    }
                    Debug.MergeFrom(other.Debug);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            global::SC2APIProtocol.RequestCreateGame subBuilder = new global::SC2APIProtocol.RequestCreateGame();
                            if (HasCreateGame)
                            {
                                subBuilder.MergeFrom(CreateGame);
                            }
                            input.ReadMessage(subBuilder);
                            CreateGame = subBuilder;
                            break;
                        }
                    case 18:
                        {
                            global::SC2APIProtocol.RequestJoinGame subBuilder = new global::SC2APIProtocol.RequestJoinGame();
                            if (HasJoinGame)
                            {
                                subBuilder.MergeFrom(JoinGame);
                            }
                            input.ReadMessage(subBuilder);
                            JoinGame = subBuilder;
                            break;
                        }
                    case 26:
                        {
                            global::SC2APIProtocol.RequestRestartGame subBuilder = new global::SC2APIProtocol.RequestRestartGame();
                            if (HasRestartGame)
                            {
                                subBuilder.MergeFrom(RestartGame);
                            }
                            input.ReadMessage(subBuilder);
                            RestartGame = subBuilder;
                            break;
                        }
                    case 34:
                        {
                            global::SC2APIProtocol.RequestStartReplay subBuilder = new global::SC2APIProtocol.RequestStartReplay();
                            if (HasStartReplay)
                            {
                                subBuilder.MergeFrom(StartReplay);
                            }
                            input.ReadMessage(subBuilder);
                            StartReplay = subBuilder;
                            break;
                        }
                    case 42:
                        {
                            global::SC2APIProtocol.RequestLeaveGame subBuilder = new global::SC2APIProtocol.RequestLeaveGame();
                            if (HasLeaveGame)
                            {
                                subBuilder.MergeFrom(LeaveGame);
                            }
                            input.ReadMessage(subBuilder);
                            LeaveGame = subBuilder;
                            break;
                        }
                    case 50:
                        {
                            global::SC2APIProtocol.RequestQuickSave subBuilder = new global::SC2APIProtocol.RequestQuickSave();
                            if (HasQuickSave)
                            {
                                subBuilder.MergeFrom(QuickSave);
                            }
                            input.ReadMessage(subBuilder);
                            QuickSave = subBuilder;
                            break;
                        }
                    case 58:
                        {
                            global::SC2APIProtocol.RequestQuickLoad subBuilder = new global::SC2APIProtocol.RequestQuickLoad();
                            if (HasQuickLoad)
                            {
                                subBuilder.MergeFrom(QuickLoad);
                            }
                            input.ReadMessage(subBuilder);
                            QuickLoad = subBuilder;
                            break;
                        }
                    case 66:
                        {
                            global::SC2APIProtocol.RequestQuit subBuilder = new global::SC2APIProtocol.RequestQuit();
                            if (HasQuit)
                            {
                                subBuilder.MergeFrom(Quit);
                            }
                            input.ReadMessage(subBuilder);
                            Quit = subBuilder;
                            break;
                        }
                    case 74:
                        {
                            global::SC2APIProtocol.RequestGameInfo subBuilder = new global::SC2APIProtocol.RequestGameInfo();
                            if (HasGameInfo)
                            {
                                subBuilder.MergeFrom(GameInfo);
                            }
                            input.ReadMessage(subBuilder);
                            GameInfo = subBuilder;
                            break;
                        }
                    case 82:
                        {
                            global::SC2APIProtocol.RequestObservation subBuilder = new global::SC2APIProtocol.RequestObservation();
                            if (HasObservation)
                            {
                                subBuilder.MergeFrom(Observation);
                            }
                            input.ReadMessage(subBuilder);
                            Observation = subBuilder;
                            break;
                        }
                    case 90:
                        {
                            global::SC2APIProtocol.RequestAction subBuilder = new global::SC2APIProtocol.RequestAction();
                            if (HasAction)
                            {
                                subBuilder.MergeFrom(Action);
                            }
                            input.ReadMessage(subBuilder);
                            Action = subBuilder;
                            break;
                        }
                    case 98:
                        {
                            global::SC2APIProtocol.RequestStep subBuilder = new global::SC2APIProtocol.RequestStep();
                            if (HasStep)
                            {
                                subBuilder.MergeFrom(Step);
                            }
                            input.ReadMessage(subBuilder);
                            Step = subBuilder;
                            break;
                        }
                    case 106:
                        {
                            global::SC2APIProtocol.RequestData subBuilder = new global::SC2APIProtocol.RequestData();
                            if (HasData)
                            {
                                subBuilder.MergeFrom(Data);
                            }
                            input.ReadMessage(subBuilder);
                            Data = subBuilder;
                            break;
                        }
                    case 114:
                        {
                            global::SC2APIProtocol.RequestQuery subBuilder = new global::SC2APIProtocol.RequestQuery();
                            if (HasQuery)
                            {
                                subBuilder.MergeFrom(Query);
                            }
                            input.ReadMessage(subBuilder);
                            Query = subBuilder;
                            break;
                        }
                    case 122:
                        {
                            global::SC2APIProtocol.RequestSaveReplay subBuilder = new global::SC2APIProtocol.RequestSaveReplay();
                            if (HasSaveReplay)
                            {
                                subBuilder.MergeFrom(SaveReplay);
                            }
                            input.ReadMessage(subBuilder);
                            SaveReplay = subBuilder;
                            break;
                        }
                    case 130:
                        {
                            global::SC2APIProtocol.RequestReplayInfo subBuilder = new global::SC2APIProtocol.RequestReplayInfo();
                            if (HasReplayInfo)
                            {
                                subBuilder.MergeFrom(ReplayInfo);
                            }
                            input.ReadMessage(subBuilder);
                            ReplayInfo = subBuilder;
                            break;
                        }
                    case 138:
                        {
                            global::SC2APIProtocol.RequestAvailableMaps subBuilder = new global::SC2APIProtocol.RequestAvailableMaps();
                            if (HasAvailableMaps)
                            {
                                subBuilder.MergeFrom(AvailableMaps);
                            }
                            input.ReadMessage(subBuilder);
                            AvailableMaps = subBuilder;
                            break;
                        }
                    case 146:
                        {
                            global::SC2APIProtocol.RequestSaveMap subBuilder = new global::SC2APIProtocol.RequestSaveMap();
                            if (HasSaveMap)
                            {
                                subBuilder.MergeFrom(SaveMap);
                            }
                            input.ReadMessage(subBuilder);
                            SaveMap = subBuilder;
                            break;
                        }
                    case 154:
                        {
                            global::SC2APIProtocol.RequestPing subBuilder = new global::SC2APIProtocol.RequestPing();
                            if (HasPing)
                            {
                                subBuilder.MergeFrom(Ping);
                            }
                            input.ReadMessage(subBuilder);
                            Ping = subBuilder;
                            break;
                        }
                    case 162:
                        {
                            global::SC2APIProtocol.RequestDebug subBuilder = new global::SC2APIProtocol.RequestDebug();
                            if (HasDebug)
                            {
                                subBuilder.MergeFrom(Debug);
                            }
                            input.ReadMessage(subBuilder);
                            Debug = subBuilder;
                            break;
                        }
                    case 170:
                        {
                            global::SC2APIProtocol.RequestObserverAction subBuilder = new global::SC2APIProtocol.RequestObserverAction();
                            if (HasObsAction)
                            {
                                subBuilder.MergeFrom(ObsAction);
                            }
                            input.ReadMessage(subBuilder);
                            ObsAction = subBuilder;
                            break;
                        }
                    case 178:
                        {
                            global::SC2APIProtocol.RequestMapCommand subBuilder = new global::SC2APIProtocol.RequestMapCommand();
                            if (HasMapCommand)
                            {
                                subBuilder.MergeFrom(MapCommand);
                            }
                            input.ReadMessage(subBuilder);
                            MapCommand = subBuilder;
                            break;
                        }
                    case 776:
                        {
                            Id = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public partial class Response : pb::IMessage<Response>
    {
        private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Response> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response(Response other) : this()
        {
            _hasBits0 = other._hasBits0;
            id_ = other.id_;
            error_ = other.error_.Clone();
            status_ = other.status_;
            switch (other.ResponseCase)
            {
                case ResponseOneofCase.CreateGame:
                    CreateGame = other.CreateGame.Clone();
                    break;
                case ResponseOneofCase.JoinGame:
                    JoinGame = other.JoinGame.Clone();
                    break;
                case ResponseOneofCase.RestartGame:
                    RestartGame = other.RestartGame.Clone();
                    break;
                case ResponseOneofCase.StartReplay:
                    StartReplay = other.StartReplay.Clone();
                    break;
                case ResponseOneofCase.LeaveGame:
                    LeaveGame = other.LeaveGame.Clone();
                    break;
                case ResponseOneofCase.QuickSave:
                    QuickSave = other.QuickSave.Clone();
                    break;
                case ResponseOneofCase.QuickLoad:
                    QuickLoad = other.QuickLoad.Clone();
                    break;
                case ResponseOneofCase.Quit:
                    Quit = other.Quit.Clone();
                    break;
                case ResponseOneofCase.GameInfo:
                    GameInfo = other.GameInfo.Clone();
                    break;
                case ResponseOneofCase.Observation:
                    Observation = other.Observation.Clone();
                    break;
                case ResponseOneofCase.Action:
                    Action = other.Action.Clone();
                    break;
                case ResponseOneofCase.ObsAction:
                    ObsAction = other.ObsAction.Clone();
                    break;
                case ResponseOneofCase.Step:
                    Step = other.Step.Clone();
                    break;
                case ResponseOneofCase.Data:
                    Data = other.Data.Clone();
                    break;
                case ResponseOneofCase.Query:
                    Query = other.Query.Clone();
                    break;
                case ResponseOneofCase.SaveReplay:
                    SaveReplay = other.SaveReplay.Clone();
                    break;
                case ResponseOneofCase.ReplayInfo:
                    ReplayInfo = other.ReplayInfo.Clone();
                    break;
                case ResponseOneofCase.AvailableMaps:
                    AvailableMaps = other.AvailableMaps.Clone();
                    break;
                case ResponseOneofCase.SaveMap:
                    SaveMap = other.SaveMap.Clone();
                    break;
                case ResponseOneofCase.MapCommand:
                    MapCommand = other.MapCommand.Clone();
                    break;
                case ResponseOneofCase.Ping:
                    Ping = other.Ping.Clone();
                    break;
                case ResponseOneofCase.Debug:
                    Debug = other.Debug.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response Clone()
        {
            return new Response(this);
        }

        /// <summary>Field number for the "create_game" field.</summary>
        public const int CreateGameFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ResponseCreateGame CreateGame
        {
            get { return HasCreateGame ? (global::SC2APIProtocol.ResponseCreateGame)response_ : null; }
            set
            {
                response_ = value;
                responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.CreateGame;
            }
        }
        /// <summary>Gets whether the "create_game" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCreateGame
        {
            get { return responseCase_ == ResponseOneofCase.CreateGame; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "create_game" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCreateGame()
        {
            if (HasCreateGame)
            {
                ClearResponse();
            }
        }

        /// <summary>Field number for the "join_game" field.</summary>
        public const int JoinGameFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ResponseJoinGame JoinGame
        {
            get { return HasJoinGame ? (global::SC2APIProtocol.ResponseJoinGame)response_ : null; }
            set
            {
                response_ = value;
                responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.JoinGame;
            }
        }
        /// <summary>Gets whether the "join_game" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasJoinGame
        {
            get { return responseCase_ == ResponseOneofCase.JoinGame; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "join_game" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearJoinGame()
        {
            if (HasJoinGame)
            {
                ClearResponse();
            }
        }

        /// <summary>Field number for the "restart_game" field.</summary>
        public const int RestartGameFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ResponseRestartGame RestartGame
        {
            get { return HasRestartGame ? (global::SC2APIProtocol.ResponseRestartGame)response_ : null; }
            set
            {
                response_ = value;
                responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.RestartGame;
            }
        }
        /// <summary>Gets whether the "restart_game" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRestartGame
        {
            get { return responseCase_ == ResponseOneofCase.RestartGame; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "restart_game" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRestartGame()
        {
            if (HasRestartGame)
            {
                ClearResponse();
            }
        }

        /// <summary>Field number for the "start_replay" field.</summary>
        public const int StartReplayFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ResponseStartReplay StartReplay
        {
            get { return HasStartReplay ? (global::SC2APIProtocol.ResponseStartReplay)response_ : null; }
            set
            {
                response_ = value;
                responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.StartReplay;
            }
        }
        /// <summary>Gets whether the "start_replay" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasStartReplay
        {
            get { return responseCase_ == ResponseOneofCase.StartReplay; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "start_replay" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearStartReplay()
        {
            if (HasStartReplay)
            {
                ClearResponse();
            }
        }

        /// <summary>Field number for the "leave_game" field.</summary>
        public const int LeaveGameFieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ResponseLeaveGame LeaveGame
        {
            get { return HasLeaveGame ? (global::SC2APIProtocol.ResponseLeaveGame)response_ : null; }
            set
            {
                response_ = value;
                responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.LeaveGame;
            }
        }
        /// <summary>Gets whether the "leave_game" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLeaveGame
        {
            get { return responseCase_ == ResponseOneofCase.LeaveGame; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "leave_game" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLeaveGame()
        {
            if (HasLeaveGame)
            {
                ClearResponse();
            }
        }

        /// <summary>Field number for the "quick_save" field.</summary>
        public const int QuickSaveFieldNumber = 6;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ResponseQuickSave QuickSave
        {
            get { return HasQuickSave ? (global::SC2APIProtocol.ResponseQuickSave)response_ : null; }
            set
            {
                response_ = value;
                responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.QuickSave;
            }
        }
        /// <summary>Gets whether the "quick_save" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasQuickSave
        {
            get { return responseCase_ == ResponseOneofCase.QuickSave; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "quick_save" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearQuickSave()
        {
            if (HasQuickSave)
            {
                ClearResponse();
            }
        }

        /// <summary>Field number for the "quick_load" field.</summary>
        public const int QuickLoadFieldNumber = 7;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ResponseQuickLoad QuickLoad
        {
            get { return HasQuickLoad ? (global::SC2APIProtocol.ResponseQuickLoad)response_ : null; }
            set
            {
                response_ = value;
                responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.QuickLoad;
            }
        }
        /// <summary>Gets whether the "quick_load" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasQuickLoad
        {
            get { return responseCase_ == ResponseOneofCase.QuickLoad; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "quick_load" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearQuickLoad()
        {
            if (HasQuickLoad)
            {
                ClearResponse();
            }
        }

        /// <summary>Field number for the "quit" field.</summary>
        public const int QuitFieldNumber = 8;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ResponseQuit Quit
        {
            get { return HasQuit ? (global::SC2APIProtocol.ResponseQuit)response_ : null; }
            set
            {
                response_ = value;
                responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.Quit;
            }
        }
        /// <summary>Gets whether the "quit" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasQuit
        {
            get { return responseCase_ == ResponseOneofCase.Quit; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "quit" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearQuit()
        {
            if (HasQuit)
            {
                ClearResponse();
            }
        }

        /// <summary>Field number for the "game_info" field.</summary>
        public const int GameInfoFieldNumber = 9;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ResponseGameInfo GameInfo
        {
            get { return HasGameInfo ? (global::SC2APIProtocol.ResponseGameInfo)response_ : null; }
            set
            {
                response_ = value;
                responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.GameInfo;
            }
        }
        /// <summary>Gets whether the "game_info" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGameInfo
        {
            get { return responseCase_ == ResponseOneofCase.GameInfo; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "game_info" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGameInfo()
        {
            if (HasGameInfo)
            {
                ClearResponse();
            }
        }

        /// <summary>Field number for the "observation" field.</summary>
        public const int ObservationFieldNumber = 10;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ResponseObservation Observation
        {
            get { return HasObservation ? (global::SC2APIProtocol.ResponseObservation)response_ : null; }
            set
            {
                response_ = value;
                responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.Observation;
            }
        }
        /// <summary>Gets whether the "observation" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasObservation
        {
            get { return responseCase_ == ResponseOneofCase.Observation; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "observation" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearObservation()
        {
            if (HasObservation)
            {
                ClearResponse();
            }
        }

        /// <summary>Field number for the "action" field.</summary>
        public const int ActionFieldNumber = 11;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ResponseAction Action
        {
            get { return HasAction ? (global::SC2APIProtocol.ResponseAction)response_ : null; }
            set
            {
                response_ = value;
                responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.Action;
            }
        }
        /// <summary>Gets whether the "action" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAction
        {
            get { return responseCase_ == ResponseOneofCase.Action; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "action" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAction()
        {
            if (HasAction)
            {
                ClearResponse();
            }
        }

        /// <summary>Field number for the "obs_action" field.</summary>
        public const int ObsActionFieldNumber = 21;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ResponseObserverAction ObsAction
        {
            get { return HasObsAction ? (global::SC2APIProtocol.ResponseObserverAction)response_ : null; }
            set
            {
                response_ = value;
                responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.ObsAction;
            }
        }
        /// <summary>Gets whether the "obs_action" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasObsAction
        {
            get { return responseCase_ == ResponseOneofCase.ObsAction; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "obs_action" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearObsAction()
        {
            if (HasObsAction)
            {
                ClearResponse();
            }
        }

        /// <summary>Field number for the "step" field.</summary>
        public const int StepFieldNumber = 12;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ResponseStep Step
        {
            get { return HasStep ? (global::SC2APIProtocol.ResponseStep)response_ : null; }
            set
            {
                response_ = value;
                responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.Step;
            }
        }
        /// <summary>Gets whether the "step" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasStep
        {
            get { return responseCase_ == ResponseOneofCase.Step; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "step" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearStep()
        {
            if (HasStep)
            {
                ClearResponse();
            }
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 13;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ResponseData Data
        {
            get { return HasData ? (global::SC2APIProtocol.ResponseData)response_ : null; }
            set
            {
                response_ = value;
                responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.Data;
            }
        }
        /// <summary>Gets whether the "data" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasData
        {
            get { return responseCase_ == ResponseOneofCase.Data; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "data" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData()
        {
            if (HasData)
            {
                ClearResponse();
            }
        }

        /// <summary>Field number for the "query" field.</summary>
        public const int QueryFieldNumber = 14;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ResponseQuery Query
        {
            get { return HasQuery ? (global::SC2APIProtocol.ResponseQuery)response_ : null; }
            set
            {
                response_ = value;
                responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.Query;
            }
        }
        /// <summary>Gets whether the "query" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasQuery
        {
            get { return responseCase_ == ResponseOneofCase.Query; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "query" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearQuery()
        {
            if (HasQuery)
            {
                ClearResponse();
            }
        }

        /// <summary>Field number for the "save_replay" field.</summary>
        public const int SaveReplayFieldNumber = 15;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ResponseSaveReplay SaveReplay
        {
            get { return HasSaveReplay ? (global::SC2APIProtocol.ResponseSaveReplay)response_ : null; }
            set
            {
                response_ = value;
                responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.SaveReplay;
            }
        }
        /// <summary>Gets whether the "save_replay" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSaveReplay
        {
            get { return responseCase_ == ResponseOneofCase.SaveReplay; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "save_replay" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSaveReplay()
        {
            if (HasSaveReplay)
            {
                ClearResponse();
            }
        }

        /// <summary>Field number for the "replay_info" field.</summary>
        public const int ReplayInfoFieldNumber = 16;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ResponseReplayInfo ReplayInfo
        {
            get { return HasReplayInfo ? (global::SC2APIProtocol.ResponseReplayInfo)response_ : null; }
            set
            {
                response_ = value;
                responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.ReplayInfo;
            }
        }
        /// <summary>Gets whether the "replay_info" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasReplayInfo
        {
            get { return responseCase_ == ResponseOneofCase.ReplayInfo; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "replay_info" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearReplayInfo()
        {
            if (HasReplayInfo)
            {
                ClearResponse();
            }
        }

        /// <summary>Field number for the "available_maps" field.</summary>
        public const int AvailableMapsFieldNumber = 17;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ResponseAvailableMaps AvailableMaps
        {
            get { return HasAvailableMaps ? (global::SC2APIProtocol.ResponseAvailableMaps)response_ : null; }
            set
            {
                response_ = value;
                responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.AvailableMaps;
            }
        }
        /// <summary>Gets whether the "available_maps" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAvailableMaps
        {
            get { return responseCase_ == ResponseOneofCase.AvailableMaps; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "available_maps" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAvailableMaps()
        {
            if (HasAvailableMaps)
            {
                ClearResponse();
            }
        }

        /// <summary>Field number for the "save_map" field.</summary>
        public const int SaveMapFieldNumber = 18;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ResponseSaveMap SaveMap
        {
            get { return HasSaveMap ? (global::SC2APIProtocol.ResponseSaveMap)response_ : null; }
            set
            {
                response_ = value;
                responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.SaveMap;
            }
        }
        /// <summary>Gets whether the "save_map" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSaveMap
        {
            get { return responseCase_ == ResponseOneofCase.SaveMap; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "save_map" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSaveMap()
        {
            if (HasSaveMap)
            {
                ClearResponse();
            }
        }

        /// <summary>Field number for the "map_command" field.</summary>
        public const int MapCommandFieldNumber = 22;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ResponseMapCommand MapCommand
        {
            get { return HasMapCommand ? (global::SC2APIProtocol.ResponseMapCommand)response_ : null; }
            set
            {
                response_ = value;
                responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.MapCommand;
            }
        }
        /// <summary>Gets whether the "map_command" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMapCommand
        {
            get { return responseCase_ == ResponseOneofCase.MapCommand; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "map_command" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMapCommand()
        {
            if (HasMapCommand)
            {
                ClearResponse();
            }
        }

        /// <summary>Field number for the "ping" field.</summary>
        public const int PingFieldNumber = 19;
        /// <summary>
        /// Debugging
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ResponsePing Ping
        {
            get { return HasPing ? (global::SC2APIProtocol.ResponsePing)response_ : null; }
            set
            {
                response_ = value;
                responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.Ping;
            }
        }
        /// <summary>Gets whether the "ping" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPing
        {
            get { return responseCase_ == ResponseOneofCase.Ping; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "ping" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPing()
        {
            if (HasPing)
            {
                ClearResponse();
            }
        }

        /// <summary>Field number for the "debug" field.</summary>
        public const int DebugFieldNumber = 20;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ResponseDebug Debug
        {
            get { return HasDebug ? (global::SC2APIProtocol.ResponseDebug)response_ : null; }
            set
            {
                response_ = value;
                responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.Debug;
            }
        }
        /// <summary>Gets whether the "debug" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDebug
        {
            get { return responseCase_ == ResponseOneofCase.Debug; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "debug" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDebug()
        {
            if (HasDebug)
            {
                ClearResponse();
            }
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 97;
        private readonly static uint IdDefaultValue = 0;

        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id
        {
            get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                id_ = value;
            }
        }
        /// <summary>Gets whether the "id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasId
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearId()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "error" field.</summary>
        public const int ErrorFieldNumber = 98;
        private static readonly pb::FieldCodec<string> _repeated_error_codec
            = pb::FieldCodec.ForString(786);
        private readonly pbc::RepeatedField<string> error_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// If command is missing, this will contain the error. Otherwise this will contain any warnings.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Error
        {
            get { return error_; }
        }

        /// <summary>Field number for the "status" field.</summary>
        public const int StatusFieldNumber = 99;
        private readonly static global::SC2APIProtocol.Status StatusDefaultValue = global::SC2APIProtocol.Status.Launched;

        private global::SC2APIProtocol.Status status_;
        /// <summary>
        /// Should be sent back with all responses.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.Status Status
        {
            get { if ((_hasBits0 & 2) != 0) { return status_; } else { return StatusDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                status_ = value;
            }
        }
        /// <summary>Gets whether the "status" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasStatus
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "status" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearStatus()
        {
            _hasBits0 &= ~2;
        }

        private object response_;
        /// <summary>Enum of possible cases for the "response" oneof.</summary>
        public enum ResponseOneofCase
        {
            None = 0,
            CreateGame = 1,
            JoinGame = 2,
            RestartGame = 3,
            StartReplay = 4,
            LeaveGame = 5,
            QuickSave = 6,
            QuickLoad = 7,
            Quit = 8,
            GameInfo = 9,
            Observation = 10,
            Action = 11,
            ObsAction = 21,
            Step = 12,
            Data = 13,
            Query = 14,
            SaveReplay = 15,
            ReplayInfo = 16,
            AvailableMaps = 17,
            SaveMap = 18,
            MapCommand = 22,
            Ping = 19,
            Debug = 20,
        }
        private ResponseOneofCase responseCase_ = ResponseOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseOneofCase ResponseCase
        {
            get { return responseCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearResponse()
        {
            responseCase_ = ResponseOneofCase.None;
            response_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Response);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Response other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(CreateGame, other.CreateGame)) return false;
            if (!object.Equals(JoinGame, other.JoinGame)) return false;
            if (!object.Equals(RestartGame, other.RestartGame)) return false;
            if (!object.Equals(StartReplay, other.StartReplay)) return false;
            if (!object.Equals(LeaveGame, other.LeaveGame)) return false;
            if (!object.Equals(QuickSave, other.QuickSave)) return false;
            if (!object.Equals(QuickLoad, other.QuickLoad)) return false;
            if (!object.Equals(Quit, other.Quit)) return false;
            if (!object.Equals(GameInfo, other.GameInfo)) return false;
            if (!object.Equals(Observation, other.Observation)) return false;
            if (!object.Equals(Action, other.Action)) return false;
            if (!object.Equals(ObsAction, other.ObsAction)) return false;
            if (!object.Equals(Step, other.Step)) return false;
            if (!object.Equals(Data, other.Data)) return false;
            if (!object.Equals(Query, other.Query)) return false;
            if (!object.Equals(SaveReplay, other.SaveReplay)) return false;
            if (!object.Equals(ReplayInfo, other.ReplayInfo)) return false;
            if (!object.Equals(AvailableMaps, other.AvailableMaps)) return false;
            if (!object.Equals(SaveMap, other.SaveMap)) return false;
            if (!object.Equals(MapCommand, other.MapCommand)) return false;
            if (!object.Equals(Ping, other.Ping)) return false;
            if (!object.Equals(Debug, other.Debug)) return false;
            if (Id != other.Id) return false;
            if (!error_.Equals(other.error_)) return false;
            if (Status != other.Status) return false;
            if (ResponseCase != other.ResponseCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasCreateGame) hash ^= CreateGame.GetHashCode();
            if (HasJoinGame) hash ^= JoinGame.GetHashCode();
            if (HasRestartGame) hash ^= RestartGame.GetHashCode();
            if (HasStartReplay) hash ^= StartReplay.GetHashCode();
            if (HasLeaveGame) hash ^= LeaveGame.GetHashCode();
            if (HasQuickSave) hash ^= QuickSave.GetHashCode();
            if (HasQuickLoad) hash ^= QuickLoad.GetHashCode();
            if (HasQuit) hash ^= Quit.GetHashCode();
            if (HasGameInfo) hash ^= GameInfo.GetHashCode();
            if (HasObservation) hash ^= Observation.GetHashCode();
            if (HasAction) hash ^= Action.GetHashCode();
            if (HasObsAction) hash ^= ObsAction.GetHashCode();
            if (HasStep) hash ^= Step.GetHashCode();
            if (HasData) hash ^= Data.GetHashCode();
            if (HasQuery) hash ^= Query.GetHashCode();
            if (HasSaveReplay) hash ^= SaveReplay.GetHashCode();
            if (HasReplayInfo) hash ^= ReplayInfo.GetHashCode();
            if (HasAvailableMaps) hash ^= AvailableMaps.GetHashCode();
            if (HasSaveMap) hash ^= SaveMap.GetHashCode();
            if (HasMapCommand) hash ^= MapCommand.GetHashCode();
            if (HasPing) hash ^= Ping.GetHashCode();
            if (HasDebug) hash ^= Debug.GetHashCode();
            if (HasId) hash ^= Id.GetHashCode();
            hash ^= error_.GetHashCode();
            if (HasStatus) hash ^= Status.GetHashCode();
            hash ^= (int)responseCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasCreateGame)
            {
                output.WriteRawTag(10);
                output.WriteMessage(CreateGame);
            }
            if (HasJoinGame)
            {
                output.WriteRawTag(18);
                output.WriteMessage(JoinGame);
            }
            if (HasRestartGame)
            {
                output.WriteRawTag(26);
                output.WriteMessage(RestartGame);
            }
            if (HasStartReplay)
            {
                output.WriteRawTag(34);
                output.WriteMessage(StartReplay);
            }
            if (HasLeaveGame)
            {
                output.WriteRawTag(42);
                output.WriteMessage(LeaveGame);
            }
            if (HasQuickSave)
            {
                output.WriteRawTag(50);
                output.WriteMessage(QuickSave);
            }
            if (HasQuickLoad)
            {
                output.WriteRawTag(58);
                output.WriteMessage(QuickLoad);
            }
            if (HasQuit)
            {
                output.WriteRawTag(66);
                output.WriteMessage(Quit);
            }
            if (HasGameInfo)
            {
                output.WriteRawTag(74);
                output.WriteMessage(GameInfo);
            }
            if (HasObservation)
            {
                output.WriteRawTag(82);
                output.WriteMessage(Observation);
            }
            if (HasAction)
            {
                output.WriteRawTag(90);
                output.WriteMessage(Action);
            }
            if (HasStep)
            {
                output.WriteRawTag(98);
                output.WriteMessage(Step);
            }
            if (HasData)
            {
                output.WriteRawTag(106);
                output.WriteMessage(Data);
            }
            if (HasQuery)
            {
                output.WriteRawTag(114);
                output.WriteMessage(Query);
            }
            if (HasSaveReplay)
            {
                output.WriteRawTag(122);
                output.WriteMessage(SaveReplay);
            }
            if (HasReplayInfo)
            {
                output.WriteRawTag(130, 1);
                output.WriteMessage(ReplayInfo);
            }
            if (HasAvailableMaps)
            {
                output.WriteRawTag(138, 1);
                output.WriteMessage(AvailableMaps);
            }
            if (HasSaveMap)
            {
                output.WriteRawTag(146, 1);
                output.WriteMessage(SaveMap);
            }
            if (HasPing)
            {
                output.WriteRawTag(154, 1);
                output.WriteMessage(Ping);
            }
            if (HasDebug)
            {
                output.WriteRawTag(162, 1);
                output.WriteMessage(Debug);
            }
            if (HasObsAction)
            {
                output.WriteRawTag(170, 1);
                output.WriteMessage(ObsAction);
            }
            if (HasMapCommand)
            {
                output.WriteRawTag(178, 1);
                output.WriteMessage(MapCommand);
            }
            if (HasId)
            {
                output.WriteRawTag(136, 6);
                output.WriteUInt32(Id);
            }
            error_.WriteTo(output, _repeated_error_codec);
            if (HasStatus)
            {
                output.WriteRawTag(152, 6);
                output.WriteEnum((int)Status);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasCreateGame)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateGame);
            }
            if (HasJoinGame)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(JoinGame);
            }
            if (HasRestartGame)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(RestartGame);
            }
            if (HasStartReplay)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartReplay);
            }
            if (HasLeaveGame)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeaveGame);
            }
            if (HasQuickSave)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(QuickSave);
            }
            if (HasQuickLoad)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(QuickLoad);
            }
            if (HasQuit)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Quit);
            }
            if (HasGameInfo)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameInfo);
            }
            if (HasObservation)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Observation);
            }
            if (HasAction)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Action);
            }
            if (HasObsAction)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(ObsAction);
            }
            if (HasStep)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Step);
            }
            if (HasData)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
            }
            if (HasQuery)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Query);
            }
            if (HasSaveReplay)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SaveReplay);
            }
            if (HasReplayInfo)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReplayInfo);
            }
            if (HasAvailableMaps)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(AvailableMaps);
            }
            if (HasSaveMap)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(SaveMap);
            }
            if (HasMapCommand)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(MapCommand);
            }
            if (HasPing)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ping);
            }
            if (HasDebug)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(Debug);
            }
            if (HasId)
            {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Id);
            }
            size += error_.CalculateSize(_repeated_error_codec);
            if (HasStatus)
            {
                size += 2 + pb::CodedOutputStream.ComputeEnumSize((int)Status);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Response other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasId)
            {
                Id = other.Id;
            }
            error_.Add(other.error_);
            if (other.HasStatus)
            {
                Status = other.Status;
            }
            switch (other.ResponseCase)
            {
                case ResponseOneofCase.CreateGame:
                    if (CreateGame == null)
                    {
                        CreateGame = new global::SC2APIProtocol.ResponseCreateGame();
                    }
                    CreateGame.MergeFrom(other.CreateGame);
                    break;
                case ResponseOneofCase.JoinGame:
                    if (JoinGame == null)
                    {
                        JoinGame = new global::SC2APIProtocol.ResponseJoinGame();
                    }
                    JoinGame.MergeFrom(other.JoinGame);
                    break;
                case ResponseOneofCase.RestartGame:
                    if (RestartGame == null)
                    {
                        RestartGame = new global::SC2APIProtocol.ResponseRestartGame();
                    }
                    RestartGame.MergeFrom(other.RestartGame);
                    break;
                case ResponseOneofCase.StartReplay:
                    if (StartReplay == null)
                    {
                        StartReplay = new global::SC2APIProtocol.ResponseStartReplay();
                    }
                    StartReplay.MergeFrom(other.StartReplay);
                    break;
                case ResponseOneofCase.LeaveGame:
                    if (LeaveGame == null)
                    {
                        LeaveGame = new global::SC2APIProtocol.ResponseLeaveGame();
                    }
                    LeaveGame.MergeFrom(other.LeaveGame);
                    break;
                case ResponseOneofCase.QuickSave:
                    if (QuickSave == null)
                    {
                        QuickSave = new global::SC2APIProtocol.ResponseQuickSave();
                    }
                    QuickSave.MergeFrom(other.QuickSave);
                    break;
                case ResponseOneofCase.QuickLoad:
                    if (QuickLoad == null)
                    {
                        QuickLoad = new global::SC2APIProtocol.ResponseQuickLoad();
                    }
                    QuickLoad.MergeFrom(other.QuickLoad);
                    break;
                case ResponseOneofCase.Quit:
                    if (Quit == null)
                    {
                        Quit = new global::SC2APIProtocol.ResponseQuit();
                    }
                    Quit.MergeFrom(other.Quit);
                    break;
                case ResponseOneofCase.GameInfo:
                    if (GameInfo == null)
                    {
                        GameInfo = new global::SC2APIProtocol.ResponseGameInfo();
                    }
                    GameInfo.MergeFrom(other.GameInfo);
                    break;
                case ResponseOneofCase.Observation:
                    if (Observation == null)
                    {
                        Observation = new global::SC2APIProtocol.ResponseObservation();
                    }
                    Observation.MergeFrom(other.Observation);
                    break;
                case ResponseOneofCase.Action:
                    if (Action == null)
                    {
                        Action = new global::SC2APIProtocol.ResponseAction();
                    }
                    Action.MergeFrom(other.Action);
                    break;
                case ResponseOneofCase.ObsAction:
                    if (ObsAction == null)
                    {
                        ObsAction = new global::SC2APIProtocol.ResponseObserverAction();
                    }
                    ObsAction.MergeFrom(other.ObsAction);
                    break;
                case ResponseOneofCase.Step:
                    if (Step == null)
                    {
                        Step = new global::SC2APIProtocol.ResponseStep();
                    }
                    Step.MergeFrom(other.Step);
                    break;
                case ResponseOneofCase.Data:
                    if (Data == null)
                    {
                        Data = new global::SC2APIProtocol.ResponseData();
                    }
                    Data.MergeFrom(other.Data);
                    break;
                case ResponseOneofCase.Query:
                    if (Query == null)
                    {
                        Query = new global::SC2APIProtocol.ResponseQuery();
                    }
                    Query.MergeFrom(other.Query);
                    break;
                case ResponseOneofCase.SaveReplay:
                    if (SaveReplay == null)
                    {
                        SaveReplay = new global::SC2APIProtocol.ResponseSaveReplay();
                    }
                    SaveReplay.MergeFrom(other.SaveReplay);
                    break;
                case ResponseOneofCase.ReplayInfo:
                    if (ReplayInfo == null)
                    {
                        ReplayInfo = new global::SC2APIProtocol.ResponseReplayInfo();
                    }
                    ReplayInfo.MergeFrom(other.ReplayInfo);
                    break;
                case ResponseOneofCase.AvailableMaps:
                    if (AvailableMaps == null)
                    {
                        AvailableMaps = new global::SC2APIProtocol.ResponseAvailableMaps();
                    }
                    AvailableMaps.MergeFrom(other.AvailableMaps);
                    break;
                case ResponseOneofCase.SaveMap:
                    if (SaveMap == null)
                    {
                        SaveMap = new global::SC2APIProtocol.ResponseSaveMap();
                    }
                    SaveMap.MergeFrom(other.SaveMap);
                    break;
                case ResponseOneofCase.MapCommand:
                    if (MapCommand == null)
                    {
                        MapCommand = new global::SC2APIProtocol.ResponseMapCommand();
                    }
                    MapCommand.MergeFrom(other.MapCommand);
                    break;
                case ResponseOneofCase.Ping:
                    if (Ping == null)
                    {
                        Ping = new global::SC2APIProtocol.ResponsePing();
                    }
                    Ping.MergeFrom(other.Ping);
                    break;
                case ResponseOneofCase.Debug:
                    if (Debug == null)
                    {
                        Debug = new global::SC2APIProtocol.ResponseDebug();
                    }
                    Debug.MergeFrom(other.Debug);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            global::SC2APIProtocol.ResponseCreateGame subBuilder = new global::SC2APIProtocol.ResponseCreateGame();
                            if (HasCreateGame)
                            {
                                subBuilder.MergeFrom(CreateGame);
                            }
                            input.ReadMessage(subBuilder);
                            CreateGame = subBuilder;
                            break;
                        }
                    case 18:
                        {
                            global::SC2APIProtocol.ResponseJoinGame subBuilder = new global::SC2APIProtocol.ResponseJoinGame();
                            if (HasJoinGame)
                            {
                                subBuilder.MergeFrom(JoinGame);
                            }
                            input.ReadMessage(subBuilder);
                            JoinGame = subBuilder;
                            break;
                        }
                    case 26:
                        {
                            global::SC2APIProtocol.ResponseRestartGame subBuilder = new global::SC2APIProtocol.ResponseRestartGame();
                            if (HasRestartGame)
                            {
                                subBuilder.MergeFrom(RestartGame);
                            }
                            input.ReadMessage(subBuilder);
                            RestartGame = subBuilder;
                            break;
                        }
                    case 34:
                        {
                            global::SC2APIProtocol.ResponseStartReplay subBuilder = new global::SC2APIProtocol.ResponseStartReplay();
                            if (HasStartReplay)
                            {
                                subBuilder.MergeFrom(StartReplay);
                            }
                            input.ReadMessage(subBuilder);
                            StartReplay = subBuilder;
                            break;
                        }
                    case 42:
                        {
                            global::SC2APIProtocol.ResponseLeaveGame subBuilder = new global::SC2APIProtocol.ResponseLeaveGame();
                            if (HasLeaveGame)
                            {
                                subBuilder.MergeFrom(LeaveGame);
                            }
                            input.ReadMessage(subBuilder);
                            LeaveGame = subBuilder;
                            break;
                        }
                    case 50:
                        {
                            global::SC2APIProtocol.ResponseQuickSave subBuilder = new global::SC2APIProtocol.ResponseQuickSave();
                            if (HasQuickSave)
                            {
                                subBuilder.MergeFrom(QuickSave);
                            }
                            input.ReadMessage(subBuilder);
                            QuickSave = subBuilder;
                            break;
                        }
                    case 58:
                        {
                            global::SC2APIProtocol.ResponseQuickLoad subBuilder = new global::SC2APIProtocol.ResponseQuickLoad();
                            if (HasQuickLoad)
                            {
                                subBuilder.MergeFrom(QuickLoad);
                            }
                            input.ReadMessage(subBuilder);
                            QuickLoad = subBuilder;
                            break;
                        }
                    case 66:
                        {
                            global::SC2APIProtocol.ResponseQuit subBuilder = new global::SC2APIProtocol.ResponseQuit();
                            if (HasQuit)
                            {
                                subBuilder.MergeFrom(Quit);
                            }
                            input.ReadMessage(subBuilder);
                            Quit = subBuilder;
                            break;
                        }
                    case 74:
                        {
                            global::SC2APIProtocol.ResponseGameInfo subBuilder = new global::SC2APIProtocol.ResponseGameInfo();
                            if (HasGameInfo)
                            {
                                subBuilder.MergeFrom(GameInfo);
                            }
                            input.ReadMessage(subBuilder);
                            GameInfo = subBuilder;
                            break;
                        }
                    case 82:
                        {
                            global::SC2APIProtocol.ResponseObservation subBuilder = new global::SC2APIProtocol.ResponseObservation();
                            if (HasObservation)
                            {
                                subBuilder.MergeFrom(Observation);
                            }
                            input.ReadMessage(subBuilder);
                            Observation = subBuilder;
                            break;
                        }
                    case 90:
                        {
                            global::SC2APIProtocol.ResponseAction subBuilder = new global::SC2APIProtocol.ResponseAction();
                            if (HasAction)
                            {
                                subBuilder.MergeFrom(Action);
                            }
                            input.ReadMessage(subBuilder);
                            Action = subBuilder;
                            break;
                        }
                    case 98:
                        {
                            global::SC2APIProtocol.ResponseStep subBuilder = new global::SC2APIProtocol.ResponseStep();
                            if (HasStep)
                            {
                                subBuilder.MergeFrom(Step);
                            }
                            input.ReadMessage(subBuilder);
                            Step = subBuilder;
                            break;
                        }
                    case 106:
                        {
                            global::SC2APIProtocol.ResponseData subBuilder = new global::SC2APIProtocol.ResponseData();
                            if (HasData)
                            {
                                subBuilder.MergeFrom(Data);
                            }
                            input.ReadMessage(subBuilder);
                            Data = subBuilder;
                            break;
                        }
                    case 114:
                        {
                            global::SC2APIProtocol.ResponseQuery subBuilder = new global::SC2APIProtocol.ResponseQuery();
                            if (HasQuery)
                            {
                                subBuilder.MergeFrom(Query);
                            }
                            input.ReadMessage(subBuilder);
                            Query = subBuilder;
                            break;
                        }
                    case 122:
                        {
                            global::SC2APIProtocol.ResponseSaveReplay subBuilder = new global::SC2APIProtocol.ResponseSaveReplay();
                            if (HasSaveReplay)
                            {
                                subBuilder.MergeFrom(SaveReplay);
                            }
                            input.ReadMessage(subBuilder);
                            SaveReplay = subBuilder;
                            break;
                        }
                    case 130:
                        {
                            global::SC2APIProtocol.ResponseReplayInfo subBuilder = new global::SC2APIProtocol.ResponseReplayInfo();
                            if (HasReplayInfo)
                            {
                                subBuilder.MergeFrom(ReplayInfo);
                            }
                            input.ReadMessage(subBuilder);
                            ReplayInfo = subBuilder;
                            break;
                        }
                    case 138:
                        {
                            global::SC2APIProtocol.ResponseAvailableMaps subBuilder = new global::SC2APIProtocol.ResponseAvailableMaps();
                            if (HasAvailableMaps)
                            {
                                subBuilder.MergeFrom(AvailableMaps);
                            }
                            input.ReadMessage(subBuilder);
                            AvailableMaps = subBuilder;
                            break;
                        }
                    case 146:
                        {
                            global::SC2APIProtocol.ResponseSaveMap subBuilder = new global::SC2APIProtocol.ResponseSaveMap();
                            if (HasSaveMap)
                            {
                                subBuilder.MergeFrom(SaveMap);
                            }
                            input.ReadMessage(subBuilder);
                            SaveMap = subBuilder;
                            break;
                        }
                    case 154:
                        {
                            global::SC2APIProtocol.ResponsePing subBuilder = new global::SC2APIProtocol.ResponsePing();
                            if (HasPing)
                            {
                                subBuilder.MergeFrom(Ping);
                            }
                            input.ReadMessage(subBuilder);
                            Ping = subBuilder;
                            break;
                        }
                    case 162:
                        {
                            global::SC2APIProtocol.ResponseDebug subBuilder = new global::SC2APIProtocol.ResponseDebug();
                            if (HasDebug)
                            {
                                subBuilder.MergeFrom(Debug);
                            }
                            input.ReadMessage(subBuilder);
                            Debug = subBuilder;
                            break;
                        }
                    case 170:
                        {
                            global::SC2APIProtocol.ResponseObserverAction subBuilder = new global::SC2APIProtocol.ResponseObserverAction();
                            if (HasObsAction)
                            {
                                subBuilder.MergeFrom(ObsAction);
                            }
                            input.ReadMessage(subBuilder);
                            ObsAction = subBuilder;
                            break;
                        }
                    case 178:
                        {
                            global::SC2APIProtocol.ResponseMapCommand subBuilder = new global::SC2APIProtocol.ResponseMapCommand();
                            if (HasMapCommand)
                            {
                                subBuilder.MergeFrom(MapCommand);
                            }
                            input.ReadMessage(subBuilder);
                            MapCommand = subBuilder;
                            break;
                        }
                    case 776:
                        {
                            Id = input.ReadUInt32();
                            break;
                        }
                    case 786:
                        {
                            error_.AddEntriesFrom(input, _repeated_error_codec);
                            break;
                        }
                    case 792:
                        {
                            Status = (global::SC2APIProtocol.Status)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    ///-----------------------------------------------------------------------------
    /// If successful, puts the game into the status: init_game.
    /// The next expected request should be RequestJoinGame. Can also quit (exit).
    /// </summary>
    public sealed partial class RequestCreateGame : pb::IMessage<RequestCreateGame>
    {
        private static readonly pb::MessageParser<RequestCreateGame> _parser = new pb::MessageParser<RequestCreateGame>(() => new RequestCreateGame());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestCreateGame> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestCreateGame()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestCreateGame(RequestCreateGame other) : this()
        {
            _hasBits0 = other._hasBits0;
            playerSetup_ = other.playerSetup_.Clone();
            disableFog_ = other.disableFog_;
            randomSeed_ = other.randomSeed_;
            realtime_ = other.realtime_;
            switch (other.MapCase)
            {
                case MapOneofCase.LocalMap:
                    LocalMap = other.LocalMap.Clone();
                    break;
                case MapOneofCase.BattlenetMapName:
                    BattlenetMapName = other.BattlenetMapName;
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestCreateGame Clone()
        {
            return new RequestCreateGame(this);
        }

        /// <summary>Field number for the "local_map" field.</summary>
        public const int LocalMapFieldNumber = 1;
        /// <summary>
        /// Local .SC2Map file
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.LocalMap LocalMap
        {
            get { return HasLocalMap ? (global::SC2APIProtocol.LocalMap)map_ : null; }
            set
            {
                map_ = value;
                mapCase_ = value == null ? MapOneofCase.None : MapOneofCase.LocalMap;
            }
        }
        /// <summary>Gets whether the "local_map" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLocalMap
        {
            get { return mapCase_ == MapOneofCase.LocalMap; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "local_map" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLocalMap()
        {
            if (HasLocalMap)
            {
                ClearMap();
            }
        }

        /// <summary>Field number for the "battlenet_map_name" field.</summary>
        public const int BattlenetMapNameFieldNumber = 2;
        /// <summary>
        /// Map published to BattleNet
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string BattlenetMapName
        {
            get { return HasBattlenetMapName ? (string)map_ : ""; }
            set
            {
                map_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                mapCase_ = MapOneofCase.BattlenetMapName;
            }
        }
        /// <summary>Gets whether the "battlenet_map_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBattlenetMapName
        {
            get { return mapCase_ == MapOneofCase.BattlenetMapName; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "battlenet_map_name" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBattlenetMapName()
        {
            if (HasBattlenetMapName)
            {
                ClearMap();
            }
        }

        /// <summary>Field number for the "player_setup" field.</summary>
        public const int PlayerSetupFieldNumber = 3;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.PlayerSetup> _repeated_playerSetup_codec
            = pb::FieldCodec.ForMessage(26, global::SC2APIProtocol.PlayerSetup.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.PlayerSetup> playerSetup_ = new pbc::RepeatedField<global::SC2APIProtocol.PlayerSetup>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.PlayerSetup> PlayerSetup
        {
            get { return playerSetup_; }
        }

        /// <summary>Field number for the "disable_fog" field.</summary>
        public const int DisableFogFieldNumber = 4;
        private readonly static bool DisableFogDefaultValue = false;

        private bool disableFog_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DisableFog
        {
            get { if ((_hasBits0 & 1) != 0) { return disableFog_; } else { return DisableFogDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                disableFog_ = value;
            }
        }
        /// <summary>Gets whether the "disable_fog" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDisableFog
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "disable_fog" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDisableFog()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "random_seed" field.</summary>
        public const int RandomSeedFieldNumber = 5;
        private readonly static uint RandomSeedDefaultValue = 0;

        private uint randomSeed_;
        /// <summary>
        /// Sets the pseudo-random seed for the game.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RandomSeed
        {
            get { if ((_hasBits0 & 2) != 0) { return randomSeed_; } else { return RandomSeedDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                randomSeed_ = value;
            }
        }
        /// <summary>Gets whether the "random_seed" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRandomSeed
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "random_seed" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRandomSeed()
        {
            _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "realtime" field.</summary>
        public const int RealtimeFieldNumber = 6;
        private readonly static bool RealtimeDefaultValue = false;

        private bool realtime_;
        /// <summary>
        /// If set, the game plays in real time.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Realtime
        {
            get { if ((_hasBits0 & 4) != 0) { return realtime_; } else { return RealtimeDefaultValue; } }
            set
            {
                _hasBits0 |= 4;
                realtime_ = value;
            }
        }
        /// <summary>Gets whether the "realtime" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRealtime
        {
            get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "realtime" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRealtime()
        {
            _hasBits0 &= ~4;
        }

        private object map_;
        /// <summary>Enum of possible cases for the "Map" oneof.</summary>
        public enum MapOneofCase
        {
            None = 0,
            LocalMap = 1,
            BattlenetMapName = 2,
        }
        private MapOneofCase mapCase_ = MapOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MapOneofCase MapCase
        {
            get { return mapCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMap()
        {
            mapCase_ = MapOneofCase.None;
            map_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestCreateGame);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestCreateGame other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(LocalMap, other.LocalMap)) return false;
            if (BattlenetMapName != other.BattlenetMapName) return false;
            if (!playerSetup_.Equals(other.playerSetup_)) return false;
            if (DisableFog != other.DisableFog) return false;
            if (RandomSeed != other.RandomSeed) return false;
            if (Realtime != other.Realtime) return false;
            if (MapCase != other.MapCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasLocalMap) hash ^= LocalMap.GetHashCode();
            if (HasBattlenetMapName) hash ^= BattlenetMapName.GetHashCode();
            hash ^= playerSetup_.GetHashCode();
            if (HasDisableFog) hash ^= DisableFog.GetHashCode();
            if (HasRandomSeed) hash ^= RandomSeed.GetHashCode();
            if (HasRealtime) hash ^= Realtime.GetHashCode();
            hash ^= (int)mapCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasLocalMap)
            {
                output.WriteRawTag(10);
                output.WriteMessage(LocalMap);
            }
            if (HasBattlenetMapName)
            {
                output.WriteRawTag(18);
                output.WriteString(BattlenetMapName);
            }
            playerSetup_.WriteTo(output, _repeated_playerSetup_codec);
            if (HasDisableFog)
            {
                output.WriteRawTag(32);
                output.WriteBool(DisableFog);
            }
            if (HasRandomSeed)
            {
                output.WriteRawTag(40);
                output.WriteUInt32(RandomSeed);
            }
            if (HasRealtime)
            {
                output.WriteRawTag(48);
                output.WriteBool(Realtime);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasLocalMap)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalMap);
            }
            if (HasBattlenetMapName)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(BattlenetMapName);
            }
            size += playerSetup_.CalculateSize(_repeated_playerSetup_codec);
            if (HasDisableFog)
            {
                size += 1 + 1;
            }
            if (HasRandomSeed)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RandomSeed);
            }
            if (HasRealtime)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestCreateGame other)
        {
            if (other == null)
            {
                return;
            }
            playerSetup_.Add(other.playerSetup_);
            if (other.HasDisableFog)
            {
                DisableFog = other.DisableFog;
            }
            if (other.HasRandomSeed)
            {
                RandomSeed = other.RandomSeed;
            }
            if (other.HasRealtime)
            {
                Realtime = other.Realtime;
            }
            switch (other.MapCase)
            {
                case MapOneofCase.LocalMap:
                    if (LocalMap == null)
                    {
                        LocalMap = new global::SC2APIProtocol.LocalMap();
                    }
                    LocalMap.MergeFrom(other.LocalMap);
                    break;
                case MapOneofCase.BattlenetMapName:
                    BattlenetMapName = other.BattlenetMapName;
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            global::SC2APIProtocol.LocalMap subBuilder = new global::SC2APIProtocol.LocalMap();
                            if (HasLocalMap)
                            {
                                subBuilder.MergeFrom(LocalMap);
                            }
                            input.ReadMessage(subBuilder);
                            LocalMap = subBuilder;
                            break;
                        }
                    case 18:
                        {
                            BattlenetMapName = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            playerSetup_.AddEntriesFrom(input, _repeated_playerSetup_codec);
                            break;
                        }
                    case 32:
                        {
                            DisableFog = input.ReadBool();
                            break;
                        }
                    case 40:
                        {
                            RandomSeed = input.ReadUInt32();
                            break;
                        }
                    case 48:
                        {
                            Realtime = input.ReadBool();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class LocalMap : pb::IMessage<LocalMap>
    {
        private static readonly pb::MessageParser<LocalMap> _parser = new pb::MessageParser<LocalMap>(() => new LocalMap());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LocalMap> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LocalMap()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LocalMap(LocalMap other) : this()
        {
            mapPath_ = other.mapPath_;
            mapData_ = other.mapData_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LocalMap Clone()
        {
            return new LocalMap(this);
        }

        /// <summary>Field number for the "map_path" field.</summary>
        public const int MapPathFieldNumber = 1;
        private readonly static string MapPathDefaultValue = "";

        private string mapPath_;
        /// <summary>
        /// A map can be specified either by a file path or the data of the .SC2Map file.
        /// If you provide both, it will play the game using map_data and store map_path
        /// into the replay. (260 character max)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MapPath
        {
            get { return mapPath_ ?? MapPathDefaultValue; }
            set
            {
                mapPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "map_path" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMapPath
        {
            get { return mapPath_ != null; }
        }
        /// <summary>Clears the value of the "map_path" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMapPath()
        {
            mapPath_ = null;
        }

        /// <summary>Field number for the "map_data" field.</summary>
        public const int MapDataFieldNumber = 7;
        private readonly static pb::ByteString MapDataDefaultValue = pb::ByteString.Empty;

        private pb::ByteString mapData_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString MapData
        {
            get { return mapData_ ?? MapDataDefaultValue; }
            set
            {
                mapData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "map_data" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMapData
        {
            get { return mapData_ != null; }
        }
        /// <summary>Clears the value of the "map_data" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMapData()
        {
            mapData_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as LocalMap);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LocalMap other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (MapPath != other.MapPath) return false;
            if (MapData != other.MapData) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasMapPath) hash ^= MapPath.GetHashCode();
            if (HasMapData) hash ^= MapData.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasMapPath)
            {
                output.WriteRawTag(10);
                output.WriteString(MapPath);
            }
            if (HasMapData)
            {
                output.WriteRawTag(58);
                output.WriteBytes(MapData);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasMapPath)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MapPath);
            }
            if (HasMapData)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(MapData);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LocalMap other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasMapPath)
            {
                MapPath = other.MapPath;
            }
            if (other.HasMapData)
            {
                MapData = other.MapData;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            MapPath = input.ReadString();
                            break;
                        }
                    case 58:
                        {
                            MapData = input.ReadBytes();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ResponseCreateGame : pb::IMessage<ResponseCreateGame>
    {
        private static readonly pb::MessageParser<ResponseCreateGame> _parser = new pb::MessageParser<ResponseCreateGame>(() => new ResponseCreateGame());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseCreateGame> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseCreateGame()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseCreateGame(ResponseCreateGame other) : this()
        {
            _hasBits0 = other._hasBits0;
            error_ = other.error_;
            errorDetails_ = other.errorDetails_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseCreateGame Clone()
        {
            return new ResponseCreateGame(this);
        }

        /// <summary>Field number for the "error" field.</summary>
        public const int ErrorFieldNumber = 1;
        private readonly static global::SC2APIProtocol.ResponseCreateGame.Types.Error ErrorDefaultValue = global::SC2APIProtocol.ResponseCreateGame.Types.Error.Unset;

        private global::SC2APIProtocol.ResponseCreateGame.Types.Error error_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ResponseCreateGame.Types.Error Error
        {
            get { if ((_hasBits0 & 1) != 0) { return error_; } else { return ErrorDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                error_ = value;
            }
        }
        /// <summary>Gets whether the "error" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasError
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "error" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearError()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "error_details" field.</summary>
        public const int ErrorDetailsFieldNumber = 2;
        private readonly static string ErrorDetailsDefaultValue = "";

        private string errorDetails_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ErrorDetails
        {
            get { return errorDetails_ ?? ErrorDetailsDefaultValue; }
            set
            {
                errorDetails_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "error_details" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasErrorDetails
        {
            get { return errorDetails_ != null; }
        }
        /// <summary>Clears the value of the "error_details" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearErrorDetails()
        {
            errorDetails_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseCreateGame);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseCreateGame other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Error != other.Error) return false;
            if (ErrorDetails != other.ErrorDetails) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasError) hash ^= Error.GetHashCode();
            if (HasErrorDetails) hash ^= ErrorDetails.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasError)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Error);
            }
            if (HasErrorDetails)
            {
                output.WriteRawTag(18);
                output.WriteString(ErrorDetails);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasError)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Error);
            }
            if (HasErrorDetails)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorDetails);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseCreateGame other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasError)
            {
                Error = other.Error;
            }
            if (other.HasErrorDetails)
            {
                ErrorDetails = other.ErrorDetails;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Error = (global::SC2APIProtocol.ResponseCreateGame.Types.Error)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            ErrorDetails = input.ReadString();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ResponseCreateGame message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum Error
            {
                [pbr::OriginalName("Error_UNSET")] Unset = 0,

                [pbr::OriginalName("MissingMap")] MissingMap = 1,
                [pbr::OriginalName("InvalidMapPath")] InvalidMapPath = 2,
                [pbr::OriginalName("InvalidMapData")] InvalidMapData = 3,
                [pbr::OriginalName("InvalidMapName")] InvalidMapName = 4,
                [pbr::OriginalName("InvalidMapHandle")] InvalidMapHandle = 5,
                [pbr::OriginalName("MissingPlayerSetup")] MissingPlayerSetup = 6,
                [pbr::OriginalName("InvalidPlayerSetup")] InvalidPlayerSetup = 7,
                /// <summary>
                /// Multiplayer is not supported in the current build.
                /// </summary>
                [pbr::OriginalName("MultiplayerUnsupported")] MultiplayerUnsupported = 8,
            }

        }
        #endregion

    }

    /// <summary>
    ///-----------------------------------------------------------------------------
    /// If successful, puts the game into the status: in_game. Will be able to
    /// request actions, observations and step the game.
    /// </summary>
    public sealed partial class RequestJoinGame : pb::IMessage<RequestJoinGame>
    {
        private static readonly pb::MessageParser<RequestJoinGame> _parser = new pb::MessageParser<RequestJoinGame>(() => new RequestJoinGame());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestJoinGame> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestJoinGame()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestJoinGame(RequestJoinGame other) : this()
        {
            _hasBits0 = other._hasBits0;
            options_ = other.HasOptions ? other.options_.Clone() : null;
            serverPorts_ = other.HasServerPorts ? other.serverPorts_.Clone() : null;
            clientPorts_ = other.clientPorts_.Clone();
            sharedPort_ = other.sharedPort_;
            playerName_ = other.playerName_;
            hostIp_ = other.hostIp_;
            switch (other.ParticipationCase)
            {
                case ParticipationOneofCase.Race:
                    Race = other.Race;
                    break;
                case ParticipationOneofCase.ObservedPlayerId:
                    ObservedPlayerId = other.ObservedPlayerId;
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestJoinGame Clone()
        {
            return new RequestJoinGame(this);
        }

        /// <summary>Field number for the "race" field.</summary>
        public const int RaceFieldNumber = 1;
        /// <summary>
        /// Join as participant
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.Race Race
        {
            get { return HasRace ? (global::SC2APIProtocol.Race)participation_ : global::SC2APIProtocol.Race.NoRace; }
            set
            {
                participation_ = value;
                participationCase_ = ParticipationOneofCase.Race;
            }
        }
        /// <summary>Gets whether the "race" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRace
        {
            get { return participationCase_ == ParticipationOneofCase.Race; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "race" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRace()
        {
            if (HasRace)
            {
                ClearParticipation();
            }
        }

        /// <summary>Field number for the "observed_player_id" field.</summary>
        public const int ObservedPlayerIdFieldNumber = 2;
        /// <summary>
        /// Join as observer
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ObservedPlayerId
        {
            get { return HasObservedPlayerId ? (uint)participation_ : 0; }
            set
            {
                participation_ = value;
                participationCase_ = ParticipationOneofCase.ObservedPlayerId;
            }
        }
        /// <summary>Gets whether the "observed_player_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasObservedPlayerId
        {
            get { return participationCase_ == ParticipationOneofCase.ObservedPlayerId; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "observed_player_id" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearObservedPlayerId()
        {
            if (HasObservedPlayerId)
            {
                ClearParticipation();
            }
        }

        /// <summary>Field number for the "options" field.</summary>
        public const int OptionsFieldNumber = 3;
        private global::SC2APIProtocol.InterfaceOptions options_;
        /// <summary>
        /// This is limited to what is specified in RequestCreateGame, but you can request less information if you want.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.InterfaceOptions Options
        {
            get { return options_; }
            set
            {
                options_ = value;
            }
        }
        /// <summary>Gets whether the options field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasOptions
        {
            get { return options_ != null; }
        }
        /// <summary>Clears the value of the options field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearOptions()
        {
            options_ = null;
        }

        /// <summary>Field number for the "server_ports" field.</summary>
        public const int ServerPortsFieldNumber = 4;
        private global::SC2APIProtocol.PortSet serverPorts_;
        /// <summary>
        /// Do not set in the single-player case. This is the port a server will use.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.PortSet ServerPorts
        {
            get { return serverPorts_; }
            set
            {
                serverPorts_ = value;
            }
        }
        /// <summary>Gets whether the server_ports field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasServerPorts
        {
            get { return serverPorts_ != null; }
        }
        /// <summary>Clears the value of the server_ports field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearServerPorts()
        {
            serverPorts_ = null;
        }

        /// <summary>Field number for the "client_ports" field.</summary>
        public const int ClientPortsFieldNumber = 5;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.PortSet> _repeated_clientPorts_codec
            = pb::FieldCodec.ForMessage(42, global::SC2APIProtocol.PortSet.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.PortSet> clientPorts_ = new pbc::RepeatedField<global::SC2APIProtocol.PortSet>();
        /// <summary>
        /// Do not set in the single-player case. These are the ports clients will use to initialize communication.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.PortSet> ClientPorts
        {
            get { return clientPorts_; }
        }

        /// <summary>Field number for the "shared_port" field.</summary>
        public const int SharedPortFieldNumber = 6;
        private readonly static int SharedPortDefaultValue = 0;

        private int sharedPort_;
        /// <summary>
        /// Currently only a singe client is supported.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SharedPort
        {
            get { if ((_hasBits0 & 4) != 0) { return sharedPort_; } else { return SharedPortDefaultValue; } }
            set
            {
                _hasBits0 |= 4;
                sharedPort_ = value;
            }
        }
        /// <summary>Gets whether the "shared_port" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSharedPort
        {
            get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "shared_port" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSharedPort()
        {
            _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "player_name" field.</summary>
        public const int PlayerNameFieldNumber = 7;
        private readonly static string PlayerNameDefaultValue = "";

        private string playerName_;
        /// <summary>
        /// Use this to set the player's name to something other than autogenerated name.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PlayerName
        {
            get { return playerName_ ?? PlayerNameDefaultValue; }
            set
            {
                playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "player_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerName
        {
            get { return playerName_ != null; }
        }
        /// <summary>Clears the value of the "player_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerName()
        {
            playerName_ = null;
        }

        /// <summary>Field number for the "host_ip" field.</summary>
        public const int HostIpFieldNumber = 8;
        private readonly static string HostIpDefaultValue = "";

        private string hostIp_;
        /// <summary>
        /// Both game creator and joiner should provide the ip address of the game creator in order to play remotely. Defaults to localhost.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string HostIp
        {
            get { return hostIp_ ?? HostIpDefaultValue; }
            set
            {
                hostIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "host_ip" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHostIp
        {
            get { return hostIp_ != null; }
        }
        /// <summary>Clears the value of the "host_ip" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHostIp()
        {
            hostIp_ = null;
        }

        private object participation_;
        /// <summary>Enum of possible cases for the "participation" oneof.</summary>
        public enum ParticipationOneofCase
        {
            None = 0,
            Race = 1,
            ObservedPlayerId = 2,
        }
        private ParticipationOneofCase participationCase_ = ParticipationOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ParticipationOneofCase ParticipationCase
        {
            get { return participationCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearParticipation()
        {
            participationCase_ = ParticipationOneofCase.None;
            participation_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestJoinGame);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestJoinGame other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Race != other.Race) return false;
            if (ObservedPlayerId != other.ObservedPlayerId) return false;
            if (!object.Equals(Options, other.Options)) return false;
            if (!object.Equals(ServerPorts, other.ServerPorts)) return false;
            if (!clientPorts_.Equals(other.clientPorts_)) return false;
            if (SharedPort != other.SharedPort) return false;
            if (PlayerName != other.PlayerName) return false;
            if (HostIp != other.HostIp) return false;
            if (ParticipationCase != other.ParticipationCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasRace) hash ^= Race.GetHashCode();
            if (HasObservedPlayerId) hash ^= ObservedPlayerId.GetHashCode();
            if (HasOptions) hash ^= Options.GetHashCode();
            if (HasServerPorts) hash ^= ServerPorts.GetHashCode();
            hash ^= clientPorts_.GetHashCode();
            if (HasSharedPort) hash ^= SharedPort.GetHashCode();
            if (HasPlayerName) hash ^= PlayerName.GetHashCode();
            if (HasHostIp) hash ^= HostIp.GetHashCode();
            hash ^= (int)participationCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasRace)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Race);
            }
            if (HasObservedPlayerId)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(ObservedPlayerId);
            }
            if (HasOptions)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Options);
            }
            if (HasServerPorts)
            {
                output.WriteRawTag(34);
                output.WriteMessage(ServerPorts);
            }
            clientPorts_.WriteTo(output, _repeated_clientPorts_codec);
            if (HasSharedPort)
            {
                output.WriteRawTag(48);
                output.WriteInt32(SharedPort);
            }
            if (HasPlayerName)
            {
                output.WriteRawTag(58);
                output.WriteString(PlayerName);
            }
            if (HasHostIp)
            {
                output.WriteRawTag(66);
                output.WriteString(HostIp);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasRace)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Race);
            }
            if (HasObservedPlayerId)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ObservedPlayerId);
            }
            if (HasOptions)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
            }
            if (HasServerPorts)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerPorts);
            }
            size += clientPorts_.CalculateSize(_repeated_clientPorts_codec);
            if (HasSharedPort)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(SharedPort);
            }
            if (HasPlayerName)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
            }
            if (HasHostIp)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(HostIp);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestJoinGame other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasOptions)
            {
                if (!HasOptions)
                {
                    Options = new global::SC2APIProtocol.InterfaceOptions();
                }
                Options.MergeFrom(other.Options);
            }
            if (other.HasServerPorts)
            {
                if (!HasServerPorts)
                {
                    ServerPorts = new global::SC2APIProtocol.PortSet();
                }
                ServerPorts.MergeFrom(other.ServerPorts);
            }
            clientPorts_.Add(other.clientPorts_);
            if (other.HasSharedPort)
            {
                SharedPort = other.SharedPort;
            }
            if (other.HasPlayerName)
            {
                PlayerName = other.PlayerName;
            }
            if (other.HasHostIp)
            {
                HostIp = other.HostIp;
            }
            switch (other.ParticipationCase)
            {
                case ParticipationOneofCase.Race:
                    Race = other.Race;
                    break;
                case ParticipationOneofCase.ObservedPlayerId:
                    ObservedPlayerId = other.ObservedPlayerId;
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            participation_ = input.ReadEnum();
                            participationCase_ = ParticipationOneofCase.Race;
                            break;
                        }
                    case 16:
                        {
                            ObservedPlayerId = input.ReadUInt32();
                            break;
                        }
                    case 26:
                        {
                            if (!HasOptions)
                            {
                                Options = new global::SC2APIProtocol.InterfaceOptions();
                            }
                            input.ReadMessage(Options);
                            break;
                        }
                    case 34:
                        {
                            if (!HasServerPorts)
                            {
                                ServerPorts = new global::SC2APIProtocol.PortSet();
                            }
                            input.ReadMessage(ServerPorts);
                            break;
                        }
                    case 42:
                        {
                            clientPorts_.AddEntriesFrom(input, _repeated_clientPorts_codec);
                            break;
                        }
                    case 48:
                        {
                            SharedPort = input.ReadInt32();
                            break;
                        }
                    case 58:
                        {
                            PlayerName = input.ReadString();
                            break;
                        }
                    case 66:
                        {
                            HostIp = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class PortSet : pb::IMessage<PortSet>
    {
        private static readonly pb::MessageParser<PortSet> _parser = new pb::MessageParser<PortSet>(() => new PortSet());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PortSet> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PortSet()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PortSet(PortSet other) : this()
        {
            _hasBits0 = other._hasBits0;
            gamePort_ = other.gamePort_;
            basePort_ = other.basePort_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PortSet Clone()
        {
            return new PortSet(this);
        }

        /// <summary>Field number for the "game_port" field.</summary>
        public const int GamePortFieldNumber = 1;
        private readonly static int GamePortDefaultValue = 0;

        private int gamePort_;
        /// <summary>
        /// Game right now needs two internal ports to establish a multiplay game on the local host.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int GamePort
        {
            get { if ((_hasBits0 & 1) != 0) { return gamePort_; } else { return GamePortDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                gamePort_ = value;
            }
        }
        /// <summary>Gets whether the "game_port" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGamePort
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "game_port" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGamePort()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "base_port" field.</summary>
        public const int BasePortFieldNumber = 2;
        private readonly static int BasePortDefaultValue = 0;

        private int basePort_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BasePort
        {
            get { if ((_hasBits0 & 2) != 0) { return basePort_; } else { return BasePortDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                basePort_ = value;
            }
        }
        /// <summary>Gets whether the "base_port" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBasePort
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "base_port" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBasePort()
        {
            _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PortSet);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PortSet other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (GamePort != other.GamePort) return false;
            if (BasePort != other.BasePort) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasGamePort) hash ^= GamePort.GetHashCode();
            if (HasBasePort) hash ^= BasePort.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasGamePort)
            {
                output.WriteRawTag(8);
                output.WriteInt32(GamePort);
            }
            if (HasBasePort)
            {
                output.WriteRawTag(16);
                output.WriteInt32(BasePort);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasGamePort)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(GamePort);
            }
            if (HasBasePort)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(BasePort);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PortSet other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasGamePort)
            {
                GamePort = other.GamePort;
            }
            if (other.HasBasePort)
            {
                BasePort = other.BasePort;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            GamePort = input.ReadInt32();
                            break;
                        }
                    case 16:
                        {
                            BasePort = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ResponseJoinGame : pb::IMessage<ResponseJoinGame>
    {
        private static readonly pb::MessageParser<ResponseJoinGame> _parser = new pb::MessageParser<ResponseJoinGame>(() => new ResponseJoinGame());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseJoinGame> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseJoinGame()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseJoinGame(ResponseJoinGame other) : this()
        {
            _hasBits0 = other._hasBits0;
            playerId_ = other.playerId_;
            error_ = other.error_;
            errorDetails_ = other.errorDetails_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseJoinGame Clone()
        {
            return new ResponseJoinGame(this);
        }

        /// <summary>Field number for the "player_id" field.</summary>
        public const int PlayerIdFieldNumber = 1;
        private readonly static uint PlayerIdDefaultValue = 0;

        private uint playerId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PlayerId
        {
            get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                playerId_ = value;
            }
        }
        /// <summary>Gets whether the "player_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerId
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "player_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerId()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "error" field.</summary>
        public const int ErrorFieldNumber = 2;
        private readonly static global::SC2APIProtocol.ResponseJoinGame.Types.Error ErrorDefaultValue = global::SC2APIProtocol.ResponseJoinGame.Types.Error.Unset;

        private global::SC2APIProtocol.ResponseJoinGame.Types.Error error_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ResponseJoinGame.Types.Error Error
        {
            get { if ((_hasBits0 & 2) != 0) { return error_; } else { return ErrorDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                error_ = value;
            }
        }
        /// <summary>Gets whether the "error" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasError
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "error" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearError()
        {
            _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "error_details" field.</summary>
        public const int ErrorDetailsFieldNumber = 3;
        private readonly static string ErrorDetailsDefaultValue = "";

        private string errorDetails_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ErrorDetails
        {
            get { return errorDetails_ ?? ErrorDetailsDefaultValue; }
            set
            {
                errorDetails_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "error_details" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasErrorDetails
        {
            get { return errorDetails_ != null; }
        }
        /// <summary>Clears the value of the "error_details" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearErrorDetails()
        {
            errorDetails_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseJoinGame);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseJoinGame other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (PlayerId != other.PlayerId) return false;
            if (Error != other.Error) return false;
            if (ErrorDetails != other.ErrorDetails) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasPlayerId) hash ^= PlayerId.GetHashCode();
            if (HasError) hash ^= Error.GetHashCode();
            if (HasErrorDetails) hash ^= ErrorDetails.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasPlayerId)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(PlayerId);
            }
            if (HasError)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Error);
            }
            if (HasErrorDetails)
            {
                output.WriteRawTag(26);
                output.WriteString(ErrorDetails);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasPlayerId)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
            }
            if (HasError)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Error);
            }
            if (HasErrorDetails)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorDetails);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseJoinGame other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasPlayerId)
            {
                PlayerId = other.PlayerId;
            }
            if (other.HasError)
            {
                Error = other.Error;
            }
            if (other.HasErrorDetails)
            {
                ErrorDetails = other.ErrorDetails;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            PlayerId = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            Error = (global::SC2APIProtocol.ResponseJoinGame.Types.Error)input.ReadEnum();
                            break;
                        }
                    case 26:
                        {
                            ErrorDetails = input.ReadString();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ResponseJoinGame message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum Error
            {
                [pbr::OriginalName("Error_UNSET")] Unset = 0,

                [pbr::OriginalName("MissingParticipation")] MissingParticipation = 1,
                [pbr::OriginalName("InvalidObservedPlayerId")] InvalidObservedPlayerId = 2,
                [pbr::OriginalName("MissingOptions")] MissingOptions = 3,
                [pbr::OriginalName("MissingPorts")] MissingPorts = 4,
                [pbr::OriginalName("GameFull")] GameFull = 5,
                [pbr::OriginalName("LaunchError")] LaunchError = 6,
                /// <summary>
                /// Multiplayer specific.
                /// </summary>
                [pbr::OriginalName("FeatureUnsupported")] FeatureUnsupported = 7,
                [pbr::OriginalName("NoSpaceForUser")] NoSpaceForUser = 8,
                [pbr::OriginalName("MapDoesNotExist")] MapDoesNotExist = 9,
                [pbr::OriginalName("CannotOpenMap")] CannotOpenMap = 10,
                [pbr::OriginalName("ChecksumError")] ChecksumError = 11,
                [pbr::OriginalName("NetworkError")] NetworkError = 12,
                [pbr::OriginalName("OtherError")] OtherError = 13,
            }

        }
        #endregion

    }

    /// <summary>
    ///-----------------------------------------------------------------------------
    /// </summary>
    public sealed partial class RequestRestartGame : pb::IMessage<RequestRestartGame>
    {
        private static readonly pb::MessageParser<RequestRestartGame> _parser = new pb::MessageParser<RequestRestartGame>(() => new RequestRestartGame());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestRestartGame> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestRestartGame()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestRestartGame(RequestRestartGame other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestRestartGame Clone()
        {
            return new RequestRestartGame(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestRestartGame);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestRestartGame other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestRestartGame other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    /// <summary>
    /// The defaultRestartGameLoops is specified to be (1&lt;&lt;18) by default
    /// </summary>
    public sealed partial class ResponseRestartGame : pb::IMessage<ResponseRestartGame>
    {
        private static readonly pb::MessageParser<ResponseRestartGame> _parser = new pb::MessageParser<ResponseRestartGame>(() => new ResponseRestartGame());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseRestartGame> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseRestartGame()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseRestartGame(ResponseRestartGame other) : this()
        {
            _hasBits0 = other._hasBits0;
            error_ = other.error_;
            errorDetails_ = other.errorDetails_;
            needHardReset_ = other.needHardReset_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseRestartGame Clone()
        {
            return new ResponseRestartGame(this);
        }

        /// <summary>Field number for the "error" field.</summary>
        public const int ErrorFieldNumber = 1;
        private readonly static global::SC2APIProtocol.ResponseRestartGame.Types.Error ErrorDefaultValue = global::SC2APIProtocol.ResponseRestartGame.Types.Error.LaunchError;

        private global::SC2APIProtocol.ResponseRestartGame.Types.Error error_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ResponseRestartGame.Types.Error Error
        {
            get { if ((_hasBits0 & 1) != 0) { return error_; } else { return ErrorDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                error_ = value;
            }
        }
        /// <summary>Gets whether the "error" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasError
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "error" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearError()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "error_details" field.</summary>
        public const int ErrorDetailsFieldNumber = 2;
        private readonly static string ErrorDetailsDefaultValue = "";

        private string errorDetails_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ErrorDetails
        {
            get { return errorDetails_ ?? ErrorDetailsDefaultValue; }
            set
            {
                errorDetails_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "error_details" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasErrorDetails
        {
            get { return errorDetails_ != null; }
        }
        /// <summary>Clears the value of the "error_details" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearErrorDetails()
        {
            errorDetails_ = null;
        }

        /// <summary>Field number for the "need_hard_reset" field.</summary>
        public const int NeedHardResetFieldNumber = 3;
        private readonly static bool NeedHardResetDefaultValue = false;

        private bool needHardReset_;
        /// <summary>
        /// This will occur once the simulation_loop is greater then defaultRestartGameLoops
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool NeedHardReset
        {
            get { if ((_hasBits0 & 2) != 0) { return needHardReset_; } else { return NeedHardResetDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                needHardReset_ = value;
            }
        }
        /// <summary>Gets whether the "need_hard_reset" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNeedHardReset
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "need_hard_reset" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNeedHardReset()
        {
            _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseRestartGame);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseRestartGame other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Error != other.Error) return false;
            if (ErrorDetails != other.ErrorDetails) return false;
            if (NeedHardReset != other.NeedHardReset) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasError) hash ^= Error.GetHashCode();
            if (HasErrorDetails) hash ^= ErrorDetails.GetHashCode();
            if (HasNeedHardReset) hash ^= NeedHardReset.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasError)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Error);
            }
            if (HasErrorDetails)
            {
                output.WriteRawTag(18);
                output.WriteString(ErrorDetails);
            }
            if (HasNeedHardReset)
            {
                output.WriteRawTag(24);
                output.WriteBool(NeedHardReset);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasError)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Error);
            }
            if (HasErrorDetails)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorDetails);
            }
            if (HasNeedHardReset)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseRestartGame other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasError)
            {
                Error = other.Error;
            }
            if (other.HasErrorDetails)
            {
                ErrorDetails = other.ErrorDetails;
            }
            if (other.HasNeedHardReset)
            {
                NeedHardReset = other.NeedHardReset;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Error = (global::SC2APIProtocol.ResponseRestartGame.Types.Error)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            ErrorDetails = input.ReadString();
                            break;
                        }
                    case 24:
                        {
                            NeedHardReset = input.ReadBool();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ResponseRestartGame message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum Error
            {
                [pbr::OriginalName("LaunchError")] LaunchError = 1,
            }

        }
        #endregion

    }

    /// <summary>
    ///-----------------------------------------------------------------------------
    /// </summary>
    public sealed partial class RequestStartReplay : pb::IMessage<RequestStartReplay>
    {
        private static readonly pb::MessageParser<RequestStartReplay> _parser = new pb::MessageParser<RequestStartReplay>(() => new RequestStartReplay());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestStartReplay> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestStartReplay()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestStartReplay(RequestStartReplay other) : this()
        {
            _hasBits0 = other._hasBits0;
            mapData_ = other.mapData_;
            observedPlayerId_ = other.observedPlayerId_;
            options_ = other.HasOptions ? other.options_.Clone() : null;
            disableFog_ = other.disableFog_;
            realtime_ = other.realtime_;
            recordReplay_ = other.recordReplay_;
            switch (other.ReplayCase)
            {
                case ReplayOneofCase.ReplayPath:
                    ReplayPath = other.ReplayPath;
                    break;
                case ReplayOneofCase.ReplayData:
                    ReplayData = other.ReplayData;
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestStartReplay Clone()
        {
            return new RequestStartReplay(this);
        }

        /// <summary>Field number for the "replay_path" field.</summary>
        public const int ReplayPathFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ReplayPath
        {
            get { return HasReplayPath ? (string)replay_ : ""; }
            set
            {
                replay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                replayCase_ = ReplayOneofCase.ReplayPath;
            }
        }
        /// <summary>Gets whether the "replay_path" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasReplayPath
        {
            get { return replayCase_ == ReplayOneofCase.ReplayPath; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "replay_path" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearReplayPath()
        {
            if (HasReplayPath)
            {
                ClearReplay();
            }
        }

        /// <summary>Field number for the "replay_data" field.</summary>
        public const int ReplayDataFieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString ReplayData
        {
            get { return HasReplayData ? (pb::ByteString)replay_ : pb::ByteString.Empty; }
            set
            {
                replay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                replayCase_ = ReplayOneofCase.ReplayData;
            }
        }
        /// <summary>Gets whether the "replay_data" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasReplayData
        {
            get { return replayCase_ == ReplayOneofCase.ReplayData; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "replay_data" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearReplayData()
        {
            if (HasReplayData)
            {
                ClearReplay();
            }
        }

        /// <summary>Field number for the "map_data" field.</summary>
        public const int MapDataFieldNumber = 6;
        private readonly static pb::ByteString MapDataDefaultValue = pb::ByteString.Empty;

        private pb::ByteString mapData_;
        /// <summary>
        /// Overrides the map path stored in the replay.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString MapData
        {
            get { return mapData_ ?? MapDataDefaultValue; }
            set
            {
                mapData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "map_data" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMapData
        {
            get { return mapData_ != null; }
        }
        /// <summary>Clears the value of the "map_data" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMapData()
        {
            mapData_ = null;
        }

        /// <summary>Field number for the "observed_player_id" field.</summary>
        public const int ObservedPlayerIdFieldNumber = 2;
        private readonly static int ObservedPlayerIdDefaultValue = 0;

        private int observedPlayerId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ObservedPlayerId
        {
            get { if ((_hasBits0 & 1) != 0) { return observedPlayerId_; } else { return ObservedPlayerIdDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                observedPlayerId_ = value;
            }
        }
        /// <summary>Gets whether the "observed_player_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasObservedPlayerId
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "observed_player_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearObservedPlayerId()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "options" field.</summary>
        public const int OptionsFieldNumber = 3;
        private global::SC2APIProtocol.InterfaceOptions options_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.InterfaceOptions Options
        {
            get { return options_; }
            set
            {
                options_ = value;
            }
        }
        /// <summary>Gets whether the options field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasOptions
        {
            get { return options_ != null; }
        }
        /// <summary>Clears the value of the options field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearOptions()
        {
            options_ = null;
        }

        /// <summary>Field number for the "disable_fog" field.</summary>
        public const int DisableFogFieldNumber = 4;
        private readonly static bool DisableFogDefaultValue = false;

        private bool disableFog_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DisableFog
        {
            get { if ((_hasBits0 & 2) != 0) { return disableFog_; } else { return DisableFogDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                disableFog_ = value;
            }
        }
        /// <summary>Gets whether the "disable_fog" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDisableFog
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "disable_fog" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDisableFog()
        {
            _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "realtime" field.</summary>
        public const int RealtimeFieldNumber = 7;
        private readonly static bool RealtimeDefaultValue = false;

        private bool realtime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Realtime
        {
            get { if ((_hasBits0 & 4) != 0) { return realtime_; } else { return RealtimeDefaultValue; } }
            set
            {
                _hasBits0 |= 4;
                realtime_ = value;
            }
        }
        /// <summary>Gets whether the "realtime" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRealtime
        {
            get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "realtime" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRealtime()
        {
            _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "record_replay" field.</summary>
        public const int RecordReplayFieldNumber = 8;
        private readonly static bool RecordReplayDefaultValue = false;

        private bool recordReplay_;
        /// <summary>
        /// Allow RequestSaveReplay from a replay. Useful for truncating a replay, or restoring tracker.events.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool RecordReplay
        {
            get { if ((_hasBits0 & 8) != 0) { return recordReplay_; } else { return RecordReplayDefaultValue; } }
            set
            {
                _hasBits0 |= 8;
                recordReplay_ = value;
            }
        }
        /// <summary>Gets whether the "record_replay" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRecordReplay
        {
            get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "record_replay" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRecordReplay()
        {
            _hasBits0 &= ~8;
        }

        private object replay_;
        /// <summary>Enum of possible cases for the "replay" oneof.</summary>
        public enum ReplayOneofCase
        {
            None = 0,
            ReplayPath = 1,
            ReplayData = 5,
        }
        private ReplayOneofCase replayCase_ = ReplayOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReplayOneofCase ReplayCase
        {
            get { return replayCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearReplay()
        {
            replayCase_ = ReplayOneofCase.None;
            replay_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestStartReplay);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestStartReplay other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ReplayPath != other.ReplayPath) return false;
            if (ReplayData != other.ReplayData) return false;
            if (MapData != other.MapData) return false;
            if (ObservedPlayerId != other.ObservedPlayerId) return false;
            if (!object.Equals(Options, other.Options)) return false;
            if (DisableFog != other.DisableFog) return false;
            if (Realtime != other.Realtime) return false;
            if (RecordReplay != other.RecordReplay) return false;
            if (ReplayCase != other.ReplayCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasReplayPath) hash ^= ReplayPath.GetHashCode();
            if (HasReplayData) hash ^= ReplayData.GetHashCode();
            if (HasMapData) hash ^= MapData.GetHashCode();
            if (HasObservedPlayerId) hash ^= ObservedPlayerId.GetHashCode();
            if (HasOptions) hash ^= Options.GetHashCode();
            if (HasDisableFog) hash ^= DisableFog.GetHashCode();
            if (HasRealtime) hash ^= Realtime.GetHashCode();
            if (HasRecordReplay) hash ^= RecordReplay.GetHashCode();
            hash ^= (int)replayCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasReplayPath)
            {
                output.WriteRawTag(10);
                output.WriteString(ReplayPath);
            }
            if (HasObservedPlayerId)
            {
                output.WriteRawTag(16);
                output.WriteInt32(ObservedPlayerId);
            }
            if (HasOptions)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Options);
            }
            if (HasDisableFog)
            {
                output.WriteRawTag(32);
                output.WriteBool(DisableFog);
            }
            if (HasReplayData)
            {
                output.WriteRawTag(42);
                output.WriteBytes(ReplayData);
            }
            if (HasMapData)
            {
                output.WriteRawTag(50);
                output.WriteBytes(MapData);
            }
            if (HasRealtime)
            {
                output.WriteRawTag(56);
                output.WriteBool(Realtime);
            }
            if (HasRecordReplay)
            {
                output.WriteRawTag(64);
                output.WriteBool(RecordReplay);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasReplayPath)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ReplayPath);
            }
            if (HasReplayData)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(ReplayData);
            }
            if (HasMapData)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(MapData);
            }
            if (HasObservedPlayerId)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObservedPlayerId);
            }
            if (HasOptions)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
            }
            if (HasDisableFog)
            {
                size += 1 + 1;
            }
            if (HasRealtime)
            {
                size += 1 + 1;
            }
            if (HasRecordReplay)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestStartReplay other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasMapData)
            {
                MapData = other.MapData;
            }
            if (other.HasObservedPlayerId)
            {
                ObservedPlayerId = other.ObservedPlayerId;
            }
            if (other.HasOptions)
            {
                if (!HasOptions)
                {
                    Options = new global::SC2APIProtocol.InterfaceOptions();
                }
                Options.MergeFrom(other.Options);
            }
            if (other.HasDisableFog)
            {
                DisableFog = other.DisableFog;
            }
            if (other.HasRealtime)
            {
                Realtime = other.Realtime;
            }
            if (other.HasRecordReplay)
            {
                RecordReplay = other.RecordReplay;
            }
            switch (other.ReplayCase)
            {
                case ReplayOneofCase.ReplayPath:
                    ReplayPath = other.ReplayPath;
                    break;
                case ReplayOneofCase.ReplayData:
                    ReplayData = other.ReplayData;
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            ReplayPath = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            ObservedPlayerId = input.ReadInt32();
                            break;
                        }
                    case 26:
                        {
                            if (!HasOptions)
                            {
                                Options = new global::SC2APIProtocol.InterfaceOptions();
                            }
                            input.ReadMessage(Options);
                            break;
                        }
                    case 32:
                        {
                            DisableFog = input.ReadBool();
                            break;
                        }
                    case 42:
                        {
                            ReplayData = input.ReadBytes();
                            break;
                        }
                    case 50:
                        {
                            MapData = input.ReadBytes();
                            break;
                        }
                    case 56:
                        {
                            Realtime = input.ReadBool();
                            break;
                        }
                    case 64:
                        {
                            RecordReplay = input.ReadBool();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ResponseStartReplay : pb::IMessage<ResponseStartReplay>
    {
        private static readonly pb::MessageParser<ResponseStartReplay> _parser = new pb::MessageParser<ResponseStartReplay>(() => new ResponseStartReplay());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseStartReplay> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseStartReplay()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseStartReplay(ResponseStartReplay other) : this()
        {
            _hasBits0 = other._hasBits0;
            error_ = other.error_;
            errorDetails_ = other.errorDetails_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseStartReplay Clone()
        {
            return new ResponseStartReplay(this);
        }

        /// <summary>Field number for the "error" field.</summary>
        public const int ErrorFieldNumber = 1;
        private readonly static global::SC2APIProtocol.ResponseStartReplay.Types.Error ErrorDefaultValue = global::SC2APIProtocol.ResponseStartReplay.Types.Error.MissingReplay;

        private global::SC2APIProtocol.ResponseStartReplay.Types.Error error_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ResponseStartReplay.Types.Error Error
        {
            get { if ((_hasBits0 & 1) != 0) { return error_; } else { return ErrorDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                error_ = value;
            }
        }
        /// <summary>Gets whether the "error" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasError
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "error" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearError()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "error_details" field.</summary>
        public const int ErrorDetailsFieldNumber = 2;
        private readonly static string ErrorDetailsDefaultValue = "";

        private string errorDetails_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ErrorDetails
        {
            get { return errorDetails_ ?? ErrorDetailsDefaultValue; }
            set
            {
                errorDetails_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "error_details" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasErrorDetails
        {
            get { return errorDetails_ != null; }
        }
        /// <summary>Clears the value of the "error_details" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearErrorDetails()
        {
            errorDetails_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseStartReplay);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseStartReplay other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Error != other.Error) return false;
            if (ErrorDetails != other.ErrorDetails) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasError) hash ^= Error.GetHashCode();
            if (HasErrorDetails) hash ^= ErrorDetails.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasError)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Error);
            }
            if (HasErrorDetails)
            {
                output.WriteRawTag(18);
                output.WriteString(ErrorDetails);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasError)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Error);
            }
            if (HasErrorDetails)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorDetails);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseStartReplay other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasError)
            {
                Error = other.Error;
            }
            if (other.HasErrorDetails)
            {
                ErrorDetails = other.ErrorDetails;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Error = (global::SC2APIProtocol.ResponseStartReplay.Types.Error)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            ErrorDetails = input.ReadString();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ResponseStartReplay message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum Error
            {
                [pbr::OriginalName("MissingReplay")] MissingReplay = 1,
                [pbr::OriginalName("InvalidReplayPath")] InvalidReplayPath = 2,
                [pbr::OriginalName("InvalidReplayData")] InvalidReplayData = 3,
                [pbr::OriginalName("InvalidMapData")] InvalidMapData = 4,
                [pbr::OriginalName("InvalidObservedPlayerId")] InvalidObservedPlayerId = 5,
                [pbr::OriginalName("MissingOptions")] MissingOptions = 6,
                [pbr::OriginalName("LaunchError")] LaunchError = 7,
            }

        }
        #endregion

    }

    /// <summary>
    ///-----------------------------------------------------------------------------
    /// </summary>
    public sealed partial class RequestMapCommand : pb::IMessage<RequestMapCommand>
    {
        private static readonly pb::MessageParser<RequestMapCommand> _parser = new pb::MessageParser<RequestMapCommand>(() => new RequestMapCommand());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestMapCommand> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestMapCommand()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestMapCommand(RequestMapCommand other) : this()
        {
            triggerCmd_ = other.triggerCmd_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestMapCommand Clone()
        {
            return new RequestMapCommand(this);
        }

        /// <summary>Field number for the "trigger_cmd" field.</summary>
        public const int TriggerCmdFieldNumber = 1;
        private readonly static string TriggerCmdDefaultValue = "";

        private string triggerCmd_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TriggerCmd
        {
            get { return triggerCmd_ ?? TriggerCmdDefaultValue; }
            set
            {
                triggerCmd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "trigger_cmd" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTriggerCmd
        {
            get { return triggerCmd_ != null; }
        }
        /// <summary>Clears the value of the "trigger_cmd" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTriggerCmd()
        {
            triggerCmd_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestMapCommand);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestMapCommand other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (TriggerCmd != other.TriggerCmd) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasTriggerCmd) hash ^= TriggerCmd.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasTriggerCmd)
            {
                output.WriteRawTag(10);
                output.WriteString(TriggerCmd);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasTriggerCmd)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(TriggerCmd);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestMapCommand other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasTriggerCmd)
            {
                TriggerCmd = other.TriggerCmd;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            TriggerCmd = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ResponseMapCommand : pb::IMessage<ResponseMapCommand>
    {
        private static readonly pb::MessageParser<ResponseMapCommand> _parser = new pb::MessageParser<ResponseMapCommand>(() => new ResponseMapCommand());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseMapCommand> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[13]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseMapCommand()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseMapCommand(ResponseMapCommand other) : this()
        {
            _hasBits0 = other._hasBits0;
            error_ = other.error_;
            errorDetails_ = other.errorDetails_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseMapCommand Clone()
        {
            return new ResponseMapCommand(this);
        }

        /// <summary>Field number for the "error" field.</summary>
        public const int ErrorFieldNumber = 1;
        private readonly static global::SC2APIProtocol.ResponseMapCommand.Types.Error ErrorDefaultValue = global::SC2APIProtocol.ResponseMapCommand.Types.Error.NoTriggerError;

        private global::SC2APIProtocol.ResponseMapCommand.Types.Error error_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ResponseMapCommand.Types.Error Error
        {
            get { if ((_hasBits0 & 1) != 0) { return error_; } else { return ErrorDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                error_ = value;
            }
        }
        /// <summary>Gets whether the "error" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasError
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "error" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearError()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "error_details" field.</summary>
        public const int ErrorDetailsFieldNumber = 2;
        private readonly static string ErrorDetailsDefaultValue = "";

        private string errorDetails_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ErrorDetails
        {
            get { return errorDetails_ ?? ErrorDetailsDefaultValue; }
            set
            {
                errorDetails_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "error_details" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasErrorDetails
        {
            get { return errorDetails_ != null; }
        }
        /// <summary>Clears the value of the "error_details" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearErrorDetails()
        {
            errorDetails_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseMapCommand);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseMapCommand other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Error != other.Error) return false;
            if (ErrorDetails != other.ErrorDetails) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasError) hash ^= Error.GetHashCode();
            if (HasErrorDetails) hash ^= ErrorDetails.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasError)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Error);
            }
            if (HasErrorDetails)
            {
                output.WriteRawTag(18);
                output.WriteString(ErrorDetails);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasError)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Error);
            }
            if (HasErrorDetails)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorDetails);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseMapCommand other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasError)
            {
                Error = other.Error;
            }
            if (other.HasErrorDetails)
            {
                ErrorDetails = other.ErrorDetails;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Error = (global::SC2APIProtocol.ResponseMapCommand.Types.Error)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            ErrorDetails = input.ReadString();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ResponseMapCommand message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum Error
            {
                [pbr::OriginalName("NoTriggerError")] NoTriggerError = 1,
            }

        }
        #endregion

    }

    /// <summary>
    ///-----------------------------------------------------------------------------
    /// </summary>
    public sealed partial class RequestLeaveGame : pb::IMessage<RequestLeaveGame>
    {
        private static readonly pb::MessageParser<RequestLeaveGame> _parser = new pb::MessageParser<RequestLeaveGame>(() => new RequestLeaveGame());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestLeaveGame> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[14]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestLeaveGame()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestLeaveGame(RequestLeaveGame other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestLeaveGame Clone()
        {
            return new RequestLeaveGame(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestLeaveGame);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestLeaveGame other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestLeaveGame other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    public sealed partial class ResponseLeaveGame : pb::IMessage<ResponseLeaveGame>
    {
        private static readonly pb::MessageParser<ResponseLeaveGame> _parser = new pb::MessageParser<ResponseLeaveGame>(() => new ResponseLeaveGame());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseLeaveGame> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[15]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseLeaveGame()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseLeaveGame(ResponseLeaveGame other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseLeaveGame Clone()
        {
            return new ResponseLeaveGame(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseLeaveGame);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseLeaveGame other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseLeaveGame other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    /// <summary>
    ///-----------------------------------------------------------------------------
    /// </summary>
    public sealed partial class RequestQuickSave : pb::IMessage<RequestQuickSave>
    {
        private static readonly pb::MessageParser<RequestQuickSave> _parser = new pb::MessageParser<RequestQuickSave>(() => new RequestQuickSave());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestQuickSave> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[16]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestQuickSave()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestQuickSave(RequestQuickSave other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestQuickSave Clone()
        {
            return new RequestQuickSave(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestQuickSave);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestQuickSave other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestQuickSave other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    /// <summary>
    ///-----------------------------------------------------------------------------
    /// </summary>
    public sealed partial class ResponseQuickSave : pb::IMessage<ResponseQuickSave>
    {
        private static readonly pb::MessageParser<ResponseQuickSave> _parser = new pb::MessageParser<ResponseQuickSave>(() => new ResponseQuickSave());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseQuickSave> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[17]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseQuickSave()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseQuickSave(ResponseQuickSave other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseQuickSave Clone()
        {
            return new ResponseQuickSave(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseQuickSave);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseQuickSave other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseQuickSave other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    /// <summary>
    ///-----------------------------------------------------------------------------
    /// </summary>
    public sealed partial class RequestQuickLoad : pb::IMessage<RequestQuickLoad>
    {
        private static readonly pb::MessageParser<RequestQuickLoad> _parser = new pb::MessageParser<RequestQuickLoad>(() => new RequestQuickLoad());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestQuickLoad> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[18]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestQuickLoad()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestQuickLoad(RequestQuickLoad other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestQuickLoad Clone()
        {
            return new RequestQuickLoad(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestQuickLoad);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestQuickLoad other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestQuickLoad other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    /// <summary>
    ///-----------------------------------------------------------------------------
    /// </summary>
    public sealed partial class ResponseQuickLoad : pb::IMessage<ResponseQuickLoad>
    {
        private static readonly pb::MessageParser<ResponseQuickLoad> _parser = new pb::MessageParser<ResponseQuickLoad>(() => new ResponseQuickLoad());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseQuickLoad> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[19]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseQuickLoad()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseQuickLoad(ResponseQuickLoad other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseQuickLoad Clone()
        {
            return new ResponseQuickLoad(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseQuickLoad);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseQuickLoad other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseQuickLoad other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    /// <summary>
    ///-----------------------------------------------------------------------------
    /// </summary>
    public sealed partial class RequestQuit : pb::IMessage<RequestQuit>
    {
        private static readonly pb::MessageParser<RequestQuit> _parser = new pb::MessageParser<RequestQuit>(() => new RequestQuit());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestQuit> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[20]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestQuit()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestQuit(RequestQuit other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestQuit Clone()
        {
            return new RequestQuit(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestQuit);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestQuit other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestQuit other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    public sealed partial class ResponseQuit : pb::IMessage<ResponseQuit>
    {
        private static readonly pb::MessageParser<ResponseQuit> _parser = new pb::MessageParser<ResponseQuit>(() => new ResponseQuit());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseQuit> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[21]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseQuit()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseQuit(ResponseQuit other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseQuit Clone()
        {
            return new ResponseQuit(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseQuit);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseQuit other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseQuit other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    /// <summary>
    ///-----------------------------------------------------------------------------
    /// </summary>
    public sealed partial class RequestGameInfo : pb::IMessage<RequestGameInfo>
    {
        private static readonly pb::MessageParser<RequestGameInfo> _parser = new pb::MessageParser<RequestGameInfo>(() => new RequestGameInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestGameInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[22]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestGameInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestGameInfo(RequestGameInfo other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestGameInfo Clone()
        {
            return new RequestGameInfo(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestGameInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestGameInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestGameInfo other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    public partial class ResponseGameInfo : pb::IMessage<ResponseGameInfo>
    {
        private static readonly pb::MessageParser<ResponseGameInfo> _parser = new pb::MessageParser<ResponseGameInfo>(() => new ResponseGameInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseGameInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[23]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseGameInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseGameInfo(ResponseGameInfo other) : this()
        {
            mapName_ = other.mapName_;
            modNames_ = other.modNames_.Clone();
            localMapPath_ = other.localMapPath_;
            playerInfo_ = other.playerInfo_.Clone();
            startRaw_ = other.HasStartRaw ? other.startRaw_.Clone() : null;
            options_ = other.HasOptions ? other.options_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseGameInfo Clone()
        {
            return new ResponseGameInfo(this);
        }

        /// <summary>Field number for the "map_name" field.</summary>
        public const int MapNameFieldNumber = 1;
        private readonly static string MapNameDefaultValue = "";

        private string mapName_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MapName
        {
            get { return mapName_ ?? MapNameDefaultValue; }
            set
            {
                mapName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "map_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMapName
        {
            get { return mapName_ != null; }
        }
        /// <summary>Clears the value of the "map_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMapName()
        {
            mapName_ = null;
        }

        /// <summary>Field number for the "mod_names" field.</summary>
        public const int ModNamesFieldNumber = 6;
        private static readonly pb::FieldCodec<string> _repeated_modNames_codec
            = pb::FieldCodec.ForString(50);
        private readonly pbc::RepeatedField<string> modNames_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> ModNames
        {
            get { return modNames_; }
        }

        /// <summary>Field number for the "local_map_path" field.</summary>
        public const int LocalMapPathFieldNumber = 2;
        private readonly static string LocalMapPathDefaultValue = "";

        private string localMapPath_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LocalMapPath
        {
            get { return localMapPath_ ?? LocalMapPathDefaultValue; }
            set
            {
                localMapPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "local_map_path" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLocalMapPath
        {
            get { return localMapPath_ != null; }
        }
        /// <summary>Clears the value of the "local_map_path" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLocalMapPath()
        {
            localMapPath_ = null;
        }

        /// <summary>Field number for the "player_info" field.</summary>
        public const int PlayerInfoFieldNumber = 3;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.PlayerInfo> _repeated_playerInfo_codec
            = pb::FieldCodec.ForMessage(26, global::SC2APIProtocol.PlayerInfo.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.PlayerInfo> playerInfo_ = new pbc::RepeatedField<global::SC2APIProtocol.PlayerInfo>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.PlayerInfo> PlayerInfo
        {
            get { return playerInfo_; }
        }

        /// <summary>Field number for the "start_raw" field.</summary>
        public const int StartRawFieldNumber = 4;
        private global::SC2APIProtocol.StartRaw startRaw_;
        /// <summary>
        /// Populated if Raw interface is enabled.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.StartRaw StartRaw
        {
            get { return startRaw_; }
            set
            {
                startRaw_ = value;
            }
        }
        /// <summary>Gets whether the start_raw field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasStartRaw
        {
            get { return startRaw_ != null; }
        }
        /// <summary>Clears the value of the start_raw field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearStartRaw()
        {
            startRaw_ = null;
        }

        /// <summary>Field number for the "options" field.</summary>
        public const int OptionsFieldNumber = 5;
        private global::SC2APIProtocol.InterfaceOptions options_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.InterfaceOptions Options
        {
            get { return options_; }
            set
            {
                options_ = value;
            }
        }
        /// <summary>Gets whether the options field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasOptions
        {
            get { return options_ != null; }
        }
        /// <summary>Clears the value of the options field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearOptions()
        {
            options_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseGameInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseGameInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (MapName != other.MapName) return false;
            if (!modNames_.Equals(other.modNames_)) return false;
            if (LocalMapPath != other.LocalMapPath) return false;
            if (!playerInfo_.Equals(other.playerInfo_)) return false;
            if (!object.Equals(StartRaw, other.StartRaw)) return false;
            if (!object.Equals(Options, other.Options)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasMapName) hash ^= MapName.GetHashCode();
            hash ^= modNames_.GetHashCode();
            if (HasLocalMapPath) hash ^= LocalMapPath.GetHashCode();
            hash ^= playerInfo_.GetHashCode();
            if (HasStartRaw) hash ^= StartRaw.GetHashCode();
            if (HasOptions) hash ^= Options.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasMapName)
            {
                output.WriteRawTag(10);
                output.WriteString(MapName);
            }
            if (HasLocalMapPath)
            {
                output.WriteRawTag(18);
                output.WriteString(LocalMapPath);
            }
            playerInfo_.WriteTo(output, _repeated_playerInfo_codec);
            if (HasStartRaw)
            {
                output.WriteRawTag(34);
                output.WriteMessage(StartRaw);
            }
            if (HasOptions)
            {
                output.WriteRawTag(42);
                output.WriteMessage(Options);
            }
            modNames_.WriteTo(output, _repeated_modNames_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasMapName)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MapName);
            }
            size += modNames_.CalculateSize(_repeated_modNames_codec);
            if (HasLocalMapPath)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(LocalMapPath);
            }
            size += playerInfo_.CalculateSize(_repeated_playerInfo_codec);
            if (HasStartRaw)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartRaw);
            }
            if (HasOptions)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseGameInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasMapName)
            {
                MapName = other.MapName;
            }
            modNames_.Add(other.modNames_);
            if (other.HasLocalMapPath)
            {
                LocalMapPath = other.LocalMapPath;
            }
            playerInfo_.Add(other.playerInfo_);
            if (other.HasStartRaw)
            {
                if (!HasStartRaw)
                {
                    StartRaw = new global::SC2APIProtocol.StartRaw();
                }
                StartRaw.MergeFrom(other.StartRaw);
            }
            if (other.HasOptions)
            {
                if (!HasOptions)
                {
                    Options = new global::SC2APIProtocol.InterfaceOptions();
                }
                Options.MergeFrom(other.Options);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            MapName = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            LocalMapPath = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            playerInfo_.AddEntriesFrom(input, _repeated_playerInfo_codec);
                            break;
                        }
                    case 34:
                        {
                            if (!HasStartRaw)
                            {
                                StartRaw = new global::SC2APIProtocol.StartRaw();
                            }
                            input.ReadMessage(StartRaw);
                            break;
                        }
                    case 42:
                        {
                            if (!HasOptions)
                            {
                                Options = new global::SC2APIProtocol.InterfaceOptions();
                            }
                            input.ReadMessage(Options);
                            break;
                        }
                    case 50:
                        {
                            modNames_.AddEntriesFrom(input, _repeated_modNames_codec);
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    ///-----------------------------------------------------------------------------
    /// </summary>
    public sealed partial class RequestObservation : pb::IMessage<RequestObservation>
    {
        private static readonly pb::MessageParser<RequestObservation> _parser = new pb::MessageParser<RequestObservation>(() => new RequestObservation());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestObservation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[24]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestObservation()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestObservation(RequestObservation other) : this()
        {
            _hasBits0 = other._hasBits0;
            disableFog_ = other.disableFog_;
            gameLoop_ = other.gameLoop_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestObservation Clone()
        {
            return new RequestObservation(this);
        }

        /// <summary>Field number for the "disable_fog" field.</summary>
        public const int DisableFogFieldNumber = 1;
        private readonly static bool DisableFogDefaultValue = false;

        private bool disableFog_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DisableFog
        {
            get { if ((_hasBits0 & 1) != 0) { return disableFog_; } else { return DisableFogDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                disableFog_ = value;
            }
        }
        /// <summary>Gets whether the "disable_fog" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDisableFog
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "disable_fog" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDisableFog()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "game_loop" field.</summary>
        public const int GameLoopFieldNumber = 2;
        private readonly static uint GameLoopDefaultValue = 0;

        private uint gameLoop_;
        /// <summary>
        /// In realtime the request will only return once the simulation game loop has reached this value. When not realtime this value is ignored.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GameLoop
        {
            get { if ((_hasBits0 & 2) != 0) { return gameLoop_; } else { return GameLoopDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                gameLoop_ = value;
            }
        }
        /// <summary>Gets whether the "game_loop" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGameLoop
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "game_loop" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGameLoop()
        {
            _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestObservation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestObservation other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (DisableFog != other.DisableFog) return false;
            if (GameLoop != other.GameLoop) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasDisableFog) hash ^= DisableFog.GetHashCode();
            if (HasGameLoop) hash ^= GameLoop.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasDisableFog)
            {
                output.WriteRawTag(8);
                output.WriteBool(DisableFog);
            }
            if (HasGameLoop)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(GameLoop);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasDisableFog)
            {
                size += 1 + 1;
            }
            if (HasGameLoop)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameLoop);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestObservation other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasDisableFog)
            {
                DisableFog = other.DisableFog;
            }
            if (other.HasGameLoop)
            {
                GameLoop = other.GameLoop;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            DisableFog = input.ReadBool();
                            break;
                        }
                    case 16:
                        {
                            GameLoop = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public partial class ResponseObservation : pb::IMessage<ResponseObservation>
    {
        private static readonly pb::MessageParser<ResponseObservation> _parser = new pb::MessageParser<ResponseObservation>(() => new ResponseObservation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseObservation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[25]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseObservation()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseObservation(ResponseObservation other) : this()
        {
            actions_ = other.actions_.Clone();
            actionErrors_ = other.actionErrors_.Clone();
            observation_ = other.HasObservation ? other.observation_.Clone() : null;
            playerResult_ = other.playerResult_.Clone();
            chat_ = other.chat_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseObservation Clone()
        {
            return new ResponseObservation(this);
        }

        /// <summary>Field number for the "actions" field.</summary>
        public const int ActionsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.Action> _repeated_actions_codec
            = pb::FieldCodec.ForMessage(10, global::SC2APIProtocol.Action.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.Action> actions_ = new pbc::RepeatedField<global::SC2APIProtocol.Action>();
        /// <summary>
        /// Actions this player did since the last Observation.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.Action> Actions
        {
            get { return actions_; }
        }

        /// <summary>Field number for the "action_errors" field.</summary>
        public const int ActionErrorsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.ActionError> _repeated_actionErrors_codec
            = pb::FieldCodec.ForMessage(18, global::SC2APIProtocol.ActionError.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.ActionError> actionErrors_ = new pbc::RepeatedField<global::SC2APIProtocol.ActionError>();
        /// <summary>
        /// Equivalent of UI "red text" errors.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.ActionError> ActionErrors
        {
            get { return actionErrors_; }
        }

        /// <summary>Field number for the "observation" field.</summary>
        public const int ObservationFieldNumber = 3;
        private global::SC2APIProtocol.Observation observation_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.Observation Observation
        {
            get { return observation_; }
            set
            {
                observation_ = value;
            }
        }
        /// <summary>Gets whether the observation field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasObservation
        {
            get { return observation_ != null; }
        }
        /// <summary>Clears the value of the observation field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearObservation()
        {
            observation_ = null;
        }

        /// <summary>Field number for the "player_result" field.</summary>
        public const int PlayerResultFieldNumber = 4;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.PlayerResult> _repeated_playerResult_codec
            = pb::FieldCodec.ForMessage(34, global::SC2APIProtocol.PlayerResult.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.PlayerResult> playerResult_ = new pbc::RepeatedField<global::SC2APIProtocol.PlayerResult>();
        /// <summary>
        /// Only populated if the game ended during this step.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.PlayerResult> PlayerResult
        {
            get { return playerResult_; }
        }

        /// <summary>Field number for the "chat" field.</summary>
        public const int ChatFieldNumber = 5;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.ChatReceived> _repeated_chat_codec
            = pb::FieldCodec.ForMessage(42, global::SC2APIProtocol.ChatReceived.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.ChatReceived> chat_ = new pbc::RepeatedField<global::SC2APIProtocol.ChatReceived>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.ChatReceived> Chat
        {
            get { return chat_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseObservation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseObservation other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!actions_.Equals(other.actions_)) return false;
            if (!actionErrors_.Equals(other.actionErrors_)) return false;
            if (!object.Equals(Observation, other.Observation)) return false;
            if (!playerResult_.Equals(other.playerResult_)) return false;
            if (!chat_.Equals(other.chat_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= actions_.GetHashCode();
            hash ^= actionErrors_.GetHashCode();
            if (HasObservation) hash ^= Observation.GetHashCode();
            hash ^= playerResult_.GetHashCode();
            hash ^= chat_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            actions_.WriteTo(output, _repeated_actions_codec);
            actionErrors_.WriteTo(output, _repeated_actionErrors_codec);
            if (HasObservation)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Observation);
            }
            playerResult_.WriteTo(output, _repeated_playerResult_codec);
            chat_.WriteTo(output, _repeated_chat_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += actions_.CalculateSize(_repeated_actions_codec);
            size += actionErrors_.CalculateSize(_repeated_actionErrors_codec);
            if (HasObservation)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Observation);
            }
            size += playerResult_.CalculateSize(_repeated_playerResult_codec);
            size += chat_.CalculateSize(_repeated_chat_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseObservation other)
        {
            if (other == null)
            {
                return;
            }
            actions_.Add(other.actions_);
            actionErrors_.Add(other.actionErrors_);
            if (other.HasObservation)
            {
                if (!HasObservation)
                {
                    Observation = new global::SC2APIProtocol.Observation();
                }
                Observation.MergeFrom(other.Observation);
            }
            playerResult_.Add(other.playerResult_);
            chat_.Add(other.chat_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            actions_.AddEntriesFrom(input, _repeated_actions_codec);
                            break;
                        }
                    case 18:
                        {
                            actionErrors_.AddEntriesFrom(input, _repeated_actionErrors_codec);
                            break;
                        }
                    case 26:
                        {
                            if (!HasObservation)
                            {
                                Observation = new global::SC2APIProtocol.Observation();
                            }
                            input.ReadMessage(Observation);
                            break;
                        }
                    case 34:
                        {
                            playerResult_.AddEntriesFrom(input, _repeated_playerResult_codec);
                            break;
                        }
                    case 42:
                        {
                            chat_.AddEntriesFrom(input, _repeated_chat_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ChatReceived : pb::IMessage<ChatReceived>
    {
        private static readonly pb::MessageParser<ChatReceived> _parser = new pb::MessageParser<ChatReceived>(() => new ChatReceived());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ChatReceived> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[26]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChatReceived()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChatReceived(ChatReceived other) : this()
        {
            _hasBits0 = other._hasBits0;
            playerId_ = other.playerId_;
            message_ = other.message_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChatReceived Clone()
        {
            return new ChatReceived(this);
        }

        /// <summary>Field number for the "player_id" field.</summary>
        public const int PlayerIdFieldNumber = 1;
        private readonly static uint PlayerIdDefaultValue = 0;

        private uint playerId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PlayerId
        {
            get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                playerId_ = value;
            }
        }
        /// <summary>Gets whether the "player_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerId
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "player_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerId()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 2;
        private readonly static string MessageDefaultValue = "";

        private string message_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Message
        {
            get { return message_ ?? MessageDefaultValue; }
            set
            {
                message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "message" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMessage
        {
            get { return message_ != null; }
        }
        /// <summary>Clears the value of the "message" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMessage()
        {
            message_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ChatReceived);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ChatReceived other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (PlayerId != other.PlayerId) return false;
            if (Message != other.Message) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasPlayerId) hash ^= PlayerId.GetHashCode();
            if (HasMessage) hash ^= Message.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasPlayerId)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(PlayerId);
            }
            if (HasMessage)
            {
                output.WriteRawTag(18);
                output.WriteString(Message);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasPlayerId)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
            }
            if (HasMessage)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ChatReceived other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasPlayerId)
            {
                PlayerId = other.PlayerId;
            }
            if (other.HasMessage)
            {
                Message = other.Message;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            PlayerId = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            Message = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    ///-----------------------------------------------------------------------------
    /// </summary>
    public sealed partial class RequestAction : pb::IMessage<RequestAction>
    {
        private static readonly pb::MessageParser<RequestAction> _parser = new pb::MessageParser<RequestAction>(() => new RequestAction());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestAction> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[27]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestAction()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestAction(RequestAction other) : this()
        {
            actions_ = other.actions_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestAction Clone()
        {
            return new RequestAction(this);
        }

        /// <summary>Field number for the "actions" field.</summary>
        public const int ActionsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.Action> _repeated_actions_codec
            = pb::FieldCodec.ForMessage(10, global::SC2APIProtocol.Action.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.Action> actions_ = new pbc::RepeatedField<global::SC2APIProtocol.Action>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.Action> Actions
        {
            get { return actions_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestAction);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestAction other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!actions_.Equals(other.actions_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= actions_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            actions_.WriteTo(output, _repeated_actions_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += actions_.CalculateSize(_repeated_actions_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestAction other)
        {
            if (other == null)
            {
                return;
            }
            actions_.Add(other.actions_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            actions_.AddEntriesFrom(input, _repeated_actions_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ResponseAction : pb::IMessage<ResponseAction>
    {
        private static readonly pb::MessageParser<ResponseAction> _parser = new pb::MessageParser<ResponseAction>(() => new ResponseAction());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseAction> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[28]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseAction()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseAction(ResponseAction other) : this()
        {
            result_ = other.result_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseAction Clone()
        {
            return new ResponseAction(this);
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 1;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.ActionResult> _repeated_result_codec
            = pb::FieldCodec.ForEnum(8, x => (int)x, x => (global::SC2APIProtocol.ActionResult)x);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.ActionResult> result_ = new pbc::RepeatedField<global::SC2APIProtocol.ActionResult>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.ActionResult> Result
        {
            get { return result_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseAction);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseAction other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!result_.Equals(other.result_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= result_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            result_.WriteTo(output, _repeated_result_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += result_.CalculateSize(_repeated_result_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseAction other)
        {
            if (other == null)
            {
                return;
            }
            result_.Add(other.result_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                    case 8:
                        {
                            result_.AddEntriesFrom(input, _repeated_result_codec);
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    ///-----------------------------------------------------------------------------
    /// </summary>
    public sealed partial class RequestObserverAction : pb::IMessage<RequestObserverAction>
    {
        private static readonly pb::MessageParser<RequestObserverAction> _parser = new pb::MessageParser<RequestObserverAction>(() => new RequestObserverAction());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestObserverAction> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[29]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestObserverAction()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestObserverAction(RequestObserverAction other) : this()
        {
            actions_ = other.actions_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestObserverAction Clone()
        {
            return new RequestObserverAction(this);
        }

        /// <summary>Field number for the "actions" field.</summary>
        public const int ActionsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.ObserverAction> _repeated_actions_codec
            = pb::FieldCodec.ForMessage(10, global::SC2APIProtocol.ObserverAction.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.ObserverAction> actions_ = new pbc::RepeatedField<global::SC2APIProtocol.ObserverAction>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.ObserverAction> Actions
        {
            get { return actions_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestObserverAction);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestObserverAction other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!actions_.Equals(other.actions_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= actions_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            actions_.WriteTo(output, _repeated_actions_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += actions_.CalculateSize(_repeated_actions_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestObserverAction other)
        {
            if (other == null)
            {
                return;
            }
            actions_.Add(other.actions_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            actions_.AddEntriesFrom(input, _repeated_actions_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ResponseObserverAction : pb::IMessage<ResponseObserverAction>
    {
        private static readonly pb::MessageParser<ResponseObserverAction> _parser = new pb::MessageParser<ResponseObserverAction>(() => new ResponseObserverAction());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseObserverAction> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[30]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseObserverAction()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseObserverAction(ResponseObserverAction other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseObserverAction Clone()
        {
            return new ResponseObserverAction(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseObserverAction);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseObserverAction other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseObserverAction other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    /// <summary>
    ///-----------------------------------------------------------------------------
    /// </summary>
    public sealed partial class RequestStep : pb::IMessage<RequestStep>
    {
        private static readonly pb::MessageParser<RequestStep> _parser = new pb::MessageParser<RequestStep>(() => new RequestStep());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestStep> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[31]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestStep()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestStep(RequestStep other) : this()
        {
            _hasBits0 = other._hasBits0;
            count_ = other.count_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestStep Clone()
        {
            return new RequestStep(this);
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 1;
        private readonly static uint CountDefaultValue = 0;

        private uint count_;
        /// <summary>
        /// Number of game loops to simulate for the next frame.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Count
        {
            get { if ((_hasBits0 & 1) != 0) { return count_; } else { return CountDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                count_ = value;
            }
        }
        /// <summary>Gets whether the "count" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCount
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "count" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCount()
        {
            _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestStep);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestStep other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Count != other.Count) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasCount) hash ^= Count.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasCount)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Count);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasCount)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestStep other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasCount)
            {
                Count = other.Count;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Count = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ResponseStep : pb::IMessage<ResponseStep>
    {
        private static readonly pb::MessageParser<ResponseStep> _parser = new pb::MessageParser<ResponseStep>(() => new ResponseStep());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseStep> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[32]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseStep()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseStep(ResponseStep other) : this()
        {
            _hasBits0 = other._hasBits0;
            simulationLoop_ = other.simulationLoop_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseStep Clone()
        {
            return new ResponseStep(this);
        }

        /// <summary>Field number for the "simulation_loop" field.</summary>
        public const int SimulationLoopFieldNumber = 1;
        private readonly static uint SimulationLoopDefaultValue = 0;

        private uint simulationLoop_;
        /// <summary>
        ///  Max simulation_loop is (1&lt;&lt;19) before "end of time" will occur
        ///  The "end of time" is classified as the maximum number of game loops or absolute game time
        ///  representable as a positive fixed point number.
        ///  When we reach the "end of time", permanently pause the game and end the game for all.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SimulationLoop
        {
            get { if ((_hasBits0 & 1) != 0) { return simulationLoop_; } else { return SimulationLoopDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                simulationLoop_ = value;
            }
        }
        /// <summary>Gets whether the "simulation_loop" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSimulationLoop
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "simulation_loop" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSimulationLoop()
        {
            _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseStep);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseStep other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (SimulationLoop != other.SimulationLoop) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasSimulationLoop) hash ^= SimulationLoop.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasSimulationLoop)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(SimulationLoop);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasSimulationLoop)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SimulationLoop);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseStep other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasSimulationLoop)
            {
                SimulationLoop = other.SimulationLoop;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            SimulationLoop = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    ///-----------------------------------------------------------------------------
    /// </summary>
    public sealed partial class RequestData : pb::IMessage<RequestData>
    {
        private static readonly pb::MessageParser<RequestData> _parser = new pb::MessageParser<RequestData>(() => new RequestData());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[33]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestData()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestData(RequestData other) : this()
        {
            _hasBits0 = other._hasBits0;
            abilityId_ = other.abilityId_;
            unitTypeId_ = other.unitTypeId_;
            upgradeId_ = other.upgradeId_;
            buffId_ = other.buffId_;
            effectId_ = other.effectId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestData Clone()
        {
            return new RequestData(this);
        }

        /// <summary>Field number for the "ability_id" field.</summary>
        public const int AbilityIdFieldNumber = 1;
        private readonly static bool AbilityIdDefaultValue = false;

        private bool abilityId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool AbilityId
        {
            get { if ((_hasBits0 & 1) != 0) { return abilityId_; } else { return AbilityIdDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                abilityId_ = value;
            }
        }
        /// <summary>Gets whether the "ability_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAbilityId
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "ability_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAbilityId()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "unit_type_id" field.</summary>
        public const int UnitTypeIdFieldNumber = 2;
        private readonly static bool UnitTypeIdDefaultValue = false;

        private bool unitTypeId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool UnitTypeId
        {
            get { if ((_hasBits0 & 2) != 0) { return unitTypeId_; } else { return UnitTypeIdDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                unitTypeId_ = value;
            }
        }
        /// <summary>Gets whether the "unit_type_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnitTypeId
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "unit_type_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnitTypeId()
        {
            _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "upgrade_id" field.</summary>
        public const int UpgradeIdFieldNumber = 3;
        private readonly static bool UpgradeIdDefaultValue = false;

        private bool upgradeId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool UpgradeId
        {
            get { if ((_hasBits0 & 4) != 0) { return upgradeId_; } else { return UpgradeIdDefaultValue; } }
            set
            {
                _hasBits0 |= 4;
                upgradeId_ = value;
            }
        }
        /// <summary>Gets whether the "upgrade_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUpgradeId
        {
            get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "upgrade_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUpgradeId()
        {
            _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "buff_id" field.</summary>
        public const int BuffIdFieldNumber = 4;
        private readonly static bool BuffIdDefaultValue = false;

        private bool buffId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool BuffId
        {
            get { if ((_hasBits0 & 8) != 0) { return buffId_; } else { return BuffIdDefaultValue; } }
            set
            {
                _hasBits0 |= 8;
                buffId_ = value;
            }
        }
        /// <summary>Gets whether the "buff_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBuffId
        {
            get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "buff_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBuffId()
        {
            _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "effect_id" field.</summary>
        public const int EffectIdFieldNumber = 5;
        private readonly static bool EffectIdDefaultValue = false;

        private bool effectId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool EffectId
        {
            get { if ((_hasBits0 & 16) != 0) { return effectId_; } else { return EffectIdDefaultValue; } }
            set
            {
                _hasBits0 |= 16;
                effectId_ = value;
            }
        }
        /// <summary>Gets whether the "effect_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasEffectId
        {
            get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "effect_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearEffectId()
        {
            _hasBits0 &= ~16;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestData other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (AbilityId != other.AbilityId) return false;
            if (UnitTypeId != other.UnitTypeId) return false;
            if (UpgradeId != other.UpgradeId) return false;
            if (BuffId != other.BuffId) return false;
            if (EffectId != other.EffectId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasAbilityId) hash ^= AbilityId.GetHashCode();
            if (HasUnitTypeId) hash ^= UnitTypeId.GetHashCode();
            if (HasUpgradeId) hash ^= UpgradeId.GetHashCode();
            if (HasBuffId) hash ^= BuffId.GetHashCode();
            if (HasEffectId) hash ^= EffectId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasAbilityId)
            {
                output.WriteRawTag(8);
                output.WriteBool(AbilityId);
            }
            if (HasUnitTypeId)
            {
                output.WriteRawTag(16);
                output.WriteBool(UnitTypeId);
            }
            if (HasUpgradeId)
            {
                output.WriteRawTag(24);
                output.WriteBool(UpgradeId);
            }
            if (HasBuffId)
            {
                output.WriteRawTag(32);
                output.WriteBool(BuffId);
            }
            if (HasEffectId)
            {
                output.WriteRawTag(40);
                output.WriteBool(EffectId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasAbilityId)
            {
                size += 1 + 1;
            }
            if (HasUnitTypeId)
            {
                size += 1 + 1;
            }
            if (HasUpgradeId)
            {
                size += 1 + 1;
            }
            if (HasBuffId)
            {
                size += 1 + 1;
            }
            if (HasEffectId)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasAbilityId)
            {
                AbilityId = other.AbilityId;
            }
            if (other.HasUnitTypeId)
            {
                UnitTypeId = other.UnitTypeId;
            }
            if (other.HasUpgradeId)
            {
                UpgradeId = other.UpgradeId;
            }
            if (other.HasBuffId)
            {
                BuffId = other.BuffId;
            }
            if (other.HasEffectId)
            {
                EffectId = other.EffectId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            AbilityId = input.ReadBool();
                            break;
                        }
                    case 16:
                        {
                            UnitTypeId = input.ReadBool();
                            break;
                        }
                    case 24:
                        {
                            UpgradeId = input.ReadBool();
                            break;
                        }
                    case 32:
                        {
                            BuffId = input.ReadBool();
                            break;
                        }
                    case 40:
                        {
                            EffectId = input.ReadBool();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ResponseData : pb::IMessage<ResponseData>
    {
        private static readonly pb::MessageParser<ResponseData> _parser = new pb::MessageParser<ResponseData>(() => new ResponseData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[34]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseData()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseData(ResponseData other) : this()
        {
            abilities_ = other.abilities_.Clone();
            units_ = other.units_.Clone();
            upgrades_ = other.upgrades_.Clone();
            buffs_ = other.buffs_.Clone();
            effects_ = other.effects_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseData Clone()
        {
            return new ResponseData(this);
        }

        /// <summary>Field number for the "abilities" field.</summary>
        public const int AbilitiesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.AbilityData> _repeated_abilities_codec
            = pb::FieldCodec.ForMessage(10, global::SC2APIProtocol.AbilityData.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.AbilityData> abilities_ = new pbc::RepeatedField<global::SC2APIProtocol.AbilityData>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.AbilityData> Abilities
        {
            get { return abilities_; }
        }

        /// <summary>Field number for the "units" field.</summary>
        public const int UnitsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.UnitTypeData> _repeated_units_codec
            = pb::FieldCodec.ForMessage(18, global::SC2APIProtocol.UnitTypeData.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.UnitTypeData> units_ = new pbc::RepeatedField<global::SC2APIProtocol.UnitTypeData>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.UnitTypeData> Units
        {
            get { return units_; }
        }

        /// <summary>Field number for the "upgrades" field.</summary>
        public const int UpgradesFieldNumber = 3;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.UpgradeData> _repeated_upgrades_codec
            = pb::FieldCodec.ForMessage(26, global::SC2APIProtocol.UpgradeData.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.UpgradeData> upgrades_ = new pbc::RepeatedField<global::SC2APIProtocol.UpgradeData>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.UpgradeData> Upgrades
        {
            get { return upgrades_; }
        }

        /// <summary>Field number for the "buffs" field.</summary>
        public const int BuffsFieldNumber = 4;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.BuffData> _repeated_buffs_codec
            = pb::FieldCodec.ForMessage(34, global::SC2APIProtocol.BuffData.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.BuffData> buffs_ = new pbc::RepeatedField<global::SC2APIProtocol.BuffData>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.BuffData> Buffs
        {
            get { return buffs_; }
        }

        /// <summary>Field number for the "effects" field.</summary>
        public const int EffectsFieldNumber = 5;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.EffectData> _repeated_effects_codec
            = pb::FieldCodec.ForMessage(42, global::SC2APIProtocol.EffectData.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.EffectData> effects_ = new pbc::RepeatedField<global::SC2APIProtocol.EffectData>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.EffectData> Effects
        {
            get { return effects_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseData other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!abilities_.Equals(other.abilities_)) return false;
            if (!units_.Equals(other.units_)) return false;
            if (!upgrades_.Equals(other.upgrades_)) return false;
            if (!buffs_.Equals(other.buffs_)) return false;
            if (!effects_.Equals(other.effects_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= abilities_.GetHashCode();
            hash ^= units_.GetHashCode();
            hash ^= upgrades_.GetHashCode();
            hash ^= buffs_.GetHashCode();
            hash ^= effects_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            abilities_.WriteTo(output, _repeated_abilities_codec);
            units_.WriteTo(output, _repeated_units_codec);
            upgrades_.WriteTo(output, _repeated_upgrades_codec);
            buffs_.WriteTo(output, _repeated_buffs_codec);
            effects_.WriteTo(output, _repeated_effects_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += abilities_.CalculateSize(_repeated_abilities_codec);
            size += units_.CalculateSize(_repeated_units_codec);
            size += upgrades_.CalculateSize(_repeated_upgrades_codec);
            size += buffs_.CalculateSize(_repeated_buffs_codec);
            size += effects_.CalculateSize(_repeated_effects_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseData other)
        {
            if (other == null)
            {
                return;
            }
            abilities_.Add(other.abilities_);
            units_.Add(other.units_);
            upgrades_.Add(other.upgrades_);
            buffs_.Add(other.buffs_);
            effects_.Add(other.effects_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            abilities_.AddEntriesFrom(input, _repeated_abilities_codec);
                            break;
                        }
                    case 18:
                        {
                            units_.AddEntriesFrom(input, _repeated_units_codec);
                            break;
                        }
                    case 26:
                        {
                            upgrades_.AddEntriesFrom(input, _repeated_upgrades_codec);
                            break;
                        }
                    case 34:
                        {
                            buffs_.AddEntriesFrom(input, _repeated_buffs_codec);
                            break;
                        }
                    case 42:
                        {
                            effects_.AddEntriesFrom(input, _repeated_effects_codec);
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    ///-----------------------------------------------------------------------------
    /// </summary>
    public sealed partial class RequestSaveReplay : pb::IMessage<RequestSaveReplay>
    {
        private static readonly pb::MessageParser<RequestSaveReplay> _parser = new pb::MessageParser<RequestSaveReplay>(() => new RequestSaveReplay());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestSaveReplay> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[35]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestSaveReplay()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestSaveReplay(RequestSaveReplay other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestSaveReplay Clone()
        {
            return new RequestSaveReplay(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestSaveReplay);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestSaveReplay other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestSaveReplay other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    public sealed partial class ResponseSaveReplay : pb::IMessage<ResponseSaveReplay>
    {
        private static readonly pb::MessageParser<ResponseSaveReplay> _parser = new pb::MessageParser<ResponseSaveReplay>(() => new ResponseSaveReplay());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseSaveReplay> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[36]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseSaveReplay()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseSaveReplay(ResponseSaveReplay other) : this()
        {
            data_ = other.data_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseSaveReplay Clone()
        {
            return new ResponseSaveReplay(this);
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 1;
        private readonly static pb::ByteString DataDefaultValue = pb::ByteString.Empty;

        private pb::ByteString data_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Data
        {
            get { return data_ ?? DataDefaultValue; }
            set
            {
                data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "data" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasData
        {
            get { return data_ != null; }
        }
        /// <summary>Clears the value of the "data" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData()
        {
            data_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseSaveReplay);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseSaveReplay other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Data != other.Data) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasData) hash ^= Data.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasData)
            {
                output.WriteRawTag(10);
                output.WriteBytes(Data);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasData)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseSaveReplay other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasData)
            {
                Data = other.Data;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Data = input.ReadBytes();
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    ///-----------------------------------------------------------------------------
    /// </summary>
    public sealed partial class RequestReplayInfo : pb::IMessage<RequestReplayInfo>
    {
        private static readonly pb::MessageParser<RequestReplayInfo> _parser = new pb::MessageParser<RequestReplayInfo>(() => new RequestReplayInfo());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestReplayInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[37]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestReplayInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestReplayInfo(RequestReplayInfo other) : this()
        {
            _hasBits0 = other._hasBits0;
            downloadData_ = other.downloadData_;
            switch (other.ReplayCase)
            {
                case ReplayOneofCase.ReplayPath:
                    ReplayPath = other.ReplayPath;
                    break;
                case ReplayOneofCase.ReplayData:
                    ReplayData = other.ReplayData;
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestReplayInfo Clone()
        {
            return new RequestReplayInfo(this);
        }

        /// <summary>Field number for the "replay_path" field.</summary>
        public const int ReplayPathFieldNumber = 1;
        /// <summary>
        /// Limitation: might fail if the replay file is currently loaded.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ReplayPath
        {
            get { return HasReplayPath ? (string)replay_ : ""; }
            set
            {
                replay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                replayCase_ = ReplayOneofCase.ReplayPath;
            }
        }
        /// <summary>Gets whether the "replay_path" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasReplayPath
        {
            get { return replayCase_ == ReplayOneofCase.ReplayPath; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "replay_path" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearReplayPath()
        {
            if (HasReplayPath)
            {
                ClearReplay();
            }
        }

        /// <summary>Field number for the "replay_data" field.</summary>
        public const int ReplayDataFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString ReplayData
        {
            get { return HasReplayData ? (pb::ByteString)replay_ : pb::ByteString.Empty; }
            set
            {
                replay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                replayCase_ = ReplayOneofCase.ReplayData;
            }
        }
        /// <summary>Gets whether the "replay_data" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasReplayData
        {
            get { return replayCase_ == ReplayOneofCase.ReplayData; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "replay_data" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearReplayData()
        {
            if (HasReplayData)
            {
                ClearReplay();
            }
        }

        /// <summary>Field number for the "download_data" field.</summary>
        public const int DownloadDataFieldNumber = 3;
        private readonly static bool DownloadDataDefaultValue = false;

        private bool downloadData_;
        /// <summary>
        /// Ensure the data and binary are downloaded if this is an old version replay.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DownloadData
        {
            get { if ((_hasBits0 & 1) != 0) { return downloadData_; } else { return DownloadDataDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                downloadData_ = value;
            }
        }
        /// <summary>Gets whether the "download_data" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDownloadData
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "download_data" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDownloadData()
        {
            _hasBits0 &= ~1;
        }

        private object replay_;
        /// <summary>Enum of possible cases for the "replay" oneof.</summary>
        public enum ReplayOneofCase
        {
            None = 0,
            ReplayPath = 1,
            ReplayData = 2,
        }
        private ReplayOneofCase replayCase_ = ReplayOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReplayOneofCase ReplayCase
        {
            get { return replayCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearReplay()
        {
            replayCase_ = ReplayOneofCase.None;
            replay_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestReplayInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestReplayInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ReplayPath != other.ReplayPath) return false;
            if (ReplayData != other.ReplayData) return false;
            if (DownloadData != other.DownloadData) return false;
            if (ReplayCase != other.ReplayCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasReplayPath) hash ^= ReplayPath.GetHashCode();
            if (HasReplayData) hash ^= ReplayData.GetHashCode();
            if (HasDownloadData) hash ^= DownloadData.GetHashCode();
            hash ^= (int)replayCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasReplayPath)
            {
                output.WriteRawTag(10);
                output.WriteString(ReplayPath);
            }
            if (HasReplayData)
            {
                output.WriteRawTag(18);
                output.WriteBytes(ReplayData);
            }
            if (HasDownloadData)
            {
                output.WriteRawTag(24);
                output.WriteBool(DownloadData);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasReplayPath)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ReplayPath);
            }
            if (HasReplayData)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(ReplayData);
            }
            if (HasDownloadData)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestReplayInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasDownloadData)
            {
                DownloadData = other.DownloadData;
            }
            switch (other.ReplayCase)
            {
                case ReplayOneofCase.ReplayPath:
                    ReplayPath = other.ReplayPath;
                    break;
                case ReplayOneofCase.ReplayData:
                    ReplayData = other.ReplayData;
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            ReplayPath = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            ReplayData = input.ReadBytes();
                            break;
                        }
                    case 24:
                        {
                            DownloadData = input.ReadBool();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class PlayerInfoExtra : pb::IMessage<PlayerInfoExtra>
    {
        private static readonly pb::MessageParser<PlayerInfoExtra> _parser = new pb::MessageParser<PlayerInfoExtra>(() => new PlayerInfoExtra());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerInfoExtra> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[38]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerInfoExtra()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerInfoExtra(PlayerInfoExtra other) : this()
        {
            _hasBits0 = other._hasBits0;
            playerInfo_ = other.HasPlayerInfo ? other.playerInfo_.Clone() : null;
            playerResult_ = other.HasPlayerResult ? other.playerResult_.Clone() : null;
            playerMmr_ = other.playerMmr_;
            playerApm_ = other.playerApm_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerInfoExtra Clone()
        {
            return new PlayerInfoExtra(this);
        }

        /// <summary>Field number for the "player_info" field.</summary>
        public const int PlayerInfoFieldNumber = 1;
        private global::SC2APIProtocol.PlayerInfo playerInfo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.PlayerInfo PlayerInfo
        {
            get { return playerInfo_; }
            set
            {
                playerInfo_ = value;
            }
        }
        /// <summary>Gets whether the player_info field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerInfo
        {
            get { return playerInfo_ != null; }
        }
        /// <summary>Clears the value of the player_info field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerInfo()
        {
            playerInfo_ = null;
        }

        /// <summary>Field number for the "player_result" field.</summary>
        public const int PlayerResultFieldNumber = 2;
        private global::SC2APIProtocol.PlayerResult playerResult_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.PlayerResult PlayerResult
        {
            get { return playerResult_; }
            set
            {
                playerResult_ = value;
            }
        }
        /// <summary>Gets whether the player_result field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerResult
        {
            get { return playerResult_ != null; }
        }
        /// <summary>Clears the value of the player_result field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerResult()
        {
            playerResult_ = null;
        }

        /// <summary>Field number for the "player_mmr" field.</summary>
        public const int PlayerMmrFieldNumber = 3;
        private readonly static int PlayerMmrDefaultValue = 0;

        private int playerMmr_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerMmr
        {
            get { if ((_hasBits0 & 1) != 0) { return playerMmr_; } else { return PlayerMmrDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                playerMmr_ = value;
            }
        }
        /// <summary>Gets whether the "player_mmr" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerMmr
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "player_mmr" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerMmr()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "player_apm" field.</summary>
        public const int PlayerApmFieldNumber = 4;
        private readonly static int PlayerApmDefaultValue = 0;

        private int playerApm_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerApm
        {
            get { if ((_hasBits0 & 2) != 0) { return playerApm_; } else { return PlayerApmDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                playerApm_ = value;
            }
        }
        /// <summary>Gets whether the "player_apm" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerApm
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "player_apm" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerApm()
        {
            _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PlayerInfoExtra);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerInfoExtra other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
            if (!object.Equals(PlayerResult, other.PlayerResult)) return false;
            if (PlayerMmr != other.PlayerMmr) return false;
            if (PlayerApm != other.PlayerApm) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasPlayerInfo) hash ^= PlayerInfo.GetHashCode();
            if (HasPlayerResult) hash ^= PlayerResult.GetHashCode();
            if (HasPlayerMmr) hash ^= PlayerMmr.GetHashCode();
            if (HasPlayerApm) hash ^= PlayerApm.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasPlayerInfo)
            {
                output.WriteRawTag(10);
                output.WriteMessage(PlayerInfo);
            }
            if (HasPlayerResult)
            {
                output.WriteRawTag(18);
                output.WriteMessage(PlayerResult);
            }
            if (HasPlayerMmr)
            {
                output.WriteRawTag(24);
                output.WriteInt32(PlayerMmr);
            }
            if (HasPlayerApm)
            {
                output.WriteRawTag(32);
                output.WriteInt32(PlayerApm);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasPlayerInfo)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
            }
            if (HasPlayerResult)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerResult);
            }
            if (HasPlayerMmr)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerMmr);
            }
            if (HasPlayerApm)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerApm);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerInfoExtra other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasPlayerInfo)
            {
                if (!HasPlayerInfo)
                {
                    PlayerInfo = new global::SC2APIProtocol.PlayerInfo();
                }
                PlayerInfo.MergeFrom(other.PlayerInfo);
            }
            if (other.HasPlayerResult)
            {
                if (!HasPlayerResult)
                {
                    PlayerResult = new global::SC2APIProtocol.PlayerResult();
                }
                PlayerResult.MergeFrom(other.PlayerResult);
            }
            if (other.HasPlayerMmr)
            {
                PlayerMmr = other.PlayerMmr;
            }
            if (other.HasPlayerApm)
            {
                PlayerApm = other.PlayerApm;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (!HasPlayerInfo)
                            {
                                PlayerInfo = new global::SC2APIProtocol.PlayerInfo();
                            }
                            input.ReadMessage(PlayerInfo);
                            break;
                        }
                    case 18:
                        {
                            if (!HasPlayerResult)
                            {
                                PlayerResult = new global::SC2APIProtocol.PlayerResult();
                            }
                            input.ReadMessage(PlayerResult);
                            break;
                        }
                    case 24:
                        {
                            PlayerMmr = input.ReadInt32();
                            break;
                        }
                    case 32:
                        {
                            PlayerApm = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ResponseReplayInfo : pb::IMessage<ResponseReplayInfo>
    {
        private static readonly pb::MessageParser<ResponseReplayInfo> _parser = new pb::MessageParser<ResponseReplayInfo>(() => new ResponseReplayInfo());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseReplayInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[39]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseReplayInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseReplayInfo(ResponseReplayInfo other) : this()
        {
            _hasBits0 = other._hasBits0;
            mapName_ = other.mapName_;
            localMapPath_ = other.localMapPath_;
            playerInfo_ = other.playerInfo_.Clone();
            gameDurationLoops_ = other.gameDurationLoops_;
            gameDurationSeconds_ = other.gameDurationSeconds_;
            gameVersion_ = other.gameVersion_;
            dataVersion_ = other.dataVersion_;
            dataBuild_ = other.dataBuild_;
            baseBuild_ = other.baseBuild_;
            error_ = other.error_;
            errorDetails_ = other.errorDetails_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseReplayInfo Clone()
        {
            return new ResponseReplayInfo(this);
        }

        /// <summary>Field number for the "map_name" field.</summary>
        public const int MapNameFieldNumber = 1;
        private readonly static string MapNameDefaultValue = "";

        private string mapName_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MapName
        {
            get { return mapName_ ?? MapNameDefaultValue; }
            set
            {
                mapName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "map_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMapName
        {
            get { return mapName_ != null; }
        }
        /// <summary>Clears the value of the "map_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMapName()
        {
            mapName_ = null;
        }

        /// <summary>Field number for the "local_map_path" field.</summary>
        public const int LocalMapPathFieldNumber = 2;
        private readonly static string LocalMapPathDefaultValue = "";

        private string localMapPath_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LocalMapPath
        {
            get { return localMapPath_ ?? LocalMapPathDefaultValue; }
            set
            {
                localMapPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "local_map_path" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLocalMapPath
        {
            get { return localMapPath_ != null; }
        }
        /// <summary>Clears the value of the "local_map_path" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLocalMapPath()
        {
            localMapPath_ = null;
        }

        /// <summary>Field number for the "player_info" field.</summary>
        public const int PlayerInfoFieldNumber = 3;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.PlayerInfoExtra> _repeated_playerInfo_codec
            = pb::FieldCodec.ForMessage(26, global::SC2APIProtocol.PlayerInfoExtra.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.PlayerInfoExtra> playerInfo_ = new pbc::RepeatedField<global::SC2APIProtocol.PlayerInfoExtra>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.PlayerInfoExtra> PlayerInfo
        {
            get { return playerInfo_; }
        }

        /// <summary>Field number for the "game_duration_loops" field.</summary>
        public const int GameDurationLoopsFieldNumber = 4;
        private readonly static uint GameDurationLoopsDefaultValue = 0;

        private uint gameDurationLoops_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GameDurationLoops
        {
            get { if ((_hasBits0 & 1) != 0) { return gameDurationLoops_; } else { return GameDurationLoopsDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                gameDurationLoops_ = value;
            }
        }
        /// <summary>Gets whether the "game_duration_loops" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGameDurationLoops
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "game_duration_loops" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGameDurationLoops()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "game_duration_seconds" field.</summary>
        public const int GameDurationSecondsFieldNumber = 5;
        private readonly static float GameDurationSecondsDefaultValue = 0F;

        private float gameDurationSeconds_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float GameDurationSeconds
        {
            get { if ((_hasBits0 & 2) != 0) { return gameDurationSeconds_; } else { return GameDurationSecondsDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                gameDurationSeconds_ = value;
            }
        }
        /// <summary>Gets whether the "game_duration_seconds" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGameDurationSeconds
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "game_duration_seconds" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGameDurationSeconds()
        {
            _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "game_version" field.</summary>
        public const int GameVersionFieldNumber = 6;
        private readonly static string GameVersionDefaultValue = "";

        private string gameVersion_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GameVersion
        {
            get { return gameVersion_ ?? GameVersionDefaultValue; }
            set
            {
                gameVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "game_version" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGameVersion
        {
            get { return gameVersion_ != null; }
        }
        /// <summary>Clears the value of the "game_version" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGameVersion()
        {
            gameVersion_ = null;
        }

        /// <summary>Field number for the "data_version" field.</summary>
        public const int DataVersionFieldNumber = 11;
        private readonly static string DataVersionDefaultValue = "";

        private string dataVersion_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DataVersion
        {
            get { return dataVersion_ ?? DataVersionDefaultValue; }
            set
            {
                dataVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "data_version" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDataVersion
        {
            get { return dataVersion_ != null; }
        }
        /// <summary>Clears the value of the "data_version" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDataVersion()
        {
            dataVersion_ = null;
        }

        /// <summary>Field number for the "data_build" field.</summary>
        public const int DataBuildFieldNumber = 7;
        private readonly static uint DataBuildDefaultValue = 0;

        private uint dataBuild_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DataBuild
        {
            get { if ((_hasBits0 & 4) != 0) { return dataBuild_; } else { return DataBuildDefaultValue; } }
            set
            {
                _hasBits0 |= 4;
                dataBuild_ = value;
            }
        }
        /// <summary>Gets whether the "data_build" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDataBuild
        {
            get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "data_build" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDataBuild()
        {
            _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "base_build" field.</summary>
        public const int BaseBuildFieldNumber = 8;
        private readonly static uint BaseBuildDefaultValue = 0;

        private uint baseBuild_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BaseBuild
        {
            get { if ((_hasBits0 & 8) != 0) { return baseBuild_; } else { return BaseBuildDefaultValue; } }
            set
            {
                _hasBits0 |= 8;
                baseBuild_ = value;
            }
        }
        /// <summary>Gets whether the "base_build" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBaseBuild
        {
            get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "base_build" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBaseBuild()
        {
            _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "error" field.</summary>
        public const int ErrorFieldNumber = 9;
        private readonly static global::SC2APIProtocol.ResponseReplayInfo.Types.Error ErrorDefaultValue = global::SC2APIProtocol.ResponseReplayInfo.Types.Error.MissingReplay;

        private global::SC2APIProtocol.ResponseReplayInfo.Types.Error error_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ResponseReplayInfo.Types.Error Error
        {
            get { if ((_hasBits0 & 16) != 0) { return error_; } else { return ErrorDefaultValue; } }
            set
            {
                _hasBits0 |= 16;
                error_ = value;
            }
        }
        /// <summary>Gets whether the "error" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasError
        {
            get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "error" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearError()
        {
            _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "error_details" field.</summary>
        public const int ErrorDetailsFieldNumber = 10;
        private readonly static string ErrorDetailsDefaultValue = "";

        private string errorDetails_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ErrorDetails
        {
            get { return errorDetails_ ?? ErrorDetailsDefaultValue; }
            set
            {
                errorDetails_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "error_details" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasErrorDetails
        {
            get { return errorDetails_ != null; }
        }
        /// <summary>Clears the value of the "error_details" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearErrorDetails()
        {
            errorDetails_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseReplayInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseReplayInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (MapName != other.MapName) return false;
            if (LocalMapPath != other.LocalMapPath) return false;
            if (!playerInfo_.Equals(other.playerInfo_)) return false;
            if (GameDurationLoops != other.GameDurationLoops) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GameDurationSeconds, other.GameDurationSeconds)) return false;
            if (GameVersion != other.GameVersion) return false;
            if (DataVersion != other.DataVersion) return false;
            if (DataBuild != other.DataBuild) return false;
            if (BaseBuild != other.BaseBuild) return false;
            if (Error != other.Error) return false;
            if (ErrorDetails != other.ErrorDetails) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasMapName) hash ^= MapName.GetHashCode();
            if (HasLocalMapPath) hash ^= LocalMapPath.GetHashCode();
            hash ^= playerInfo_.GetHashCode();
            if (HasGameDurationLoops) hash ^= GameDurationLoops.GetHashCode();
            if (HasGameDurationSeconds) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GameDurationSeconds);
            if (HasGameVersion) hash ^= GameVersion.GetHashCode();
            if (HasDataVersion) hash ^= DataVersion.GetHashCode();
            if (HasDataBuild) hash ^= DataBuild.GetHashCode();
            if (HasBaseBuild) hash ^= BaseBuild.GetHashCode();
            if (HasError) hash ^= Error.GetHashCode();
            if (HasErrorDetails) hash ^= ErrorDetails.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasMapName)
            {
                output.WriteRawTag(10);
                output.WriteString(MapName);
            }
            if (HasLocalMapPath)
            {
                output.WriteRawTag(18);
                output.WriteString(LocalMapPath);
            }
            playerInfo_.WriteTo(output, _repeated_playerInfo_codec);
            if (HasGameDurationLoops)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(GameDurationLoops);
            }
            if (HasGameDurationSeconds)
            {
                output.WriteRawTag(45);
                output.WriteFloat(GameDurationSeconds);
            }
            if (HasGameVersion)
            {
                output.WriteRawTag(50);
                output.WriteString(GameVersion);
            }
            if (HasDataBuild)
            {
                output.WriteRawTag(56);
                output.WriteUInt32(DataBuild);
            }
            if (HasBaseBuild)
            {
                output.WriteRawTag(64);
                output.WriteUInt32(BaseBuild);
            }
            if (HasError)
            {
                output.WriteRawTag(72);
                output.WriteEnum((int)Error);
            }
            if (HasErrorDetails)
            {
                output.WriteRawTag(82);
                output.WriteString(ErrorDetails);
            }
            if (HasDataVersion)
            {
                output.WriteRawTag(90);
                output.WriteString(DataVersion);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasMapName)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MapName);
            }
            if (HasLocalMapPath)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(LocalMapPath);
            }
            size += playerInfo_.CalculateSize(_repeated_playerInfo_codec);
            if (HasGameDurationLoops)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameDurationLoops);
            }
            if (HasGameDurationSeconds)
            {
                size += 1 + 4;
            }
            if (HasGameVersion)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(GameVersion);
            }
            if (HasDataVersion)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(DataVersion);
            }
            if (HasDataBuild)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataBuild);
            }
            if (HasBaseBuild)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BaseBuild);
            }
            if (HasError)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Error);
            }
            if (HasErrorDetails)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorDetails);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseReplayInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasMapName)
            {
                MapName = other.MapName;
            }
            if (other.HasLocalMapPath)
            {
                LocalMapPath = other.LocalMapPath;
            }
            playerInfo_.Add(other.playerInfo_);
            if (other.HasGameDurationLoops)
            {
                GameDurationLoops = other.GameDurationLoops;
            }
            if (other.HasGameDurationSeconds)
            {
                GameDurationSeconds = other.GameDurationSeconds;
            }
            if (other.HasGameVersion)
            {
                GameVersion = other.GameVersion;
            }
            if (other.HasDataVersion)
            {
                DataVersion = other.DataVersion;
            }
            if (other.HasDataBuild)
            {
                DataBuild = other.DataBuild;
            }
            if (other.HasBaseBuild)
            {
                BaseBuild = other.BaseBuild;
            }
            if (other.HasError)
            {
                Error = other.Error;
            }
            if (other.HasErrorDetails)
            {
                ErrorDetails = other.ErrorDetails;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            MapName = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            LocalMapPath = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            playerInfo_.AddEntriesFrom(input, _repeated_playerInfo_codec);
                            break;
                        }
                    case 32:
                        {
                            GameDurationLoops = input.ReadUInt32();
                            break;
                        }
                    case 45:
                        {
                            GameDurationSeconds = input.ReadFloat();
                            break;
                        }
                    case 50:
                        {
                            GameVersion = input.ReadString();
                            break;
                        }
                    case 56:
                        {
                            DataBuild = input.ReadUInt32();
                            break;
                        }
                    case 64:
                        {
                            BaseBuild = input.ReadUInt32();
                            break;
                        }
                    case 72:
                        {
                            Error = (global::SC2APIProtocol.ResponseReplayInfo.Types.Error)input.ReadEnum();
                            break;
                        }
                    case 82:
                        {
                            ErrorDetails = input.ReadString();
                            break;
                        }
                    case 90:
                        {
                            DataVersion = input.ReadString();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ResponseReplayInfo message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum Error
            {
                [pbr::OriginalName("MissingReplay")] MissingReplay = 1,
                [pbr::OriginalName("InvalidReplayPath")] InvalidReplayPath = 2,
                [pbr::OriginalName("InvalidReplayData")] InvalidReplayData = 3,
                [pbr::OriginalName("ParsingError")] ParsingError = 4,
                [pbr::OriginalName("DownloadError")] DownloadError = 5,
            }

        }
        #endregion

    }

    /// <summary>
    ///-----------------------------------------------------------------------------
    /// </summary>
    public sealed partial class RequestAvailableMaps : pb::IMessage<RequestAvailableMaps>
    {
        private static readonly pb::MessageParser<RequestAvailableMaps> _parser = new pb::MessageParser<RequestAvailableMaps>(() => new RequestAvailableMaps());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestAvailableMaps> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[40]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestAvailableMaps()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestAvailableMaps(RequestAvailableMaps other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestAvailableMaps Clone()
        {
            return new RequestAvailableMaps(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestAvailableMaps);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestAvailableMaps other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestAvailableMaps other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    /// <summary>
    /// This will only contain locally cached BattleNet maps.
    /// To download all ladder maps, log in and queue into a ladder match.
    /// To download any other map, play a custom game on that map.
    /// </summary>
    public sealed partial class ResponseAvailableMaps : pb::IMessage<ResponseAvailableMaps>
    {
        private static readonly pb::MessageParser<ResponseAvailableMaps> _parser = new pb::MessageParser<ResponseAvailableMaps>(() => new ResponseAvailableMaps());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseAvailableMaps> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[41]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseAvailableMaps()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseAvailableMaps(ResponseAvailableMaps other) : this()
        {
            localMapPaths_ = other.localMapPaths_.Clone();
            battlenetMapNames_ = other.battlenetMapNames_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseAvailableMaps Clone()
        {
            return new ResponseAvailableMaps(this);
        }

        /// <summary>Field number for the "local_map_paths" field.</summary>
        public const int LocalMapPathsFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_localMapPaths_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> localMapPaths_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// All the maps in the "Maps/" directory.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> LocalMapPaths
        {
            get { return localMapPaths_; }
        }

        /// <summary>Field number for the "battlenet_map_names" field.</summary>
        public const int BattlenetMapNamesFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _repeated_battlenetMapNames_codec
            = pb::FieldCodec.ForString(18);
        private readonly pbc::RepeatedField<string> battlenetMapNames_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// All the maps in the BattleNet cache.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> BattlenetMapNames
        {
            get { return battlenetMapNames_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseAvailableMaps);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseAvailableMaps other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!localMapPaths_.Equals(other.localMapPaths_)) return false;
            if (!battlenetMapNames_.Equals(other.battlenetMapNames_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= localMapPaths_.GetHashCode();
            hash ^= battlenetMapNames_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            localMapPaths_.WriteTo(output, _repeated_localMapPaths_codec);
            battlenetMapNames_.WriteTo(output, _repeated_battlenetMapNames_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += localMapPaths_.CalculateSize(_repeated_localMapPaths_codec);
            size += battlenetMapNames_.CalculateSize(_repeated_battlenetMapNames_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseAvailableMaps other)
        {
            if (other == null)
            {
                return;
            }
            localMapPaths_.Add(other.localMapPaths_);
            battlenetMapNames_.Add(other.battlenetMapNames_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            localMapPaths_.AddEntriesFrom(input, _repeated_localMapPaths_codec);
                            break;
                        }
                    case 18:
                        {
                            battlenetMapNames_.AddEntriesFrom(input, _repeated_battlenetMapNames_codec);
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    ///-----------------------------------------------------------------------------
    /// Copies map data into the path specified.
    /// </summary>
    public sealed partial class RequestSaveMap : pb::IMessage<RequestSaveMap>
    {
        private static readonly pb::MessageParser<RequestSaveMap> _parser = new pb::MessageParser<RequestSaveMap>(() => new RequestSaveMap());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestSaveMap> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[42]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestSaveMap()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestSaveMap(RequestSaveMap other) : this()
        {
            mapPath_ = other.mapPath_;
            mapData_ = other.mapData_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestSaveMap Clone()
        {
            return new RequestSaveMap(this);
        }

        /// <summary>Field number for the "map_path" field.</summary>
        public const int MapPathFieldNumber = 1;
        private readonly static string MapPathDefaultValue = "";

        private string mapPath_;
        /// <summary>
        /// Path the game process will write to, relative to the temp directory. (260 character max)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MapPath
        {
            get { return mapPath_ ?? MapPathDefaultValue; }
            set
            {
                mapPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "map_path" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMapPath
        {
            get { return mapPath_ != null; }
        }
        /// <summary>Clears the value of the "map_path" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMapPath()
        {
            mapPath_ = null;
        }

        /// <summary>Field number for the "map_data" field.</summary>
        public const int MapDataFieldNumber = 2;
        private readonly static pb::ByteString MapDataDefaultValue = pb::ByteString.Empty;

        private pb::ByteString mapData_;
        /// <summary>
        /// Binary map data of a .SC2Map.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString MapData
        {
            get { return mapData_ ?? MapDataDefaultValue; }
            set
            {
                mapData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "map_data" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMapData
        {
            get { return mapData_ != null; }
        }
        /// <summary>Clears the value of the "map_data" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMapData()
        {
            mapData_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestSaveMap);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestSaveMap other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (MapPath != other.MapPath) return false;
            if (MapData != other.MapData) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasMapPath) hash ^= MapPath.GetHashCode();
            if (HasMapData) hash ^= MapData.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasMapPath)
            {
                output.WriteRawTag(10);
                output.WriteString(MapPath);
            }
            if (HasMapData)
            {
                output.WriteRawTag(18);
                output.WriteBytes(MapData);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasMapPath)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MapPath);
            }
            if (HasMapData)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(MapData);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestSaveMap other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasMapPath)
            {
                MapPath = other.MapPath;
            }
            if (other.HasMapData)
            {
                MapData = other.MapData;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            MapPath = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            MapData = input.ReadBytes();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ResponseSaveMap : pb::IMessage<ResponseSaveMap>
    {
        private static readonly pb::MessageParser<ResponseSaveMap> _parser = new pb::MessageParser<ResponseSaveMap>(() => new ResponseSaveMap());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseSaveMap> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[43]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseSaveMap()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseSaveMap(ResponseSaveMap other) : this()
        {
            _hasBits0 = other._hasBits0;
            error_ = other.error_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseSaveMap Clone()
        {
            return new ResponseSaveMap(this);
        }

        /// <summary>Field number for the "error" field.</summary>
        public const int ErrorFieldNumber = 1;
        private readonly static global::SC2APIProtocol.ResponseSaveMap.Types.Error ErrorDefaultValue = global::SC2APIProtocol.ResponseSaveMap.Types.Error.InvalidMapData;

        private global::SC2APIProtocol.ResponseSaveMap.Types.Error error_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ResponseSaveMap.Types.Error Error
        {
            get { if ((_hasBits0 & 1) != 0) { return error_; } else { return ErrorDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                error_ = value;
            }
        }
        /// <summary>Gets whether the "error" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasError
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "error" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearError()
        {
            _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseSaveMap);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseSaveMap other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Error != other.Error) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasError) hash ^= Error.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasError)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Error);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasError)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Error);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseSaveMap other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasError)
            {
                Error = other.Error;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Error = (global::SC2APIProtocol.ResponseSaveMap.Types.Error)input.ReadEnum();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ResponseSaveMap message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum Error
            {
                [pbr::OriginalName("InvalidMapData")] InvalidMapData = 1,
            }

        }
        #endregion

    }

    /// <summary>
    ///-----------------------------------------------------------------------------
    /// </summary>
    public sealed partial class RequestPing : pb::IMessage<RequestPing>
    {
        private static readonly pb::MessageParser<RequestPing> _parser = new pb::MessageParser<RequestPing>(() => new RequestPing());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestPing> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[44]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestPing()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestPing(RequestPing other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestPing Clone()
        {
            return new RequestPing(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestPing);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestPing other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestPing other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    public sealed partial class ResponsePing : pb::IMessage<ResponsePing>
    {
        private static readonly pb::MessageParser<ResponsePing> _parser = new pb::MessageParser<ResponsePing>(() => new ResponsePing());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponsePing> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[45]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponsePing()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponsePing(ResponsePing other) : this()
        {
            _hasBits0 = other._hasBits0;
            gameVersion_ = other.gameVersion_;
            dataVersion_ = other.dataVersion_;
            dataBuild_ = other.dataBuild_;
            baseBuild_ = other.baseBuild_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponsePing Clone()
        {
            return new ResponsePing(this);
        }

        /// <summary>Field number for the "game_version" field.</summary>
        public const int GameVersionFieldNumber = 1;
        private readonly static string GameVersionDefaultValue = "";

        private string gameVersion_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GameVersion
        {
            get { return gameVersion_ ?? GameVersionDefaultValue; }
            set
            {
                gameVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "game_version" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGameVersion
        {
            get { return gameVersion_ != null; }
        }
        /// <summary>Clears the value of the "game_version" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGameVersion()
        {
            gameVersion_ = null;
        }

        /// <summary>Field number for the "data_version" field.</summary>
        public const int DataVersionFieldNumber = 2;
        private readonly static string DataVersionDefaultValue = "";

        private string dataVersion_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DataVersion
        {
            get { return dataVersion_ ?? DataVersionDefaultValue; }
            set
            {
                dataVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "data_version" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDataVersion
        {
            get { return dataVersion_ != null; }
        }
        /// <summary>Clears the value of the "data_version" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDataVersion()
        {
            dataVersion_ = null;
        }

        /// <summary>Field number for the "data_build" field.</summary>
        public const int DataBuildFieldNumber = 3;
        private readonly static uint DataBuildDefaultValue = 0;

        private uint dataBuild_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DataBuild
        {
            get { if ((_hasBits0 & 1) != 0) { return dataBuild_; } else { return DataBuildDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                dataBuild_ = value;
            }
        }
        /// <summary>Gets whether the "data_build" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDataBuild
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "data_build" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDataBuild()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "base_build" field.</summary>
        public const int BaseBuildFieldNumber = 4;
        private readonly static uint BaseBuildDefaultValue = 0;

        private uint baseBuild_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BaseBuild
        {
            get { if ((_hasBits0 & 2) != 0) { return baseBuild_; } else { return BaseBuildDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                baseBuild_ = value;
            }
        }
        /// <summary>Gets whether the "base_build" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBaseBuild
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "base_build" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBaseBuild()
        {
            _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponsePing);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponsePing other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (GameVersion != other.GameVersion) return false;
            if (DataVersion != other.DataVersion) return false;
            if (DataBuild != other.DataBuild) return false;
            if (BaseBuild != other.BaseBuild) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasGameVersion) hash ^= GameVersion.GetHashCode();
            if (HasDataVersion) hash ^= DataVersion.GetHashCode();
            if (HasDataBuild) hash ^= DataBuild.GetHashCode();
            if (HasBaseBuild) hash ^= BaseBuild.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasGameVersion)
            {
                output.WriteRawTag(10);
                output.WriteString(GameVersion);
            }
            if (HasDataVersion)
            {
                output.WriteRawTag(18);
                output.WriteString(DataVersion);
            }
            if (HasDataBuild)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(DataBuild);
            }
            if (HasBaseBuild)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(BaseBuild);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasGameVersion)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(GameVersion);
            }
            if (HasDataVersion)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(DataVersion);
            }
            if (HasDataBuild)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataBuild);
            }
            if (HasBaseBuild)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BaseBuild);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponsePing other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasGameVersion)
            {
                GameVersion = other.GameVersion;
            }
            if (other.HasDataVersion)
            {
                DataVersion = other.DataVersion;
            }
            if (other.HasDataBuild)
            {
                DataBuild = other.DataBuild;
            }
            if (other.HasBaseBuild)
            {
                BaseBuild = other.BaseBuild;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            GameVersion = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            DataVersion = input.ReadString();
                            break;
                        }
                    case 24:
                        {
                            DataBuild = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            BaseBuild = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    ///-----------------------------------------------------------------------------
    /// </summary>
    public sealed partial class RequestDebug : pb::IMessage<RequestDebug>
    {
        private static readonly pb::MessageParser<RequestDebug> _parser = new pb::MessageParser<RequestDebug>(() => new RequestDebug());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestDebug> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[46]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestDebug()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestDebug(RequestDebug other) : this()
        {
            debug_ = other.debug_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestDebug Clone()
        {
            return new RequestDebug(this);
        }

        /// <summary>Field number for the "debug" field.</summary>
        public const int DebugFieldNumber = 1;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.DebugCommand> _repeated_debug_codec
            = pb::FieldCodec.ForMessage(10, global::SC2APIProtocol.DebugCommand.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.DebugCommand> debug_ = new pbc::RepeatedField<global::SC2APIProtocol.DebugCommand>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.DebugCommand> Debug
        {
            get { return debug_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RequestDebug);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestDebug other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!debug_.Equals(other.debug_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= debug_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            debug_.WriteTo(output, _repeated_debug_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += debug_.CalculateSize(_repeated_debug_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestDebug other)
        {
            if (other == null)
            {
                return;
            }
            debug_.Add(other.debug_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            debug_.AddEntriesFrom(input, _repeated_debug_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ResponseDebug : pb::IMessage<ResponseDebug>
    {
        private static readonly pb::MessageParser<ResponseDebug> _parser = new pb::MessageParser<ResponseDebug>(() => new ResponseDebug());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResponseDebug> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[47]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseDebug()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseDebug(ResponseDebug other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResponseDebug Clone()
        {
            return new ResponseDebug(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResponseDebug);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResponseDebug other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResponseDebug other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    public sealed partial class PlayerSetup : pb::IMessage<PlayerSetup>
    {
        private static readonly pb::MessageParser<PlayerSetup> _parser = new pb::MessageParser<PlayerSetup>(() => new PlayerSetup());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerSetup> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[48]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerSetup()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerSetup(PlayerSetup other) : this()
        {
            _hasBits0 = other._hasBits0;
            type_ = other.type_;
            race_ = other.race_;
            difficulty_ = other.difficulty_;
            playerName_ = other.playerName_;
            aiBuild_ = other.aiBuild_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerSetup Clone()
        {
            return new PlayerSetup(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private readonly static global::SC2APIProtocol.PlayerType TypeDefaultValue = global::SC2APIProtocol.PlayerType.Participant;

        private global::SC2APIProtocol.PlayerType type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.PlayerType Type
        {
            get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                type_ = value;
            }
        }
        /// <summary>Gets whether the "type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasType
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "race" field.</summary>
        public const int RaceFieldNumber = 2;
        private readonly static global::SC2APIProtocol.Race RaceDefaultValue = global::SC2APIProtocol.Race.NoRace;

        private global::SC2APIProtocol.Race race_;
        /// <summary>
        /// Only used for a computer player.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.Race Race
        {
            get { if ((_hasBits0 & 2) != 0) { return race_; } else { return RaceDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                race_ = value;
            }
        }
        /// <summary>Gets whether the "race" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRace
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "race" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRace()
        {
            _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "difficulty" field.</summary>
        public const int DifficultyFieldNumber = 3;
        private readonly static global::SC2APIProtocol.Difficulty DifficultyDefaultValue = global::SC2APIProtocol.Difficulty.VeryEasy;

        private global::SC2APIProtocol.Difficulty difficulty_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.Difficulty Difficulty
        {
            get { if ((_hasBits0 & 4) != 0) { return difficulty_; } else { return DifficultyDefaultValue; } }
            set
            {
                _hasBits0 |= 4;
                difficulty_ = value;
            }
        }
        /// <summary>Gets whether the "difficulty" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDifficulty
        {
            get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "difficulty" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDifficulty()
        {
            _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "player_name" field.</summary>
        public const int PlayerNameFieldNumber = 4;
        private readonly static string PlayerNameDefaultValue = "";

        private string playerName_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PlayerName
        {
            get { return playerName_ ?? PlayerNameDefaultValue; }
            set
            {
                playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "player_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerName
        {
            get { return playerName_ != null; }
        }
        /// <summary>Clears the value of the "player_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerName()
        {
            playerName_ = null;
        }

        /// <summary>Field number for the "ai_build" field.</summary>
        public const int AiBuildFieldNumber = 5;
        private readonly static global::SC2APIProtocol.AIBuild AiBuildDefaultValue = global::SC2APIProtocol.AIBuild.RandomBuild;

        private global::SC2APIProtocol.AIBuild aiBuild_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.AIBuild AiBuild
        {
            get { if ((_hasBits0 & 8) != 0) { return aiBuild_; } else { return AiBuildDefaultValue; } }
            set
            {
                _hasBits0 |= 8;
                aiBuild_ = value;
            }
        }
        /// <summary>Gets whether the "ai_build" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAiBuild
        {
            get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "ai_build" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAiBuild()
        {
            _hasBits0 &= ~8;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PlayerSetup);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerSetup other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Type != other.Type) return false;
            if (Race != other.Race) return false;
            if (Difficulty != other.Difficulty) return false;
            if (PlayerName != other.PlayerName) return false;
            if (AiBuild != other.AiBuild) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasType) hash ^= Type.GetHashCode();
            if (HasRace) hash ^= Race.GetHashCode();
            if (HasDifficulty) hash ^= Difficulty.GetHashCode();
            if (HasPlayerName) hash ^= PlayerName.GetHashCode();
            if (HasAiBuild) hash ^= AiBuild.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasType)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Type);
            }
            if (HasRace)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Race);
            }
            if (HasDifficulty)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)Difficulty);
            }
            if (HasPlayerName)
            {
                output.WriteRawTag(34);
                output.WriteString(PlayerName);
            }
            if (HasAiBuild)
            {
                output.WriteRawTag(40);
                output.WriteEnum((int)AiBuild);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasType)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (HasRace)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Race);
            }
            if (HasDifficulty)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Difficulty);
            }
            if (HasPlayerName)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
            }
            if (HasAiBuild)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)AiBuild);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerSetup other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasType)
            {
                Type = other.Type;
            }
            if (other.HasRace)
            {
                Race = other.Race;
            }
            if (other.HasDifficulty)
            {
                Difficulty = other.Difficulty;
            }
            if (other.HasPlayerName)
            {
                PlayerName = other.PlayerName;
            }
            if (other.HasAiBuild)
            {
                AiBuild = other.AiBuild;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Type = (global::SC2APIProtocol.PlayerType)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            Race = (global::SC2APIProtocol.Race)input.ReadEnum();
                            break;
                        }
                    case 24:
                        {
                            Difficulty = (global::SC2APIProtocol.Difficulty)input.ReadEnum();
                            break;
                        }
                    case 34:
                        {
                            PlayerName = input.ReadString();
                            break;
                        }
                    case 40:
                        {
                            AiBuild = (global::SC2APIProtocol.AIBuild)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SpatialCameraSetup : pb::IMessage<SpatialCameraSetup>
    {
        private static readonly pb::MessageParser<SpatialCameraSetup> _parser = new pb::MessageParser<SpatialCameraSetup>(() => new SpatialCameraSetup());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SpatialCameraSetup> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[49]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpatialCameraSetup()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpatialCameraSetup(SpatialCameraSetup other) : this()
        {
            _hasBits0 = other._hasBits0;
            resolution_ = other.HasResolution ? other.resolution_.Clone() : null;
            minimapResolution_ = other.HasMinimapResolution ? other.minimapResolution_.Clone() : null;
            width_ = other.width_;
            cropToPlayableArea_ = other.cropToPlayableArea_;
            allowCheatingLayers_ = other.allowCheatingLayers_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpatialCameraSetup Clone()
        {
            return new SpatialCameraSetup(this);
        }

        /// <summary>Field number for the "resolution" field.</summary>
        public const int ResolutionFieldNumber = 2;
        private global::SC2APIProtocol.Size2DI resolution_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.Size2DI Resolution
        {
            get { return resolution_; }
            set
            {
                resolution_ = value;
            }
        }
        /// <summary>Gets whether the resolution field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasResolution
        {
            get { return resolution_ != null; }
        }
        /// <summary>Clears the value of the resolution field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearResolution()
        {
            resolution_ = null;
        }

        /// <summary>Field number for the "minimap_resolution" field.</summary>
        public const int MinimapResolutionFieldNumber = 3;
        private global::SC2APIProtocol.Size2DI minimapResolution_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.Size2DI MinimapResolution
        {
            get { return minimapResolution_; }
            set
            {
                minimapResolution_ = value;
            }
        }
        /// <summary>Gets whether the minimap_resolution field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMinimapResolution
        {
            get { return minimapResolution_ != null; }
        }
        /// <summary>Clears the value of the minimap_resolution field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMinimapResolution()
        {
            minimapResolution_ = null;
        }

        /// <summary>Field number for the "width" field.</summary>
        public const int WidthFieldNumber = 1;
        private readonly static float WidthDefaultValue = 0F;

        private float width_;
        /// <summary>
        /// Below are only relevant for feature layers.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Width
        {
            get { if ((_hasBits0 & 1) != 0) { return width_; } else { return WidthDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                width_ = value;
            }
        }
        /// <summary>Gets whether the "width" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasWidth
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "width" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearWidth()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "crop_to_playable_area" field.</summary>
        public const int CropToPlayableAreaFieldNumber = 4;
        private readonly static bool CropToPlayableAreaDefaultValue = false;

        private bool cropToPlayableArea_;
        /// <summary>
        /// Crop minimap to the playable area.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool CropToPlayableArea
        {
            get { if ((_hasBits0 & 2) != 0) { return cropToPlayableArea_; } else { return CropToPlayableAreaDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                cropToPlayableArea_ = value;
            }
        }
        /// <summary>Gets whether the "crop_to_playable_area" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCropToPlayableArea
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "crop_to_playable_area" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCropToPlayableArea()
        {
            _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "allow_cheating_layers" field.</summary>
        public const int AllowCheatingLayersFieldNumber = 5;
        private readonly static bool AllowCheatingLayersDefaultValue = false;

        private bool allowCheatingLayers_;
        /// <summary>
        /// Return unit_type on the minimap, and potentially other cheating layers.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool AllowCheatingLayers
        {
            get { if ((_hasBits0 & 4) != 0) { return allowCheatingLayers_; } else { return AllowCheatingLayersDefaultValue; } }
            set
            {
                _hasBits0 |= 4;
                allowCheatingLayers_ = value;
            }
        }
        /// <summary>Gets whether the "allow_cheating_layers" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAllowCheatingLayers
        {
            get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "allow_cheating_layers" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAllowCheatingLayers()
        {
            _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SpatialCameraSetup);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SpatialCameraSetup other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Resolution, other.Resolution)) return false;
            if (!object.Equals(MinimapResolution, other.MinimapResolution)) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Width, other.Width)) return false;
            if (CropToPlayableArea != other.CropToPlayableArea) return false;
            if (AllowCheatingLayers != other.AllowCheatingLayers) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasResolution) hash ^= Resolution.GetHashCode();
            if (HasMinimapResolution) hash ^= MinimapResolution.GetHashCode();
            if (HasWidth) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Width);
            if (HasCropToPlayableArea) hash ^= CropToPlayableArea.GetHashCode();
            if (HasAllowCheatingLayers) hash ^= AllowCheatingLayers.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasWidth)
            {
                output.WriteRawTag(13);
                output.WriteFloat(Width);
            }
            if (HasResolution)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Resolution);
            }
            if (HasMinimapResolution)
            {
                output.WriteRawTag(26);
                output.WriteMessage(MinimapResolution);
            }
            if (HasCropToPlayableArea)
            {
                output.WriteRawTag(32);
                output.WriteBool(CropToPlayableArea);
            }
            if (HasAllowCheatingLayers)
            {
                output.WriteRawTag(40);
                output.WriteBool(AllowCheatingLayers);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasResolution)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resolution);
            }
            if (HasMinimapResolution)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinimapResolution);
            }
            if (HasWidth)
            {
                size += 1 + 4;
            }
            if (HasCropToPlayableArea)
            {
                size += 1 + 1;
            }
            if (HasAllowCheatingLayers)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SpatialCameraSetup other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasResolution)
            {
                if (!HasResolution)
                {
                    Resolution = new global::SC2APIProtocol.Size2DI();
                }
                Resolution.MergeFrom(other.Resolution);
            }
            if (other.HasMinimapResolution)
            {
                if (!HasMinimapResolution)
                {
                    MinimapResolution = new global::SC2APIProtocol.Size2DI();
                }
                MinimapResolution.MergeFrom(other.MinimapResolution);
            }
            if (other.HasWidth)
            {
                Width = other.Width;
            }
            if (other.HasCropToPlayableArea)
            {
                CropToPlayableArea = other.CropToPlayableArea;
            }
            if (other.HasAllowCheatingLayers)
            {
                AllowCheatingLayers = other.AllowCheatingLayers;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 13:
                        {
                            Width = input.ReadFloat();
                            break;
                        }
                    case 18:
                        {
                            if (!HasResolution)
                            {
                                Resolution = new global::SC2APIProtocol.Size2DI();
                            }
                            input.ReadMessage(Resolution);
                            break;
                        }
                    case 26:
                        {
                            if (!HasMinimapResolution)
                            {
                                MinimapResolution = new global::SC2APIProtocol.Size2DI();
                            }
                            input.ReadMessage(MinimapResolution);
                            break;
                        }
                    case 32:
                        {
                            CropToPlayableArea = input.ReadBool();
                            break;
                        }
                    case 40:
                        {
                            AllowCheatingLayers = input.ReadBool();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class InterfaceOptions : pb::IMessage<InterfaceOptions>
    {
        private static readonly pb::MessageParser<InterfaceOptions> _parser = new pb::MessageParser<InterfaceOptions>(() => new InterfaceOptions());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InterfaceOptions> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[50]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InterfaceOptions()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InterfaceOptions(InterfaceOptions other) : this()
        {
            _hasBits0 = other._hasBits0;
            raw_ = other.raw_;
            score_ = other.score_;
            featureLayer_ = other.HasFeatureLayer ? other.featureLayer_.Clone() : null;
            render_ = other.HasRender ? other.render_.Clone() : null;
            showCloaked_ = other.showCloaked_;
            showBurrowedShadows_ = other.showBurrowedShadows_;
            showPlaceholders_ = other.showPlaceholders_;
            rawAffectsSelection_ = other.rawAffectsSelection_;
            rawCropToPlayableArea_ = other.rawCropToPlayableArea_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InterfaceOptions Clone()
        {
            return new InterfaceOptions(this);
        }

        /// <summary>Field number for the "raw" field.</summary>
        public const int RawFieldNumber = 1;
        private readonly static bool RawDefaultValue = false;

        private bool raw_;
        /// <summary>
        /// Interface options
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Raw
        {
            get { if ((_hasBits0 & 1) != 0) { return raw_; } else { return RawDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                raw_ = value;
            }
        }
        /// <summary>Gets whether the "raw" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRaw
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "raw" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRaw()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "score" field.</summary>
        public const int ScoreFieldNumber = 2;
        private readonly static bool ScoreDefaultValue = false;

        private bool score_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Score
        {
            get { if ((_hasBits0 & 2) != 0) { return score_; } else { return ScoreDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                score_ = value;
            }
        }
        /// <summary>Gets whether the "score" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasScore
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "score" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearScore()
        {
            _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "feature_layer" field.</summary>
        public const int FeatureLayerFieldNumber = 3;
        private global::SC2APIProtocol.SpatialCameraSetup featureLayer_;
        /// <summary>
        /// Omit to disable.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.SpatialCameraSetup FeatureLayer
        {
            get { return featureLayer_; }
            set
            {
                featureLayer_ = value;
            }
        }
        /// <summary>Gets whether the feature_layer field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasFeatureLayer
        {
            get { return featureLayer_ != null; }
        }
        /// <summary>Clears the value of the feature_layer field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFeatureLayer()
        {
            featureLayer_ = null;
        }

        /// <summary>Field number for the "render" field.</summary>
        public const int RenderFieldNumber = 4;
        private global::SC2APIProtocol.SpatialCameraSetup render_;
        /// <summary>
        /// Omit to disable.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.SpatialCameraSetup Render
        {
            get { return render_; }
            set
            {
                render_ = value;
            }
        }
        /// <summary>Gets whether the render field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRender
        {
            get { return render_ != null; }
        }
        /// <summary>Clears the value of the render field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRender()
        {
            render_ = null;
        }

        /// <summary>Field number for the "show_cloaked" field.</summary>
        public const int ShowCloakedFieldNumber = 5;
        private readonly static bool ShowCloakedDefaultValue = false;

        private bool showCloaked_;
        /// <summary>
        /// By default cloaked units are completely hidden. This shows some details.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ShowCloaked
        {
            get { if ((_hasBits0 & 4) != 0) { return showCloaked_; } else { return ShowCloakedDefaultValue; } }
            set
            {
                _hasBits0 |= 4;
                showCloaked_ = value;
            }
        }
        /// <summary>Gets whether the "show_cloaked" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasShowCloaked
        {
            get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "show_cloaked" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearShowCloaked()
        {
            _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "show_burrowed_shadows" field.</summary>
        public const int ShowBurrowedShadowsFieldNumber = 9;
        private readonly static bool ShowBurrowedShadowsDefaultValue = false;

        private bool showBurrowedShadows_;
        /// <summary>
        /// By default burrowed units are completely hidden. This shows some details for those that produce a shadow.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ShowBurrowedShadows
        {
            get { if ((_hasBits0 & 64) != 0) { return showBurrowedShadows_; } else { return ShowBurrowedShadowsDefaultValue; } }
            set
            {
                _hasBits0 |= 64;
                showBurrowedShadows_ = value;
            }
        }
        /// <summary>Gets whether the "show_burrowed_shadows" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasShowBurrowedShadows
        {
            get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "show_burrowed_shadows" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearShowBurrowedShadows()
        {
            _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "show_placeholders" field.</summary>
        public const int ShowPlaceholdersFieldNumber = 8;
        private readonly static bool ShowPlaceholdersDefaultValue = false;

        private bool showPlaceholders_;
        /// <summary>
        /// Return placeholder units (buildings to be constructed), both for raw and feature layers.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ShowPlaceholders
        {
            get { if ((_hasBits0 & 32) != 0) { return showPlaceholders_; } else { return ShowPlaceholdersDefaultValue; } }
            set
            {
                _hasBits0 |= 32;
                showPlaceholders_ = value;
            }
        }
        /// <summary>Gets whether the "show_placeholders" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasShowPlaceholders
        {
            get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "show_placeholders" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearShowPlaceholders()
        {
            _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "raw_affects_selection" field.</summary>
        public const int RawAffectsSelectionFieldNumber = 6;
        private readonly static bool RawAffectsSelectionDefaultValue = false;

        private bool rawAffectsSelection_;
        /// <summary>
        /// By default raw actions select, act and revert the selection. This is useful
        /// if you're playing simultaneously with the agent so it doesn't steal your
        /// selection. This inflates APM (due to deselect) and makes the actions hard
        /// to follow in a replay. Setting this to true will cause raw actions to do
        /// select, act, but not revert the selection.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool RawAffectsSelection
        {
            get { if ((_hasBits0 & 8) != 0) { return rawAffectsSelection_; } else { return RawAffectsSelectionDefaultValue; } }
            set
            {
                _hasBits0 |= 8;
                rawAffectsSelection_ = value;
            }
        }
        /// <summary>Gets whether the "raw_affects_selection" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRawAffectsSelection
        {
            get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "raw_affects_selection" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRawAffectsSelection()
        {
            _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "raw_crop_to_playable_area" field.</summary>
        public const int RawCropToPlayableAreaFieldNumber = 7;
        private readonly static bool RawCropToPlayableAreaDefaultValue = false;

        private bool rawCropToPlayableArea_;
        /// <summary>
        /// Changes the coordinates in raw.proto to be relative to the playable area.
        /// The map_size and playable_area will be the diagonal of the real playable area.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool RawCropToPlayableArea
        {
            get { if ((_hasBits0 & 16) != 0) { return rawCropToPlayableArea_; } else { return RawCropToPlayableAreaDefaultValue; } }
            set
            {
                _hasBits0 |= 16;
                rawCropToPlayableArea_ = value;
            }
        }
        /// <summary>Gets whether the "raw_crop_to_playable_area" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRawCropToPlayableArea
        {
            get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "raw_crop_to_playable_area" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRawCropToPlayableArea()
        {
            _hasBits0 &= ~16;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as InterfaceOptions);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InterfaceOptions other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Raw != other.Raw) return false;
            if (Score != other.Score) return false;
            if (!object.Equals(FeatureLayer, other.FeatureLayer)) return false;
            if (!object.Equals(Render, other.Render)) return false;
            if (ShowCloaked != other.ShowCloaked) return false;
            if (ShowBurrowedShadows != other.ShowBurrowedShadows) return false;
            if (ShowPlaceholders != other.ShowPlaceholders) return false;
            if (RawAffectsSelection != other.RawAffectsSelection) return false;
            if (RawCropToPlayableArea != other.RawCropToPlayableArea) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasRaw) hash ^= Raw.GetHashCode();
            if (HasScore) hash ^= Score.GetHashCode();
            if (HasFeatureLayer) hash ^= FeatureLayer.GetHashCode();
            if (HasRender) hash ^= Render.GetHashCode();
            if (HasShowCloaked) hash ^= ShowCloaked.GetHashCode();
            if (HasShowBurrowedShadows) hash ^= ShowBurrowedShadows.GetHashCode();
            if (HasShowPlaceholders) hash ^= ShowPlaceholders.GetHashCode();
            if (HasRawAffectsSelection) hash ^= RawAffectsSelection.GetHashCode();
            if (HasRawCropToPlayableArea) hash ^= RawCropToPlayableArea.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasRaw)
            {
                output.WriteRawTag(8);
                output.WriteBool(Raw);
            }
            if (HasScore)
            {
                output.WriteRawTag(16);
                output.WriteBool(Score);
            }
            if (HasFeatureLayer)
            {
                output.WriteRawTag(26);
                output.WriteMessage(FeatureLayer);
            }
            if (HasRender)
            {
                output.WriteRawTag(34);
                output.WriteMessage(Render);
            }
            if (HasShowCloaked)
            {
                output.WriteRawTag(40);
                output.WriteBool(ShowCloaked);
            }
            if (HasRawAffectsSelection)
            {
                output.WriteRawTag(48);
                output.WriteBool(RawAffectsSelection);
            }
            if (HasRawCropToPlayableArea)
            {
                output.WriteRawTag(56);
                output.WriteBool(RawCropToPlayableArea);
            }
            if (HasShowPlaceholders)
            {
                output.WriteRawTag(64);
                output.WriteBool(ShowPlaceholders);
            }
            if (HasShowBurrowedShadows)
            {
                output.WriteRawTag(72);
                output.WriteBool(ShowBurrowedShadows);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasRaw)
            {
                size += 1 + 1;
            }
            if (HasScore)
            {
                size += 1 + 1;
            }
            if (HasFeatureLayer)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(FeatureLayer);
            }
            if (HasRender)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Render);
            }
            if (HasShowCloaked)
            {
                size += 1 + 1;
            }
            if (HasShowBurrowedShadows)
            {
                size += 1 + 1;
            }
            if (HasShowPlaceholders)
            {
                size += 1 + 1;
            }
            if (HasRawAffectsSelection)
            {
                size += 1 + 1;
            }
            if (HasRawCropToPlayableArea)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InterfaceOptions other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasRaw)
            {
                Raw = other.Raw;
            }
            if (other.HasScore)
            {
                Score = other.Score;
            }
            if (other.HasFeatureLayer)
            {
                if (!HasFeatureLayer)
                {
                    FeatureLayer = new global::SC2APIProtocol.SpatialCameraSetup();
                }
                FeatureLayer.MergeFrom(other.FeatureLayer);
            }
            if (other.HasRender)
            {
                if (!HasRender)
                {
                    Render = new global::SC2APIProtocol.SpatialCameraSetup();
                }
                Render.MergeFrom(other.Render);
            }
            if (other.HasShowCloaked)
            {
                ShowCloaked = other.ShowCloaked;
            }
            if (other.HasShowBurrowedShadows)
            {
                ShowBurrowedShadows = other.ShowBurrowedShadows;
            }
            if (other.HasShowPlaceholders)
            {
                ShowPlaceholders = other.ShowPlaceholders;
            }
            if (other.HasRawAffectsSelection)
            {
                RawAffectsSelection = other.RawAffectsSelection;
            }
            if (other.HasRawCropToPlayableArea)
            {
                RawCropToPlayableArea = other.RawCropToPlayableArea;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Raw = input.ReadBool();
                            break;
                        }
                    case 16:
                        {
                            Score = input.ReadBool();
                            break;
                        }
                    case 26:
                        {
                            if (!HasFeatureLayer)
                            {
                                FeatureLayer = new global::SC2APIProtocol.SpatialCameraSetup();
                            }
                            input.ReadMessage(FeatureLayer);
                            break;
                        }
                    case 34:
                        {
                            if (!HasRender)
                            {
                                Render = new global::SC2APIProtocol.SpatialCameraSetup();
                            }
                            input.ReadMessage(Render);
                            break;
                        }
                    case 40:
                        {
                            ShowCloaked = input.ReadBool();
                            break;
                        }
                    case 48:
                        {
                            RawAffectsSelection = input.ReadBool();
                            break;
                        }
                    case 56:
                        {
                            RawCropToPlayableArea = input.ReadBool();
                            break;
                        }
                    case 64:
                        {
                            ShowPlaceholders = input.ReadBool();
                            break;
                        }
                    case 72:
                        {
                            ShowBurrowedShadows = input.ReadBool();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo>
    {
        private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[51]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerInfo(PlayerInfo other) : this()
        {
            _hasBits0 = other._hasBits0;
            playerId_ = other.playerId_;
            type_ = other.type_;
            raceRequested_ = other.raceRequested_;
            raceActual_ = other.raceActual_;
            difficulty_ = other.difficulty_;
            aiBuild_ = other.aiBuild_;
            playerName_ = other.playerName_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerInfo Clone()
        {
            return new PlayerInfo(this);
        }

        /// <summary>Field number for the "player_id" field.</summary>
        public const int PlayerIdFieldNumber = 1;
        private readonly static uint PlayerIdDefaultValue = 0;

        private uint playerId_;
        /// <summary>
        /// Identifier that will be used to reference this player.
        /// SC2 will always assign playerIds starting from 1 in standard Melee maps. This may not be true in custom maps.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PlayerId
        {
            get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                playerId_ = value;
            }
        }
        /// <summary>Gets whether the "player_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerId
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "player_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerId()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private readonly static global::SC2APIProtocol.PlayerType TypeDefaultValue = global::SC2APIProtocol.PlayerType.Participant;

        private global::SC2APIProtocol.PlayerType type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.PlayerType Type
        {
            get { if ((_hasBits0 & 2) != 0) { return type_; } else { return TypeDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                type_ = value;
            }
        }
        /// <summary>Gets whether the "type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasType
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType()
        {
            _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "race_requested" field.</summary>
        public const int RaceRequestedFieldNumber = 3;
        private readonly static global::SC2APIProtocol.Race RaceRequestedDefaultValue = global::SC2APIProtocol.Race.NoRace;

        private global::SC2APIProtocol.Race raceRequested_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.Race RaceRequested
        {
            get { if ((_hasBits0 & 4) != 0) { return raceRequested_; } else { return RaceRequestedDefaultValue; } }
            set
            {
                _hasBits0 |= 4;
                raceRequested_ = value;
            }
        }
        /// <summary>Gets whether the "race_requested" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRaceRequested
        {
            get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "race_requested" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRaceRequested()
        {
            _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "race_actual" field.</summary>
        public const int RaceActualFieldNumber = 4;
        private readonly static global::SC2APIProtocol.Race RaceActualDefaultValue = global::SC2APIProtocol.Race.NoRace;

        private global::SC2APIProtocol.Race raceActual_;
        /// <summary>
        /// Only populated for your player or when watching replay
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.Race RaceActual
        {
            get { if ((_hasBits0 & 8) != 0) { return raceActual_; } else { return RaceActualDefaultValue; } }
            set
            {
                _hasBits0 |= 8;
                raceActual_ = value;
            }
        }
        /// <summary>Gets whether the "race_actual" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRaceActual
        {
            get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "race_actual" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRaceActual()
        {
            _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "difficulty" field.</summary>
        public const int DifficultyFieldNumber = 5;
        private readonly static global::SC2APIProtocol.Difficulty DifficultyDefaultValue = global::SC2APIProtocol.Difficulty.VeryEasy;

        private global::SC2APIProtocol.Difficulty difficulty_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.Difficulty Difficulty
        {
            get { if ((_hasBits0 & 16) != 0) { return difficulty_; } else { return DifficultyDefaultValue; } }
            set
            {
                _hasBits0 |= 16;
                difficulty_ = value;
            }
        }
        /// <summary>Gets whether the "difficulty" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDifficulty
        {
            get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "difficulty" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDifficulty()
        {
            _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "ai_build" field.</summary>
        public const int AiBuildFieldNumber = 7;
        private readonly static global::SC2APIProtocol.AIBuild AiBuildDefaultValue = global::SC2APIProtocol.AIBuild.RandomBuild;

        private global::SC2APIProtocol.AIBuild aiBuild_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.AIBuild AiBuild
        {
            get { if ((_hasBits0 & 32) != 0) { return aiBuild_; } else { return AiBuildDefaultValue; } }
            set
            {
                _hasBits0 |= 32;
                aiBuild_ = value;
            }
        }
        /// <summary>Gets whether the "ai_build" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAiBuild
        {
            get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "ai_build" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAiBuild()
        {
            _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "player_name" field.</summary>
        public const int PlayerNameFieldNumber = 6;
        private readonly static string PlayerNameDefaultValue = "";

        private string playerName_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PlayerName
        {
            get { return playerName_ ?? PlayerNameDefaultValue; }
            set
            {
                playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "player_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerName
        {
            get { return playerName_ != null; }
        }
        /// <summary>Clears the value of the "player_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerName()
        {
            playerName_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PlayerInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (PlayerId != other.PlayerId) return false;
            if (Type != other.Type) return false;
            if (RaceRequested != other.RaceRequested) return false;
            if (RaceActual != other.RaceActual) return false;
            if (Difficulty != other.Difficulty) return false;
            if (AiBuild != other.AiBuild) return false;
            if (PlayerName != other.PlayerName) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasPlayerId) hash ^= PlayerId.GetHashCode();
            if (HasType) hash ^= Type.GetHashCode();
            if (HasRaceRequested) hash ^= RaceRequested.GetHashCode();
            if (HasRaceActual) hash ^= RaceActual.GetHashCode();
            if (HasDifficulty) hash ^= Difficulty.GetHashCode();
            if (HasAiBuild) hash ^= AiBuild.GetHashCode();
            if (HasPlayerName) hash ^= PlayerName.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasPlayerId)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(PlayerId);
            }
            if (HasType)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Type);
            }
            if (HasRaceRequested)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)RaceRequested);
            }
            if (HasRaceActual)
            {
                output.WriteRawTag(32);
                output.WriteEnum((int)RaceActual);
            }
            if (HasDifficulty)
            {
                output.WriteRawTag(40);
                output.WriteEnum((int)Difficulty);
            }
            if (HasPlayerName)
            {
                output.WriteRawTag(50);
                output.WriteString(PlayerName);
            }
            if (HasAiBuild)
            {
                output.WriteRawTag(56);
                output.WriteEnum((int)AiBuild);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasPlayerId)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
            }
            if (HasType)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (HasRaceRequested)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)RaceRequested);
            }
            if (HasRaceActual)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)RaceActual);
            }
            if (HasDifficulty)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Difficulty);
            }
            if (HasAiBuild)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)AiBuild);
            }
            if (HasPlayerName)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasPlayerId)
            {
                PlayerId = other.PlayerId;
            }
            if (other.HasType)
            {
                Type = other.Type;
            }
            if (other.HasRaceRequested)
            {
                RaceRequested = other.RaceRequested;
            }
            if (other.HasRaceActual)
            {
                RaceActual = other.RaceActual;
            }
            if (other.HasDifficulty)
            {
                Difficulty = other.Difficulty;
            }
            if (other.HasAiBuild)
            {
                AiBuild = other.AiBuild;
            }
            if (other.HasPlayerName)
            {
                PlayerName = other.PlayerName;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            PlayerId = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            Type = (global::SC2APIProtocol.PlayerType)input.ReadEnum();
                            break;
                        }
                    case 24:
                        {
                            RaceRequested = (global::SC2APIProtocol.Race)input.ReadEnum();
                            break;
                        }
                    case 32:
                        {
                            RaceActual = (global::SC2APIProtocol.Race)input.ReadEnum();
                            break;
                        }
                    case 40:
                        {
                            Difficulty = (global::SC2APIProtocol.Difficulty)input.ReadEnum();
                            break;
                        }
                    case 50:
                        {
                            PlayerName = input.ReadString();
                            break;
                        }
                    case 56:
                        {
                            AiBuild = (global::SC2APIProtocol.AIBuild)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class PlayerCommon : pb::IMessage<PlayerCommon>
    {
        private static readonly pb::MessageParser<PlayerCommon> _parser = new pb::MessageParser<PlayerCommon>(() => new PlayerCommon());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerCommon> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[52]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerCommon()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerCommon(PlayerCommon other) : this()
        {
            _hasBits0 = other._hasBits0;
            playerId_ = other.playerId_;
            minerals_ = other.minerals_;
            vespene_ = other.vespene_;
            foodCap_ = other.foodCap_;
            foodUsed_ = other.foodUsed_;
            foodArmy_ = other.foodArmy_;
            foodWorkers_ = other.foodWorkers_;
            idleWorkerCount_ = other.idleWorkerCount_;
            armyCount_ = other.armyCount_;
            warpGateCount_ = other.warpGateCount_;
            larvaCount_ = other.larvaCount_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerCommon Clone()
        {
            return new PlayerCommon(this);
        }

        /// <summary>Field number for the "player_id" field.</summary>
        public const int PlayerIdFieldNumber = 1;
        private readonly static uint PlayerIdDefaultValue = 0;

        private uint playerId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PlayerId
        {
            get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                playerId_ = value;
            }
        }
        /// <summary>Gets whether the "player_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerId
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "player_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerId()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "minerals" field.</summary>
        public const int MineralsFieldNumber = 2;
        private readonly static uint MineralsDefaultValue = 0;

        private uint minerals_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Minerals
        {
            get { if ((_hasBits0 & 2) != 0) { return minerals_; } else { return MineralsDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                minerals_ = value;
            }
        }
        /// <summary>Gets whether the "minerals" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMinerals
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "minerals" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMinerals()
        {
            _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "vespene" field.</summary>
        public const int VespeneFieldNumber = 3;
        private readonly static uint VespeneDefaultValue = 0;

        private uint vespene_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Vespene
        {
            get { if ((_hasBits0 & 4) != 0) { return vespene_; } else { return VespeneDefaultValue; } }
            set
            {
                _hasBits0 |= 4;
                vespene_ = value;
            }
        }
        /// <summary>Gets whether the "vespene" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasVespene
        {
            get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "vespene" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearVespene()
        {
            _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "food_cap" field.</summary>
        public const int FoodCapFieldNumber = 4;
        private readonly static uint FoodCapDefaultValue = 0;

        private uint foodCap_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint FoodCap
        {
            get { if ((_hasBits0 & 8) != 0) { return foodCap_; } else { return FoodCapDefaultValue; } }
            set
            {
                _hasBits0 |= 8;
                foodCap_ = value;
            }
        }
        /// <summary>Gets whether the "food_cap" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasFoodCap
        {
            get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "food_cap" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFoodCap()
        {
            _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "food_used" field.</summary>
        public const int FoodUsedFieldNumber = 5;
        private readonly static uint FoodUsedDefaultValue = 0;

        private uint foodUsed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint FoodUsed
        {
            get { if ((_hasBits0 & 16) != 0) { return foodUsed_; } else { return FoodUsedDefaultValue; } }
            set
            {
                _hasBits0 |= 16;
                foodUsed_ = value;
            }
        }
        /// <summary>Gets whether the "food_used" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasFoodUsed
        {
            get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "food_used" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFoodUsed()
        {
            _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "food_army" field.</summary>
        public const int FoodArmyFieldNumber = 6;
        private readonly static uint FoodArmyDefaultValue = 0;

        private uint foodArmy_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint FoodArmy
        {
            get { if ((_hasBits0 & 32) != 0) { return foodArmy_; } else { return FoodArmyDefaultValue; } }
            set
            {
                _hasBits0 |= 32;
                foodArmy_ = value;
            }
        }
        /// <summary>Gets whether the "food_army" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasFoodArmy
        {
            get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "food_army" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFoodArmy()
        {
            _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "food_workers" field.</summary>
        public const int FoodWorkersFieldNumber = 7;
        private readonly static uint FoodWorkersDefaultValue = 0;

        private uint foodWorkers_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint FoodWorkers
        {
            get { if ((_hasBits0 & 64) != 0) { return foodWorkers_; } else { return FoodWorkersDefaultValue; } }
            set
            {
                _hasBits0 |= 64;
                foodWorkers_ = value;
            }
        }
        /// <summary>Gets whether the "food_workers" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasFoodWorkers
        {
            get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "food_workers" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFoodWorkers()
        {
            _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "idle_worker_count" field.</summary>
        public const int IdleWorkerCountFieldNumber = 8;
        private readonly static uint IdleWorkerCountDefaultValue = 0;

        private uint idleWorkerCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint IdleWorkerCount
        {
            get { if ((_hasBits0 & 128) != 0) { return idleWorkerCount_; } else { return IdleWorkerCountDefaultValue; } }
            set
            {
                _hasBits0 |= 128;
                idleWorkerCount_ = value;
            }
        }
        /// <summary>Gets whether the "idle_worker_count" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIdleWorkerCount
        {
            get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "idle_worker_count" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIdleWorkerCount()
        {
            _hasBits0 &= ~128;
        }

        /// <summary>Field number for the "army_count" field.</summary>
        public const int ArmyCountFieldNumber = 9;
        private readonly static uint ArmyCountDefaultValue = 0;

        private uint armyCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ArmyCount
        {
            get { if ((_hasBits0 & 256) != 0) { return armyCount_; } else { return ArmyCountDefaultValue; } }
            set
            {
                _hasBits0 |= 256;
                armyCount_ = value;
            }
        }
        /// <summary>Gets whether the "army_count" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasArmyCount
        {
            get { return (_hasBits0 & 256) != 0; }
        }
        /// <summary>Clears the value of the "army_count" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearArmyCount()
        {
            _hasBits0 &= ~256;
        }

        /// <summary>Field number for the "warp_gate_count" field.</summary>
        public const int WarpGateCountFieldNumber = 10;
        private readonly static uint WarpGateCountDefaultValue = 0;

        private uint warpGateCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint WarpGateCount
        {
            get { if ((_hasBits0 & 512) != 0) { return warpGateCount_; } else { return WarpGateCountDefaultValue; } }
            set
            {
                _hasBits0 |= 512;
                warpGateCount_ = value;
            }
        }
        /// <summary>Gets whether the "warp_gate_count" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasWarpGateCount
        {
            get { return (_hasBits0 & 512) != 0; }
        }
        /// <summary>Clears the value of the "warp_gate_count" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearWarpGateCount()
        {
            _hasBits0 &= ~512;
        }

        /// <summary>Field number for the "larva_count" field.</summary>
        public const int LarvaCountFieldNumber = 11;
        private readonly static uint LarvaCountDefaultValue = 0;

        private uint larvaCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LarvaCount
        {
            get { if ((_hasBits0 & 1024) != 0) { return larvaCount_; } else { return LarvaCountDefaultValue; } }
            set
            {
                _hasBits0 |= 1024;
                larvaCount_ = value;
            }
        }
        /// <summary>Gets whether the "larva_count" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLarvaCount
        {
            get { return (_hasBits0 & 1024) != 0; }
        }
        /// <summary>Clears the value of the "larva_count" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLarvaCount()
        {
            _hasBits0 &= ~1024;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PlayerCommon);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerCommon other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (PlayerId != other.PlayerId) return false;
            if (Minerals != other.Minerals) return false;
            if (Vespene != other.Vespene) return false;
            if (FoodCap != other.FoodCap) return false;
            if (FoodUsed != other.FoodUsed) return false;
            if (FoodArmy != other.FoodArmy) return false;
            if (FoodWorkers != other.FoodWorkers) return false;
            if (IdleWorkerCount != other.IdleWorkerCount) return false;
            if (ArmyCount != other.ArmyCount) return false;
            if (WarpGateCount != other.WarpGateCount) return false;
            if (LarvaCount != other.LarvaCount) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasPlayerId) hash ^= PlayerId.GetHashCode();
            if (HasMinerals) hash ^= Minerals.GetHashCode();
            if (HasVespene) hash ^= Vespene.GetHashCode();
            if (HasFoodCap) hash ^= FoodCap.GetHashCode();
            if (HasFoodUsed) hash ^= FoodUsed.GetHashCode();
            if (HasFoodArmy) hash ^= FoodArmy.GetHashCode();
            if (HasFoodWorkers) hash ^= FoodWorkers.GetHashCode();
            if (HasIdleWorkerCount) hash ^= IdleWorkerCount.GetHashCode();
            if (HasArmyCount) hash ^= ArmyCount.GetHashCode();
            if (HasWarpGateCount) hash ^= WarpGateCount.GetHashCode();
            if (HasLarvaCount) hash ^= LarvaCount.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasPlayerId)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(PlayerId);
            }
            if (HasMinerals)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(Minerals);
            }
            if (HasVespene)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(Vespene);
            }
            if (HasFoodCap)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(FoodCap);
            }
            if (HasFoodUsed)
            {
                output.WriteRawTag(40);
                output.WriteUInt32(FoodUsed);
            }
            if (HasFoodArmy)
            {
                output.WriteRawTag(48);
                output.WriteUInt32(FoodArmy);
            }
            if (HasFoodWorkers)
            {
                output.WriteRawTag(56);
                output.WriteUInt32(FoodWorkers);
            }
            if (HasIdleWorkerCount)
            {
                output.WriteRawTag(64);
                output.WriteUInt32(IdleWorkerCount);
            }
            if (HasArmyCount)
            {
                output.WriteRawTag(72);
                output.WriteUInt32(ArmyCount);
            }
            if (HasWarpGateCount)
            {
                output.WriteRawTag(80);
                output.WriteUInt32(WarpGateCount);
            }
            if (HasLarvaCount)
            {
                output.WriteRawTag(88);
                output.WriteUInt32(LarvaCount);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasPlayerId)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
            }
            if (HasMinerals)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Minerals);
            }
            if (HasVespene)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Vespene);
            }
            if (HasFoodCap)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FoodCap);
            }
            if (HasFoodUsed)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FoodUsed);
            }
            if (HasFoodArmy)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FoodArmy);
            }
            if (HasFoodWorkers)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FoodWorkers);
            }
            if (HasIdleWorkerCount)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IdleWorkerCount);
            }
            if (HasArmyCount)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArmyCount);
            }
            if (HasWarpGateCount)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WarpGateCount);
            }
            if (HasLarvaCount)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LarvaCount);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerCommon other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasPlayerId)
            {
                PlayerId = other.PlayerId;
            }
            if (other.HasMinerals)
            {
                Minerals = other.Minerals;
            }
            if (other.HasVespene)
            {
                Vespene = other.Vespene;
            }
            if (other.HasFoodCap)
            {
                FoodCap = other.FoodCap;
            }
            if (other.HasFoodUsed)
            {
                FoodUsed = other.FoodUsed;
            }
            if (other.HasFoodArmy)
            {
                FoodArmy = other.FoodArmy;
            }
            if (other.HasFoodWorkers)
            {
                FoodWorkers = other.FoodWorkers;
            }
            if (other.HasIdleWorkerCount)
            {
                IdleWorkerCount = other.IdleWorkerCount;
            }
            if (other.HasArmyCount)
            {
                ArmyCount = other.ArmyCount;
            }
            if (other.HasWarpGateCount)
            {
                WarpGateCount = other.WarpGateCount;
            }
            if (other.HasLarvaCount)
            {
                LarvaCount = other.LarvaCount;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            PlayerId = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            Minerals = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            Vespene = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            FoodCap = input.ReadUInt32();
                            break;
                        }
                    case 40:
                        {
                            FoodUsed = input.ReadUInt32();
                            break;
                        }
                    case 48:
                        {
                            FoodArmy = input.ReadUInt32();
                            break;
                        }
                    case 56:
                        {
                            FoodWorkers = input.ReadUInt32();
                            break;
                        }
                    case 64:
                        {
                            IdleWorkerCount = input.ReadUInt32();
                            break;
                        }
                    case 72:
                        {
                            ArmyCount = input.ReadUInt32();
                            break;
                        }
                    case 80:
                        {
                            WarpGateCount = input.ReadUInt32();
                            break;
                        }
                    case 88:
                        {
                            LarvaCount = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Observation : pb::IMessage<Observation>
    {
        private static readonly pb::MessageParser<Observation> _parser = new pb::MessageParser<Observation>(() => new Observation());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Observation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[53]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Observation()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Observation(Observation other) : this()
        {
            _hasBits0 = other._hasBits0;
            gameLoop_ = other.gameLoop_;
            playerCommon_ = other.HasPlayerCommon ? other.playerCommon_.Clone() : null;
            alerts_ = other.alerts_.Clone();
            abilities_ = other.abilities_.Clone();
            score_ = other.HasScore ? other.score_.Clone() : null;
            rawData_ = other.HasRawData ? other.rawData_.Clone() : null;
            featureLayerData_ = other.HasFeatureLayerData ? other.featureLayerData_.Clone() : null;
            renderData_ = other.HasRenderData ? other.renderData_.Clone() : null;
            uiData_ = other.HasUiData ? other.uiData_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Observation Clone()
        {
            return new Observation(this);
        }

        /// <summary>Field number for the "game_loop" field.</summary>
        public const int GameLoopFieldNumber = 9;
        private readonly static uint GameLoopDefaultValue = 0;

        private uint gameLoop_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GameLoop
        {
            get { if ((_hasBits0 & 1) != 0) { return gameLoop_; } else { return GameLoopDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                gameLoop_ = value;
            }
        }
        /// <summary>Gets whether the "game_loop" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGameLoop
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "game_loop" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGameLoop()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "player_common" field.</summary>
        public const int PlayerCommonFieldNumber = 1;
        private global::SC2APIProtocol.PlayerCommon playerCommon_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.PlayerCommon PlayerCommon
        {
            get { return playerCommon_; }
            set
            {
                playerCommon_ = value;
            }
        }
        /// <summary>Gets whether the player_common field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerCommon
        {
            get { return playerCommon_ != null; }
        }
        /// <summary>Clears the value of the player_common field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerCommon()
        {
            playerCommon_ = null;
        }

        /// <summary>Field number for the "alerts" field.</summary>
        public const int AlertsFieldNumber = 10;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.Alert> _repeated_alerts_codec
            = pb::FieldCodec.ForEnum(80, x => (int)x, x => (global::SC2APIProtocol.Alert)x);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.Alert> alerts_ = new pbc::RepeatedField<global::SC2APIProtocol.Alert>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.Alert> Alerts
        {
            get { return alerts_; }
        }

        /// <summary>Field number for the "abilities" field.</summary>
        public const int AbilitiesFieldNumber = 3;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.AvailableAbility> _repeated_abilities_codec
            = pb::FieldCodec.ForMessage(26, global::SC2APIProtocol.AvailableAbility.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.AvailableAbility> abilities_ = new pbc::RepeatedField<global::SC2APIProtocol.AvailableAbility>();
        /// <summary>
        /// Abilities available in the selection. Enabled if in this list, disabled otherwise.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.AvailableAbility> Abilities
        {
            get { return abilities_; }
        }

        /// <summary>Field number for the "score" field.</summary>
        public const int ScoreFieldNumber = 4;
        private global::SC2APIProtocol.Score score_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.Score Score
        {
            get { return score_; }
            set
            {
                score_ = value;
            }
        }
        /// <summary>Gets whether the score field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasScore
        {
            get { return score_ != null; }
        }
        /// <summary>Clears the value of the score field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearScore()
        {
            score_ = null;
        }

        /// <summary>Field number for the "raw_data" field.</summary>
        public const int RawDataFieldNumber = 5;
        private global::SC2APIProtocol.ObservationRaw rawData_;
        /// <summary>
        /// Populated if Raw interface is enabled.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ObservationRaw RawData
        {
            get { return rawData_; }
            set
            {
                rawData_ = value;
            }
        }
        /// <summary>Gets whether the raw_data field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRawData
        {
            get { return rawData_ != null; }
        }
        /// <summary>Clears the value of the raw_data field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRawData()
        {
            rawData_ = null;
        }

        /// <summary>Field number for the "feature_layer_data" field.</summary>
        public const int FeatureLayerDataFieldNumber = 6;
        private global::SC2APIProtocol.ObservationFeatureLayer featureLayerData_;
        /// <summary>
        /// Populated if Feature Layer interface is enabled.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ObservationFeatureLayer FeatureLayerData
        {
            get { return featureLayerData_; }
            set
            {
                featureLayerData_ = value;
            }
        }
        /// <summary>Gets whether the feature_layer_data field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasFeatureLayerData
        {
            get { return featureLayerData_ != null; }
        }
        /// <summary>Clears the value of the feature_layer_data field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFeatureLayerData()
        {
            featureLayerData_ = null;
        }

        /// <summary>Field number for the "render_data" field.</summary>
        public const int RenderDataFieldNumber = 7;
        private global::SC2APIProtocol.ObservationRender renderData_;
        /// <summary>
        /// Populated if Render interface is enabled.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ObservationRender RenderData
        {
            get { return renderData_; }
            set
            {
                renderData_ = value;
            }
        }
        /// <summary>Gets whether the render_data field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRenderData
        {
            get { return renderData_ != null; }
        }
        /// <summary>Clears the value of the render_data field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRenderData()
        {
            renderData_ = null;
        }

        /// <summary>Field number for the "ui_data" field.</summary>
        public const int UiDataFieldNumber = 8;
        private global::SC2APIProtocol.ObservationUI uiData_;
        /// <summary>
        /// Populated if Feature Layer or Render interface is enabled.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ObservationUI UiData
        {
            get { return uiData_; }
            set
            {
                uiData_ = value;
            }
        }
        /// <summary>Gets whether the ui_data field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUiData
        {
            get { return uiData_ != null; }
        }
        /// <summary>Clears the value of the ui_data field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUiData()
        {
            uiData_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Observation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Observation other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (GameLoop != other.GameLoop) return false;
            if (!object.Equals(PlayerCommon, other.PlayerCommon)) return false;
            if (!alerts_.Equals(other.alerts_)) return false;
            if (!abilities_.Equals(other.abilities_)) return false;
            if (!object.Equals(Score, other.Score)) return false;
            if (!object.Equals(RawData, other.RawData)) return false;
            if (!object.Equals(FeatureLayerData, other.FeatureLayerData)) return false;
            if (!object.Equals(RenderData, other.RenderData)) return false;
            if (!object.Equals(UiData, other.UiData)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasGameLoop) hash ^= GameLoop.GetHashCode();
            if (HasPlayerCommon) hash ^= PlayerCommon.GetHashCode();
            hash ^= alerts_.GetHashCode();
            hash ^= abilities_.GetHashCode();
            if (HasScore) hash ^= Score.GetHashCode();
            if (HasRawData) hash ^= RawData.GetHashCode();
            if (HasFeatureLayerData) hash ^= FeatureLayerData.GetHashCode();
            if (HasRenderData) hash ^= RenderData.GetHashCode();
            if (HasUiData) hash ^= UiData.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasPlayerCommon)
            {
                output.WriteRawTag(10);
                output.WriteMessage(PlayerCommon);
            }
            abilities_.WriteTo(output, _repeated_abilities_codec);
            if (HasScore)
            {
                output.WriteRawTag(34);
                output.WriteMessage(Score);
            }
            if (HasRawData)
            {
                output.WriteRawTag(42);
                output.WriteMessage(RawData);
            }
            if (HasFeatureLayerData)
            {
                output.WriteRawTag(50);
                output.WriteMessage(FeatureLayerData);
            }
            if (HasRenderData)
            {
                output.WriteRawTag(58);
                output.WriteMessage(RenderData);
            }
            if (HasUiData)
            {
                output.WriteRawTag(66);
                output.WriteMessage(UiData);
            }
            if (HasGameLoop)
            {
                output.WriteRawTag(72);
                output.WriteUInt32(GameLoop);
            }
            alerts_.WriteTo(output, _repeated_alerts_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasGameLoop)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameLoop);
            }
            if (HasPlayerCommon)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerCommon);
            }
            size += alerts_.CalculateSize(_repeated_alerts_codec);
            size += abilities_.CalculateSize(_repeated_abilities_codec);
            if (HasScore)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Score);
            }
            if (HasRawData)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(RawData);
            }
            if (HasFeatureLayerData)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(FeatureLayerData);
            }
            if (HasRenderData)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(RenderData);
            }
            if (HasUiData)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(UiData);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Observation other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasGameLoop)
            {
                GameLoop = other.GameLoop;
            }
            if (other.HasPlayerCommon)
            {
                if (!HasPlayerCommon)
                {
                    PlayerCommon = new global::SC2APIProtocol.PlayerCommon();
                }
                PlayerCommon.MergeFrom(other.PlayerCommon);
            }
            alerts_.Add(other.alerts_);
            abilities_.Add(other.abilities_);
            if (other.HasScore)
            {
                if (!HasScore)
                {
                    Score = new global::SC2APIProtocol.Score();
                }
                Score.MergeFrom(other.Score);
            }
            if (other.HasRawData)
            {
                if (!HasRawData)
                {
                    RawData = new global::SC2APIProtocol.ObservationRaw();
                }
                RawData.MergeFrom(other.RawData);
            }
            if (other.HasFeatureLayerData)
            {
                if (!HasFeatureLayerData)
                {
                    FeatureLayerData = new global::SC2APIProtocol.ObservationFeatureLayer();
                }
                FeatureLayerData.MergeFrom(other.FeatureLayerData);
            }
            if (other.HasRenderData)
            {
                if (!HasRenderData)
                {
                    RenderData = new global::SC2APIProtocol.ObservationRender();
                }
                RenderData.MergeFrom(other.RenderData);
            }
            if (other.HasUiData)
            {
                if (!HasUiData)
                {
                    UiData = new global::SC2APIProtocol.ObservationUI();
                }
                UiData.MergeFrom(other.UiData);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (!HasPlayerCommon)
                            {
                                PlayerCommon = new global::SC2APIProtocol.PlayerCommon();
                            }
                            input.ReadMessage(PlayerCommon);
                            break;
                        }
                    case 26:
                        {
                            abilities_.AddEntriesFrom(input, _repeated_abilities_codec);
                            break;
                        }
                    case 34:
                        {
                            if (!HasScore)
                            {
                                Score = new global::SC2APIProtocol.Score();
                            }
                            input.ReadMessage(Score);
                            break;
                        }
                    case 42:
                        {
                            if (!HasRawData)
                            {
                                RawData = new global::SC2APIProtocol.ObservationRaw();
                            }
                            input.ReadMessage(RawData);
                            break;
                        }
                    case 50:
                        {
                            if (!HasFeatureLayerData)
                            {
                                FeatureLayerData = new global::SC2APIProtocol.ObservationFeatureLayer();
                            }
                            input.ReadMessage(FeatureLayerData);
                            break;
                        }
                    case 58:
                        {
                            if (!HasRenderData)
                            {
                                RenderData = new global::SC2APIProtocol.ObservationRender();
                            }
                            input.ReadMessage(RenderData);
                            break;
                        }
                    case 66:
                        {
                            if (!HasUiData)
                            {
                                UiData = new global::SC2APIProtocol.ObservationUI();
                            }
                            input.ReadMessage(UiData);
                            break;
                        }
                    case 72:
                        {
                            GameLoop = input.ReadUInt32();
                            break;
                        }
                    case 82:
                    case 80:
                        {
                            alerts_.AddEntriesFrom(input, _repeated_alerts_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Action : pb::IMessage<Action>
    {
        private static readonly pb::MessageParser<Action> _parser = new pb::MessageParser<Action>(() => new Action());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Action> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[54]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Action()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Action(Action other) : this()
        {
            _hasBits0 = other._hasBits0;
            actionRaw_ = other.HasActionRaw ? other.actionRaw_.Clone() : null;
            actionFeatureLayer_ = other.HasActionFeatureLayer ? other.actionFeatureLayer_.Clone() : null;
            actionRender_ = other.HasActionRender ? other.actionRender_.Clone() : null;
            actionUi_ = other.HasActionUi ? other.actionUi_.Clone() : null;
            actionChat_ = other.HasActionChat ? other.actionChat_.Clone() : null;
            gameLoop_ = other.gameLoop_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Action Clone()
        {
            return new Action(this);
        }

        /// <summary>Field number for the "action_raw" field.</summary>
        public const int ActionRawFieldNumber = 1;
        private global::SC2APIProtocol.ActionRaw actionRaw_;
        /// <summary>
        /// Populated if Raw interface is enabled.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ActionRaw ActionRaw
        {
            get { return actionRaw_; }
            set
            {
                actionRaw_ = value;
            }
        }
        /// <summary>Gets whether the action_raw field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasActionRaw
        {
            get { return actionRaw_ != null; }
        }
        /// <summary>Clears the value of the action_raw field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearActionRaw()
        {
            actionRaw_ = null;
        }

        /// <summary>Field number for the "action_feature_layer" field.</summary>
        public const int ActionFeatureLayerFieldNumber = 2;
        private global::SC2APIProtocol.ActionSpatial actionFeatureLayer_;
        /// <summary>
        /// Populated if Feature Layer interface is enabled.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ActionSpatial ActionFeatureLayer
        {
            get { return actionFeatureLayer_; }
            set
            {
                actionFeatureLayer_ = value;
            }
        }
        /// <summary>Gets whether the action_feature_layer field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasActionFeatureLayer
        {
            get { return actionFeatureLayer_ != null; }
        }
        /// <summary>Clears the value of the action_feature_layer field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearActionFeatureLayer()
        {
            actionFeatureLayer_ = null;
        }

        /// <summary>Field number for the "action_render" field.</summary>
        public const int ActionRenderFieldNumber = 3;
        private global::SC2APIProtocol.ActionSpatial actionRender_;
        /// <summary>
        /// Not implemented. Populated if Render interface is enabled.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ActionSpatial ActionRender
        {
            get { return actionRender_; }
            set
            {
                actionRender_ = value;
            }
        }
        /// <summary>Gets whether the action_render field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasActionRender
        {
            get { return actionRender_ != null; }
        }
        /// <summary>Clears the value of the action_render field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearActionRender()
        {
            actionRender_ = null;
        }

        /// <summary>Field number for the "action_ui" field.</summary>
        public const int ActionUiFieldNumber = 4;
        private global::SC2APIProtocol.ActionUI actionUi_;
        /// <summary>
        /// Populated if Feature Layer or Render interface is enabled.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ActionUI ActionUi
        {
            get { return actionUi_; }
            set
            {
                actionUi_ = value;
            }
        }
        /// <summary>Gets whether the action_ui field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasActionUi
        {
            get { return actionUi_ != null; }
        }
        /// <summary>Clears the value of the action_ui field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearActionUi()
        {
            actionUi_ = null;
        }

        /// <summary>Field number for the "action_chat" field.</summary>
        public const int ActionChatFieldNumber = 6;
        private global::SC2APIProtocol.ActionChat actionChat_;
        /// <summary>
        /// Chat messages as a player typing into the chat channel.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ActionChat ActionChat
        {
            get { return actionChat_; }
            set
            {
                actionChat_ = value;
            }
        }
        /// <summary>Gets whether the action_chat field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasActionChat
        {
            get { return actionChat_ != null; }
        }
        /// <summary>Clears the value of the action_chat field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearActionChat()
        {
            actionChat_ = null;
        }

        /// <summary>Field number for the "game_loop" field.</summary>
        public const int GameLoopFieldNumber = 7;
        private readonly static uint GameLoopDefaultValue = 0;

        private uint gameLoop_;
        /// <summary>
        /// Populated for actions in ResponseObservation. The game loop on which the action was executed.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GameLoop
        {
            get { if ((_hasBits0 & 1) != 0) { return gameLoop_; } else { return GameLoopDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                gameLoop_ = value;
            }
        }
        /// <summary>Gets whether the "game_loop" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGameLoop
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "game_loop" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGameLoop()
        {
            _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Action);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Action other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(ActionRaw, other.ActionRaw)) return false;
            if (!object.Equals(ActionFeatureLayer, other.ActionFeatureLayer)) return false;
            if (!object.Equals(ActionRender, other.ActionRender)) return false;
            if (!object.Equals(ActionUi, other.ActionUi)) return false;
            if (!object.Equals(ActionChat, other.ActionChat)) return false;
            if (GameLoop != other.GameLoop) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasActionRaw) hash ^= ActionRaw.GetHashCode();
            if (HasActionFeatureLayer) hash ^= ActionFeatureLayer.GetHashCode();
            if (HasActionRender) hash ^= ActionRender.GetHashCode();
            if (HasActionUi) hash ^= ActionUi.GetHashCode();
            if (HasActionChat) hash ^= ActionChat.GetHashCode();
            if (HasGameLoop) hash ^= GameLoop.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasActionRaw)
            {
                output.WriteRawTag(10);
                output.WriteMessage(ActionRaw);
            }
            if (HasActionFeatureLayer)
            {
                output.WriteRawTag(18);
                output.WriteMessage(ActionFeatureLayer);
            }
            if (HasActionRender)
            {
                output.WriteRawTag(26);
                output.WriteMessage(ActionRender);
            }
            if (HasActionUi)
            {
                output.WriteRawTag(34);
                output.WriteMessage(ActionUi);
            }
            if (HasActionChat)
            {
                output.WriteRawTag(50);
                output.WriteMessage(ActionChat);
            }
            if (HasGameLoop)
            {
                output.WriteRawTag(56);
                output.WriteUInt32(GameLoop);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasActionRaw)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActionRaw);
            }
            if (HasActionFeatureLayer)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActionFeatureLayer);
            }
            if (HasActionRender)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActionRender);
            }
            if (HasActionUi)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActionUi);
            }
            if (HasActionChat)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActionChat);
            }
            if (HasGameLoop)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameLoop);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Action other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasActionRaw)
            {
                if (!HasActionRaw)
                {
                    ActionRaw = new global::SC2APIProtocol.ActionRaw();
                }
                ActionRaw.MergeFrom(other.ActionRaw);
            }
            if (other.HasActionFeatureLayer)
            {
                if (!HasActionFeatureLayer)
                {
                    ActionFeatureLayer = new global::SC2APIProtocol.ActionSpatial();
                }
                ActionFeatureLayer.MergeFrom(other.ActionFeatureLayer);
            }
            if (other.HasActionRender)
            {
                if (!HasActionRender)
                {
                    ActionRender = new global::SC2APIProtocol.ActionSpatial();
                }
                ActionRender.MergeFrom(other.ActionRender);
            }
            if (other.HasActionUi)
            {
                if (!HasActionUi)
                {
                    ActionUi = new global::SC2APIProtocol.ActionUI();
                }
                ActionUi.MergeFrom(other.ActionUi);
            }
            if (other.HasActionChat)
            {
                if (!HasActionChat)
                {
                    ActionChat = new global::SC2APIProtocol.ActionChat();
                }
                ActionChat.MergeFrom(other.ActionChat);
            }
            if (other.HasGameLoop)
            {
                GameLoop = other.GameLoop;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (!HasActionRaw)
                            {
                                ActionRaw = new global::SC2APIProtocol.ActionRaw();
                            }
                            input.ReadMessage(ActionRaw);
                            break;
                        }
                    case 18:
                        {
                            if (!HasActionFeatureLayer)
                            {
                                ActionFeatureLayer = new global::SC2APIProtocol.ActionSpatial();
                            }
                            input.ReadMessage(ActionFeatureLayer);
                            break;
                        }
                    case 26:
                        {
                            if (!HasActionRender)
                            {
                                ActionRender = new global::SC2APIProtocol.ActionSpatial();
                            }
                            input.ReadMessage(ActionRender);
                            break;
                        }
                    case 34:
                        {
                            if (!HasActionUi)
                            {
                                ActionUi = new global::SC2APIProtocol.ActionUI();
                            }
                            input.ReadMessage(ActionUi);
                            break;
                        }
                    case 50:
                        {
                            if (!HasActionChat)
                            {
                                ActionChat = new global::SC2APIProtocol.ActionChat();
                            }
                            input.ReadMessage(ActionChat);
                            break;
                        }
                    case 56:
                        {
                            GameLoop = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ActionChat : pb::IMessage<ActionChat>
    {
        private static readonly pb::MessageParser<ActionChat> _parser = new pb::MessageParser<ActionChat>(() => new ActionChat());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActionChat> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[55]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionChat()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionChat(ActionChat other) : this()
        {
            _hasBits0 = other._hasBits0;
            channel_ = other.channel_;
            message_ = other.message_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionChat Clone()
        {
            return new ActionChat(this);
        }

        /// <summary>Field number for the "channel" field.</summary>
        public const int ChannelFieldNumber = 1;
        private readonly static global::SC2APIProtocol.ActionChat.Types.Channel ChannelDefaultValue = global::SC2APIProtocol.ActionChat.Types.Channel.Broadcast;

        private global::SC2APIProtocol.ActionChat.Types.Channel channel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ActionChat.Types.Channel Channel
        {
            get { if ((_hasBits0 & 1) != 0) { return channel_; } else { return ChannelDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                channel_ = value;
            }
        }
        /// <summary>Gets whether the "channel" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasChannel
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "channel" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearChannel()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 2;
        private readonly static string MessageDefaultValue = "";

        private string message_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Message
        {
            get { return message_ ?? MessageDefaultValue; }
            set
            {
                message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "message" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMessage
        {
            get { return message_ != null; }
        }
        /// <summary>Clears the value of the "message" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMessage()
        {
            message_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ActionChat);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActionChat other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Channel != other.Channel) return false;
            if (Message != other.Message) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasChannel) hash ^= Channel.GetHashCode();
            if (HasMessage) hash ^= Message.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasChannel)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Channel);
            }
            if (HasMessage)
            {
                output.WriteRawTag(18);
                output.WriteString(Message);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasChannel)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Channel);
            }
            if (HasMessage)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActionChat other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasChannel)
            {
                Channel = other.Channel;
            }
            if (other.HasMessage)
            {
                Message = other.Message;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Channel = (global::SC2APIProtocol.ActionChat.Types.Channel)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            Message = input.ReadString();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ActionChat message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum Channel
            {
                [pbr::OriginalName("Broadcast")] Broadcast = 1,
                [pbr::OriginalName("Team")] Team = 2,
            }

        }
        #endregion

    }

    public sealed partial class ActionError : pb::IMessage<ActionError>
    {
        private static readonly pb::MessageParser<ActionError> _parser = new pb::MessageParser<ActionError>(() => new ActionError());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActionError> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[56]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionError()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionError(ActionError other) : this()
        {
            _hasBits0 = other._hasBits0;
            unitTag_ = other.unitTag_;
            abilityId_ = other.abilityId_;
            result_ = other.result_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionError Clone()
        {
            return new ActionError(this);
        }

        /// <summary>Field number for the "unit_tag" field.</summary>
        public const int UnitTagFieldNumber = 1;
        private readonly static ulong UnitTagDefaultValue = 0UL;

        private ulong unitTag_;
        /// <summary>
        /// Only populated when using raw interface.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong UnitTag
        {
            get { if ((_hasBits0 & 1) != 0) { return unitTag_; } else { return UnitTagDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                unitTag_ = value;
            }
        }
        /// <summary>Gets whether the "unit_tag" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnitTag
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "unit_tag" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnitTag()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "ability_id" field.</summary>
        public const int AbilityIdFieldNumber = 2;
        private readonly static ulong AbilityIdDefaultValue = 0UL;

        private ulong abilityId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong AbilityId
        {
            get { if ((_hasBits0 & 2) != 0) { return abilityId_; } else { return AbilityIdDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                abilityId_ = value;
            }
        }
        /// <summary>Gets whether the "ability_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAbilityId
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "ability_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAbilityId()
        {
            _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 3;
        private readonly static global::SC2APIProtocol.ActionResult ResultDefaultValue = global::SC2APIProtocol.ActionResult.Success;

        private global::SC2APIProtocol.ActionResult result_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ActionResult Result
        {
            get { if ((_hasBits0 & 4) != 0) { return result_; } else { return ResultDefaultValue; } }
            set
            {
                _hasBits0 |= 4;
                result_ = value;
            }
        }
        /// <summary>Gets whether the "result" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasResult
        {
            get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "result" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearResult()
        {
            _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ActionError);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActionError other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UnitTag != other.UnitTag) return false;
            if (AbilityId != other.AbilityId) return false;
            if (Result != other.Result) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasUnitTag) hash ^= UnitTag.GetHashCode();
            if (HasAbilityId) hash ^= AbilityId.GetHashCode();
            if (HasResult) hash ^= Result.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasUnitTag)
            {
                output.WriteRawTag(8);
                output.WriteUInt64(UnitTag);
            }
            if (HasAbilityId)
            {
                output.WriteRawTag(16);
                output.WriteUInt64(AbilityId);
            }
            if (HasResult)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)Result);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasUnitTag)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UnitTag);
            }
            if (HasAbilityId)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AbilityId);
            }
            if (HasResult)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Result);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActionError other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasUnitTag)
            {
                UnitTag = other.UnitTag;
            }
            if (other.HasAbilityId)
            {
                AbilityId = other.AbilityId;
            }
            if (other.HasResult)
            {
                Result = other.Result;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            UnitTag = input.ReadUInt64();
                            break;
                        }
                    case 16:
                        {
                            AbilityId = input.ReadUInt64();
                            break;
                        }
                    case 24:
                        {
                            Result = (global::SC2APIProtocol.ActionResult)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ObserverAction : pb::IMessage<ObserverAction>
    {
        private static readonly pb::MessageParser<ObserverAction> _parser = new pb::MessageParser<ObserverAction>(() => new ObserverAction());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ObserverAction> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[57]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ObserverAction()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ObserverAction(ObserverAction other) : this()
        {
            switch (other.ActionCase)
            {
                case ActionOneofCase.PlayerPerspective:
                    PlayerPerspective = other.PlayerPerspective.Clone();
                    break;
                case ActionOneofCase.CameraMove:
                    CameraMove = other.CameraMove.Clone();
                    break;
                case ActionOneofCase.CameraFollowPlayer:
                    CameraFollowPlayer = other.CameraFollowPlayer.Clone();
                    break;
                case ActionOneofCase.CameraFollowUnits:
                    CameraFollowUnits = other.CameraFollowUnits.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ObserverAction Clone()
        {
            return new ObserverAction(this);
        }

        /// <summary>Field number for the "player_perspective" field.</summary>
        public const int PlayerPerspectiveFieldNumber = 1;
        /// <summary>
        /// Not implemented
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ActionObserverPlayerPerspective PlayerPerspective
        {
            get { return HasPlayerPerspective ? (global::SC2APIProtocol.ActionObserverPlayerPerspective)action_ : null; }
            set
            {
                action_ = value;
                actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.PlayerPerspective;
            }
        }
        /// <summary>Gets whether the "player_perspective" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerPerspective
        {
            get { return actionCase_ == ActionOneofCase.PlayerPerspective; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "player_perspective" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerPerspective()
        {
            if (HasPlayerPerspective)
            {
                ClearAction();
            }
        }

        /// <summary>Field number for the "camera_move" field.</summary>
        public const int CameraMoveFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ActionObserverCameraMove CameraMove
        {
            get { return HasCameraMove ? (global::SC2APIProtocol.ActionObserverCameraMove)action_ : null; }
            set
            {
                action_ = value;
                actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.CameraMove;
            }
        }
        /// <summary>Gets whether the "camera_move" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCameraMove
        {
            get { return actionCase_ == ActionOneofCase.CameraMove; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "camera_move" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCameraMove()
        {
            if (HasCameraMove)
            {
                ClearAction();
            }
        }

        /// <summary>Field number for the "camera_follow_player" field.</summary>
        public const int CameraFollowPlayerFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ActionObserverCameraFollowPlayer CameraFollowPlayer
        {
            get { return HasCameraFollowPlayer ? (global::SC2APIProtocol.ActionObserverCameraFollowPlayer)action_ : null; }
            set
            {
                action_ = value;
                actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.CameraFollowPlayer;
            }
        }
        /// <summary>Gets whether the "camera_follow_player" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCameraFollowPlayer
        {
            get { return actionCase_ == ActionOneofCase.CameraFollowPlayer; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "camera_follow_player" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCameraFollowPlayer()
        {
            if (HasCameraFollowPlayer)
            {
                ClearAction();
            }
        }

        /// <summary>Field number for the "camera_follow_units" field.</summary>
        public const int CameraFollowUnitsFieldNumber = 4;
        /// <summary>
        /// Not implemented
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ActionObserverCameraFollowUnits CameraFollowUnits
        {
            get { return HasCameraFollowUnits ? (global::SC2APIProtocol.ActionObserverCameraFollowUnits)action_ : null; }
            set
            {
                action_ = value;
                actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.CameraFollowUnits;
            }
        }
        /// <summary>Gets whether the "camera_follow_units" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCameraFollowUnits
        {
            get { return actionCase_ == ActionOneofCase.CameraFollowUnits; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "camera_follow_units" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCameraFollowUnits()
        {
            if (HasCameraFollowUnits)
            {
                ClearAction();
            }
        }

        private object action_;
        /// <summary>Enum of possible cases for the "action" oneof.</summary>
        public enum ActionOneofCase
        {
            None = 0,
            PlayerPerspective = 1,
            CameraMove = 2,
            CameraFollowPlayer = 3,
            CameraFollowUnits = 4,
        }
        private ActionOneofCase actionCase_ = ActionOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionOneofCase ActionCase
        {
            get { return actionCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAction()
        {
            actionCase_ = ActionOneofCase.None;
            action_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ObserverAction);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ObserverAction other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(PlayerPerspective, other.PlayerPerspective)) return false;
            if (!object.Equals(CameraMove, other.CameraMove)) return false;
            if (!object.Equals(CameraFollowPlayer, other.CameraFollowPlayer)) return false;
            if (!object.Equals(CameraFollowUnits, other.CameraFollowUnits)) return false;
            if (ActionCase != other.ActionCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasPlayerPerspective) hash ^= PlayerPerspective.GetHashCode();
            if (HasCameraMove) hash ^= CameraMove.GetHashCode();
            if (HasCameraFollowPlayer) hash ^= CameraFollowPlayer.GetHashCode();
            if (HasCameraFollowUnits) hash ^= CameraFollowUnits.GetHashCode();
            hash ^= (int)actionCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasPlayerPerspective)
            {
                output.WriteRawTag(10);
                output.WriteMessage(PlayerPerspective);
            }
            if (HasCameraMove)
            {
                output.WriteRawTag(18);
                output.WriteMessage(CameraMove);
            }
            if (HasCameraFollowPlayer)
            {
                output.WriteRawTag(26);
                output.WriteMessage(CameraFollowPlayer);
            }
            if (HasCameraFollowUnits)
            {
                output.WriteRawTag(34);
                output.WriteMessage(CameraFollowUnits);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasPlayerPerspective)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerPerspective);
            }
            if (HasCameraMove)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CameraMove);
            }
            if (HasCameraFollowPlayer)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CameraFollowPlayer);
            }
            if (HasCameraFollowUnits)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CameraFollowUnits);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ObserverAction other)
        {
            if (other == null)
            {
                return;
            }
            switch (other.ActionCase)
            {
                case ActionOneofCase.PlayerPerspective:
                    if (PlayerPerspective == null)
                    {
                        PlayerPerspective = new global::SC2APIProtocol.ActionObserverPlayerPerspective();
                    }
                    PlayerPerspective.MergeFrom(other.PlayerPerspective);
                    break;
                case ActionOneofCase.CameraMove:
                    if (CameraMove == null)
                    {
                        CameraMove = new global::SC2APIProtocol.ActionObserverCameraMove();
                    }
                    CameraMove.MergeFrom(other.CameraMove);
                    break;
                case ActionOneofCase.CameraFollowPlayer:
                    if (CameraFollowPlayer == null)
                    {
                        CameraFollowPlayer = new global::SC2APIProtocol.ActionObserverCameraFollowPlayer();
                    }
                    CameraFollowPlayer.MergeFrom(other.CameraFollowPlayer);
                    break;
                case ActionOneofCase.CameraFollowUnits:
                    if (CameraFollowUnits == null)
                    {
                        CameraFollowUnits = new global::SC2APIProtocol.ActionObserverCameraFollowUnits();
                    }
                    CameraFollowUnits.MergeFrom(other.CameraFollowUnits);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            global::SC2APIProtocol.ActionObserverPlayerPerspective subBuilder = new global::SC2APIProtocol.ActionObserverPlayerPerspective();
                            if (HasPlayerPerspective)
                            {
                                subBuilder.MergeFrom(PlayerPerspective);
                            }
                            input.ReadMessage(subBuilder);
                            PlayerPerspective = subBuilder;
                            break;
                        }
                    case 18:
                        {
                            global::SC2APIProtocol.ActionObserverCameraMove subBuilder = new global::SC2APIProtocol.ActionObserverCameraMove();
                            if (HasCameraMove)
                            {
                                subBuilder.MergeFrom(CameraMove);
                            }
                            input.ReadMessage(subBuilder);
                            CameraMove = subBuilder;
                            break;
                        }
                    case 26:
                        {
                            global::SC2APIProtocol.ActionObserverCameraFollowPlayer subBuilder = new global::SC2APIProtocol.ActionObserverCameraFollowPlayer();
                            if (HasCameraFollowPlayer)
                            {
                                subBuilder.MergeFrom(CameraFollowPlayer);
                            }
                            input.ReadMessage(subBuilder);
                            CameraFollowPlayer = subBuilder;
                            break;
                        }
                    case 34:
                        {
                            global::SC2APIProtocol.ActionObserverCameraFollowUnits subBuilder = new global::SC2APIProtocol.ActionObserverCameraFollowUnits();
                            if (HasCameraFollowUnits)
                            {
                                subBuilder.MergeFrom(CameraFollowUnits);
                            }
                            input.ReadMessage(subBuilder);
                            CameraFollowUnits = subBuilder;
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ActionObserverPlayerPerspective : pb::IMessage<ActionObserverPlayerPerspective>
    {
        private static readonly pb::MessageParser<ActionObserverPlayerPerspective> _parser = new pb::MessageParser<ActionObserverPlayerPerspective>(() => new ActionObserverPlayerPerspective());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActionObserverPlayerPerspective> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[58]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionObserverPlayerPerspective()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionObserverPlayerPerspective(ActionObserverPlayerPerspective other) : this()
        {
            _hasBits0 = other._hasBits0;
            playerId_ = other.playerId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionObserverPlayerPerspective Clone()
        {
            return new ActionObserverPlayerPerspective(this);
        }

        /// <summary>Field number for the "player_id" field.</summary>
        public const int PlayerIdFieldNumber = 1;
        private readonly static uint PlayerIdDefaultValue = 0;

        private uint playerId_;
        /// <summary>
        /// 0 to observe "Everyone"
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PlayerId
        {
            get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                playerId_ = value;
            }
        }
        /// <summary>Gets whether the "player_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerId
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "player_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerId()
        {
            _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ActionObserverPlayerPerspective);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActionObserverPlayerPerspective other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (PlayerId != other.PlayerId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasPlayerId) hash ^= PlayerId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasPlayerId)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(PlayerId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasPlayerId)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActionObserverPlayerPerspective other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasPlayerId)
            {
                PlayerId = other.PlayerId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            PlayerId = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ActionObserverCameraMove : pb::IMessage<ActionObserverCameraMove>
    {
        private static readonly pb::MessageParser<ActionObserverCameraMove> _parser = new pb::MessageParser<ActionObserverCameraMove>(() => new ActionObserverCameraMove());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActionObserverCameraMove> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[59]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionObserverCameraMove()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionObserverCameraMove(ActionObserverCameraMove other) : this()
        {
            _hasBits0 = other._hasBits0;
            worldPos_ = other.HasWorldPos ? other.worldPos_.Clone() : null;
            distance_ = other.distance_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionObserverCameraMove Clone()
        {
            return new ActionObserverCameraMove(this);
        }

        /// <summary>Field number for the "world_pos" field.</summary>
        public const int WorldPosFieldNumber = 1;
        private global::SC2APIProtocol.Point2D worldPos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.Point2D WorldPos
        {
            get { return worldPos_; }
            set
            {
                worldPos_ = value;
            }
        }
        /// <summary>Gets whether the world_pos field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasWorldPos
        {
            get { return worldPos_ != null; }
        }
        /// <summary>Clears the value of the world_pos field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearWorldPos()
        {
            worldPos_ = null;
        }

        /// <summary>Field number for the "distance" field.</summary>
        public const int DistanceFieldNumber = 2;
        private readonly static float DistanceDefaultValue = 0F;

        private float distance_;
        /// <summary>
        /// Distance between camera and terrain. Larger value zooms out camera.
        /// Defaults to standard camera distance if set to 0.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Distance
        {
            get { if ((_hasBits0 & 1) != 0) { return distance_; } else { return DistanceDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                distance_ = value;
            }
        }
        /// <summary>Gets whether the "distance" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDistance
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "distance" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDistance()
        {
            _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ActionObserverCameraMove);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActionObserverCameraMove other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(WorldPos, other.WorldPos)) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Distance, other.Distance)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasWorldPos) hash ^= WorldPos.GetHashCode();
            if (HasDistance) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Distance);
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasWorldPos)
            {
                output.WriteRawTag(10);
                output.WriteMessage(WorldPos);
            }
            if (HasDistance)
            {
                output.WriteRawTag(21);
                output.WriteFloat(Distance);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasWorldPos)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(WorldPos);
            }
            if (HasDistance)
            {
                size += 1 + 4;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActionObserverCameraMove other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasWorldPos)
            {
                if (!HasWorldPos)
                {
                    WorldPos = new global::SC2APIProtocol.Point2D();
                }
                WorldPos.MergeFrom(other.WorldPos);
            }
            if (other.HasDistance)
            {
                Distance = other.Distance;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (!HasWorldPos)
                            {
                                WorldPos = new global::SC2APIProtocol.Point2D();
                            }
                            input.ReadMessage(WorldPos);
                            break;
                        }
                    case 21:
                        {
                            Distance = input.ReadFloat();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ActionObserverCameraFollowPlayer : pb::IMessage<ActionObserverCameraFollowPlayer>
    {
        private static readonly pb::MessageParser<ActionObserverCameraFollowPlayer> _parser = new pb::MessageParser<ActionObserverCameraFollowPlayer>(() => new ActionObserverCameraFollowPlayer());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActionObserverCameraFollowPlayer> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[60]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionObserverCameraFollowPlayer()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionObserverCameraFollowPlayer(ActionObserverCameraFollowPlayer other) : this()
        {
            _hasBits0 = other._hasBits0;
            playerId_ = other.playerId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionObserverCameraFollowPlayer Clone()
        {
            return new ActionObserverCameraFollowPlayer(this);
        }

        /// <summary>Field number for the "player_id" field.</summary>
        public const int PlayerIdFieldNumber = 1;
        private readonly static uint PlayerIdDefaultValue = 0;

        private uint playerId_;
        /// <summary>
        /// Not implemented. Value must be [1, 15]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PlayerId
        {
            get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                playerId_ = value;
            }
        }
        /// <summary>Gets whether the "player_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerId
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "player_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerId()
        {
            _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ActionObserverCameraFollowPlayer);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActionObserverCameraFollowPlayer other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (PlayerId != other.PlayerId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasPlayerId) hash ^= PlayerId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasPlayerId)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(PlayerId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasPlayerId)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActionObserverCameraFollowPlayer other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasPlayerId)
            {
                PlayerId = other.PlayerId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            PlayerId = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ActionObserverCameraFollowUnits : pb::IMessage<ActionObserverCameraFollowUnits>
    {
        private static readonly pb::MessageParser<ActionObserverCameraFollowUnits> _parser = new pb::MessageParser<ActionObserverCameraFollowUnits>(() => new ActionObserverCameraFollowUnits());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActionObserverCameraFollowUnits> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[61]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionObserverCameraFollowUnits()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionObserverCameraFollowUnits(ActionObserverCameraFollowUnits other) : this()
        {
            unitTags_ = other.unitTags_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionObserverCameraFollowUnits Clone()
        {
            return new ActionObserverCameraFollowUnits(this);
        }

        /// <summary>Field number for the "unit_tags" field.</summary>
        public const int UnitTagsFieldNumber = 1;
        private static readonly pb::FieldCodec<ulong> _repeated_unitTags_codec
            = pb::FieldCodec.ForUInt64(8);
        private readonly pbc::RepeatedField<ulong> unitTags_ = new pbc::RepeatedField<ulong>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ulong> UnitTags
        {
            get { return unitTags_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ActionObserverCameraFollowUnits);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActionObserverCameraFollowUnits other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!unitTags_.Equals(other.unitTags_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= unitTags_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            unitTags_.WriteTo(output, _repeated_unitTags_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += unitTags_.CalculateSize(_repeated_unitTags_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActionObserverCameraFollowUnits other)
        {
            if (other == null)
            {
                return;
            }
            unitTags_.Add(other.unitTags_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                    case 8:
                        {
                            unitTags_.AddEntriesFrom(input, _repeated_unitTags_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class PlayerResult : pb::IMessage<PlayerResult>
    {
        private static readonly pb::MessageParser<PlayerResult> _parser = new pb::MessageParser<PlayerResult>(() => new PlayerResult());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerResult> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.Sc2ApiReflection.Descriptor.MessageTypes[62]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerResult()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerResult(PlayerResult other) : this()
        {
            _hasBits0 = other._hasBits0;
            playerId_ = other.playerId_;
            result_ = other.result_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerResult Clone()
        {
            return new PlayerResult(this);
        }

        /// <summary>Field number for the "player_id" field.</summary>
        public const int PlayerIdFieldNumber = 1;
        private readonly static uint PlayerIdDefaultValue = 0;

        private uint playerId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PlayerId
        {
            get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                playerId_ = value;
            }
        }
        /// <summary>Gets whether the "player_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerId
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "player_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerId()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 2;
        private readonly static global::SC2APIProtocol.Result ResultDefaultValue = global::SC2APIProtocol.Result.Victory;

        private global::SC2APIProtocol.Result result_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.Result Result
        {
            get { if ((_hasBits0 & 2) != 0) { return result_; } else { return ResultDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                result_ = value;
            }
        }
        /// <summary>Gets whether the "result" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasResult
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "result" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearResult()
        {
            _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PlayerResult);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerResult other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (PlayerId != other.PlayerId) return false;
            if (Result != other.Result) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasPlayerId) hash ^= PlayerId.GetHashCode();
            if (HasResult) hash ^= Result.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasPlayerId)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(PlayerId);
            }
            if (HasResult)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Result);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasPlayerId)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
            }
            if (HasResult)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Result);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerResult other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasPlayerId)
            {
                PlayerId = other.PlayerId;
            }
            if (other.HasResult)
            {
                Result = other.Result;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            PlayerId = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            Result = (global::SC2APIProtocol.Result)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code
