// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: s2clientprotocol/spatial.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SC2APIProtocol
{

    /// <summary>Holder for reflection information generated from s2clientprotocol/spatial.proto</summary>
    public static partial class SpatialReflection
    {

        #region Descriptor
        /// <summary>File descriptor for s2clientprotocol/spatial.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static SpatialReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "Ch5zMmNsaWVudHByb3RvY29sL3NwYXRpYWwucHJvdG8SDlNDMkFQSVByb3Rv",
                  "Y29sGh1zMmNsaWVudHByb3RvY29sL2NvbW1vbi5wcm90byKIAQoXT2JzZXJ2",
                  "YXRpb25GZWF0dXJlTGF5ZXISLgoHcmVuZGVycxgBIAEoCzIdLlNDMkFQSVBy",
                  "b3RvY29sLkZlYXR1cmVMYXllcnMSPQoPbWluaW1hcF9yZW5kZXJzGAIgASgL",
                  "MiQuU0MyQVBJUHJvdG9jb2wuRmVhdHVyZUxheWVyc01pbmltYXAinAoKDUZl",
                  "YXR1cmVMYXllcnMSLQoKaGVpZ2h0X21hcBgBIAEoCzIZLlNDMkFQSVByb3Rv",
                  "Y29sLkltYWdlRGF0YRIxCg52aXNpYmlsaXR5X21hcBgCIAEoCzIZLlNDMkFQ",
                  "SVByb3RvY29sLkltYWdlRGF0YRIoCgVjcmVlcBgDIAEoCzIZLlNDMkFQSVBy",
                  "b3RvY29sLkltYWdlRGF0YRIoCgVwb3dlchgEIAEoCzIZLlNDMkFQSVByb3Rv",
                  "Y29sLkltYWdlRGF0YRIsCglwbGF5ZXJfaWQYBSABKAsyGS5TQzJBUElQcm90",
                  "b2NvbC5JbWFnZURhdGESLAoJdW5pdF90eXBlGAYgASgLMhkuU0MyQVBJUHJv",
                  "dG9jb2wuSW1hZ2VEYXRhEisKCHNlbGVjdGVkGAcgASgLMhkuU0MyQVBJUHJv",
                  "dG9jb2wuSW1hZ2VEYXRhEjIKD3VuaXRfaGl0X3BvaW50cxgIIAEoCzIZLlND",
                  "MkFQSVByb3RvY29sLkltYWdlRGF0YRI4ChV1bml0X2hpdF9wb2ludHNfcmF0",
                  "aW8YESABKAsyGS5TQzJBUElQcm90b2NvbC5JbWFnZURhdGESLgoLdW5pdF9l",
                  "bmVyZ3kYCSABKAsyGS5TQzJBUElQcm90b2NvbC5JbWFnZURhdGESNAoRdW5p",
                  "dF9lbmVyZ3lfcmF0aW8YEiABKAsyGS5TQzJBUElQcm90b2NvbC5JbWFnZURh",
                  "dGESLwoMdW5pdF9zaGllbGRzGAogASgLMhkuU0MyQVBJUHJvdG9jb2wuSW1h",
                  "Z2VEYXRhEjUKEnVuaXRfc2hpZWxkc19yYXRpbxgTIAEoCzIZLlNDMkFQSVBy",
                  "b3RvY29sLkltYWdlRGF0YRIyCg9wbGF5ZXJfcmVsYXRpdmUYCyABKAsyGS5T",
                  "QzJBUElQcm90b2NvbC5JbWFnZURhdGESMgoPdW5pdF9kZW5zaXR5X2FhGA4g",
                  "ASgLMhkuU0MyQVBJUHJvdG9jb2wuSW1hZ2VEYXRhEi8KDHVuaXRfZGVuc2l0",
                  "eRgPIAEoCzIZLlNDMkFQSVByb3RvY29sLkltYWdlRGF0YRIqCgdlZmZlY3Rz",
                  "GBQgASgLMhkuU0MyQVBJUHJvdG9jb2wuSW1hZ2VEYXRhEjEKDmhhbGx1Y2lu",
                  "YXRpb25zGBUgASgLMhkuU0MyQVBJUHJvdG9jb2wuSW1hZ2VEYXRhEioKB2Ns",
                  "b2FrZWQYFiABKAsyGS5TQzJBUElQcm90b2NvbC5JbWFnZURhdGESJwoEYmxp",
                  "cBgXIAEoCzIZLlNDMkFQSVByb3RvY29sLkltYWdlRGF0YRIoCgVidWZmcxgY",
                  "IAEoCzIZLlNDMkFQSVByb3RvY29sLkltYWdlRGF0YRIwCg1idWZmX2R1cmF0",
                  "aW9uGBogASgLMhkuU0MyQVBJUHJvdG9jb2wuSW1hZ2VEYXRhEikKBmFjdGl2",
                  "ZRgZIAEoCzIZLlNDMkFQSVByb3RvY29sLkltYWdlRGF0YRIxCg5idWlsZF9w",
                  "cm9ncmVzcxgbIAEoCzIZLlNDMkFQSVByb3RvY29sLkltYWdlRGF0YRIsCgli",
                  "dWlsZGFibGUYHCABKAsyGS5TQzJBUElQcm90b2NvbC5JbWFnZURhdGESKwoI",
                  "cGF0aGFibGUYHSABKAsyGS5TQzJBUElQcm90b2NvbC5JbWFnZURhdGESLgoL",
                  "cGxhY2Vob2xkZXIYHiABKAsyGS5TQzJBUElQcm90b2NvbC5JbWFnZURhdGEi",
                  "kAQKFEZlYXR1cmVMYXllcnNNaW5pbWFwEi0KCmhlaWdodF9tYXAYASABKAsy",
                  "GS5TQzJBUElQcm90b2NvbC5JbWFnZURhdGESMQoOdmlzaWJpbGl0eV9tYXAY",
                  "AiABKAsyGS5TQzJBUElQcm90b2NvbC5JbWFnZURhdGESKAoFY3JlZXAYAyAB",
                  "KAsyGS5TQzJBUElQcm90b2NvbC5JbWFnZURhdGESKQoGY2FtZXJhGAQgASgL",
                  "MhkuU0MyQVBJUHJvdG9jb2wuSW1hZ2VEYXRhEiwKCXBsYXllcl9pZBgFIAEo",
                  "CzIZLlNDMkFQSVByb3RvY29sLkltYWdlRGF0YRIyCg9wbGF5ZXJfcmVsYXRp",
                  "dmUYBiABKAsyGS5TQzJBUElQcm90b2NvbC5JbWFnZURhdGESKwoIc2VsZWN0",
                  "ZWQYByABKAsyGS5TQzJBUElQcm90b2NvbC5JbWFnZURhdGESKQoGYWxlcnRz",
                  "GAkgASgLMhkuU0MyQVBJUHJvdG9jb2wuSW1hZ2VEYXRhEiwKCWJ1aWxkYWJs",
                  "ZRgKIAEoCzIZLlNDMkFQSVByb3RvY29sLkltYWdlRGF0YRIrCghwYXRoYWJs",
                  "ZRgLIAEoCzIZLlNDMkFQSVByb3RvY29sLkltYWdlRGF0YRIsCgl1bml0X3R5",
                  "cGUYCCABKAsyGS5TQzJBUElQcm90b2NvbC5JbWFnZURhdGEiZwoRT2JzZXJ2",
                  "YXRpb25SZW5kZXISJgoDbWFwGAEgASgLMhkuU0MyQVBJUHJvdG9jb2wuSW1h",
                  "Z2VEYXRhEioKB21pbmltYXAYAiABKAsyGS5TQzJBUElQcm90b2NvbC5JbWFn",
                  "ZURhdGEiuwIKDUFjdGlvblNwYXRpYWwSQAoMdW5pdF9jb21tYW5kGAEgASgL",
                  "MiguU0MyQVBJUHJvdG9jb2wuQWN0aW9uU3BhdGlhbFVuaXRDb21tYW5kSAAS",
                  "PgoLY2FtZXJhX21vdmUYAiABKAsyJy5TQzJBUElQcm90b2NvbC5BY3Rpb25T",
                  "cGF0aWFsQ2FtZXJhTW92ZUgAEk8KFHVuaXRfc2VsZWN0aW9uX3BvaW50GAMg",
                  "ASgLMi8uU0MyQVBJUHJvdG9jb2wuQWN0aW9uU3BhdGlhbFVuaXRTZWxlY3Rp",
                  "b25Qb2ludEgAEk0KE3VuaXRfc2VsZWN0aW9uX3JlY3QYBCABKAsyLi5TQzJB",
                  "UElQcm90b2NvbC5BY3Rpb25TcGF0aWFsVW5pdFNlbGVjdGlvblJlY3RIAEII",
                  "CgZhY3Rpb24ivgEKGEFjdGlvblNwYXRpYWxVbml0Q29tbWFuZBISCgphYmls",
                  "aXR5X2lkGAEgASgFEjUKE3RhcmdldF9zY3JlZW5fY29vcmQYAiABKAsyFi5T",
                  "QzJBUElQcm90b2NvbC5Qb2ludElIABI2ChR0YXJnZXRfbWluaW1hcF9jb29y",
                  "ZBgDIAEoCzIWLlNDMkFQSVByb3RvY29sLlBvaW50SUgAEhUKDXF1ZXVlX2Nv",
                  "bW1hbmQYBCABKAhCCAoGdGFyZ2V0IkkKF0FjdGlvblNwYXRpYWxDYW1lcmFN",
                  "b3ZlEi4KDmNlbnRlcl9taW5pbWFwGAEgASgLMhYuU0MyQVBJUHJvdG9jb2wu",
                  "UG9pbnRJItoBCh9BY3Rpb25TcGF0aWFsVW5pdFNlbGVjdGlvblBvaW50EjYK",
                  "FnNlbGVjdGlvbl9zY3JlZW5fY29vcmQYASABKAsyFi5TQzJBUElQcm90b2Nv",
                  "bC5Qb2ludEkSQgoEdHlwZRgCIAEoDjI0LlNDMkFQSVByb3RvY29sLkFjdGlv",
                  "blNwYXRpYWxVbml0U2VsZWN0aW9uUG9pbnQuVHlwZSI7CgRUeXBlEgoKBlNl",
                  "bGVjdBABEgoKBlRvZ2dsZRACEgsKB0FsbFR5cGUQAxIOCgpBZGRBbGxUeXBl",
                  "EAQicwoeQWN0aW9uU3BhdGlhbFVuaXRTZWxlY3Rpb25SZWN0EjoKFnNlbGVj",
                  "dGlvbl9zY3JlZW5fY29vcmQYASADKAsyGi5TQzJBUElQcm90b2NvbC5SZWN0",
                  "YW5nbGVJEhUKDXNlbGVjdGlvbl9hZGQYAiABKAg="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { global::SC2APIProtocol.CommonReflection.Descriptor, },
                new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ObservationFeatureLayer), global::SC2APIProtocol.ObservationFeatureLayer.Parser, new[]{ "Renders", "MinimapRenders" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.FeatureLayers), global::SC2APIProtocol.FeatureLayers.Parser, new[]{ "HeightMap", "VisibilityMap", "Creep", "Power", "PlayerId", "UnitType", "Selected", "UnitHitPoints", "UnitHitPointsRatio", "UnitEnergy", "UnitEnergyRatio", "UnitShields", "UnitShieldsRatio", "PlayerRelative", "UnitDensityAa", "UnitDensity", "Effects", "Hallucinations", "Cloaked", "Blip", "Buffs", "BuffDuration", "Active", "BuildProgress", "Buildable", "Pathable", "Placeholder" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.FeatureLayersMinimap), global::SC2APIProtocol.FeatureLayersMinimap.Parser, new[]{ "HeightMap", "VisibilityMap", "Creep", "Camera", "PlayerId", "PlayerRelative", "Selected", "Alerts", "Buildable", "Pathable", "UnitType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ObservationRender), global::SC2APIProtocol.ObservationRender.Parser, new[]{ "Map", "Minimap" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionSpatial), global::SC2APIProtocol.ActionSpatial.Parser, new[]{ "UnitCommand", "CameraMove", "UnitSelectionPoint", "UnitSelectionRect" }, new[]{ "Action" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionSpatialUnitCommand), global::SC2APIProtocol.ActionSpatialUnitCommand.Parser, new[]{ "AbilityId", "TargetScreenCoord", "TargetMinimapCoord", "QueueCommand" }, new[]{ "Target" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionSpatialCameraMove), global::SC2APIProtocol.ActionSpatialCameraMove.Parser, new[]{ "CenterMinimap" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionSpatialUnitSelectionPoint), global::SC2APIProtocol.ActionSpatialUnitSelectionPoint.Parser, new[]{ "SelectionScreenCoord", "Type" }, null, new[]{ typeof(global::SC2APIProtocol.ActionSpatialUnitSelectionPoint.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionSpatialUnitSelectionRect), global::SC2APIProtocol.ActionSpatialUnitSelectionRect.Parser, new[]{ "SelectionScreenCoord", "SelectionAdd" }, null, null, null, null)
                }));
        }
        #endregion

    }
    #region Messages
    public sealed partial class ObservationFeatureLayer : pb::IMessage<ObservationFeatureLayer>
    {
        private static readonly pb::MessageParser<ObservationFeatureLayer> _parser = new pb::MessageParser<ObservationFeatureLayer>(() => new ObservationFeatureLayer());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ObservationFeatureLayer> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.SpatialReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ObservationFeatureLayer()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ObservationFeatureLayer(ObservationFeatureLayer other) : this()
        {
            renders_ = other.HasRenders ? other.renders_.Clone() : null;
            minimapRenders_ = other.HasMinimapRenders ? other.minimapRenders_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ObservationFeatureLayer Clone()
        {
            return new ObservationFeatureLayer(this);
        }

        /// <summary>Field number for the "renders" field.</summary>
        public const int RendersFieldNumber = 1;
        private global::SC2APIProtocol.FeatureLayers renders_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.FeatureLayers Renders
        {
            get { return renders_; }
            set
            {
                renders_ = value;
            }
        }
        /// <summary>Gets whether the renders field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRenders
        {
            get { return renders_ != null; }
        }
        /// <summary>Clears the value of the renders field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRenders()
        {
            renders_ = null;
        }

        /// <summary>Field number for the "minimap_renders" field.</summary>
        public const int MinimapRendersFieldNumber = 2;
        private global::SC2APIProtocol.FeatureLayersMinimap minimapRenders_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.FeatureLayersMinimap MinimapRenders
        {
            get { return minimapRenders_; }
            set
            {
                minimapRenders_ = value;
            }
        }
        /// <summary>Gets whether the minimap_renders field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMinimapRenders
        {
            get { return minimapRenders_ != null; }
        }
        /// <summary>Clears the value of the minimap_renders field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMinimapRenders()
        {
            minimapRenders_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ObservationFeatureLayer);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ObservationFeatureLayer other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Renders, other.Renders)) return false;
            if (!object.Equals(MinimapRenders, other.MinimapRenders)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasRenders) hash ^= Renders.GetHashCode();
            if (HasMinimapRenders) hash ^= MinimapRenders.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasRenders)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Renders);
            }
            if (HasMinimapRenders)
            {
                output.WriteRawTag(18);
                output.WriteMessage(MinimapRenders);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasRenders)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Renders);
            }
            if (HasMinimapRenders)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinimapRenders);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ObservationFeatureLayer other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasRenders)
            {
                if (!HasRenders)
                {
                    Renders = new global::SC2APIProtocol.FeatureLayers();
                }
                Renders.MergeFrom(other.Renders);
            }
            if (other.HasMinimapRenders)
            {
                if (!HasMinimapRenders)
                {
                    MinimapRenders = new global::SC2APIProtocol.FeatureLayersMinimap();
                }
                MinimapRenders.MergeFrom(other.MinimapRenders);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (!HasRenders)
                            {
                                Renders = new global::SC2APIProtocol.FeatureLayers();
                            }
                            input.ReadMessage(Renders);
                            break;
                        }
                    case 18:
                        {
                            if (!HasMinimapRenders)
                            {
                                MinimapRenders = new global::SC2APIProtocol.FeatureLayersMinimap();
                            }
                            input.ReadMessage(MinimapRenders);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class FeatureLayers : pb::IMessage<FeatureLayers>
    {
        private static readonly pb::MessageParser<FeatureLayers> _parser = new pb::MessageParser<FeatureLayers>(() => new FeatureLayers());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FeatureLayers> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.SpatialReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FeatureLayers()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FeatureLayers(FeatureLayers other) : this()
        {
            heightMap_ = other.HasHeightMap ? other.heightMap_.Clone() : null;
            visibilityMap_ = other.HasVisibilityMap ? other.visibilityMap_.Clone() : null;
            creep_ = other.HasCreep ? other.creep_.Clone() : null;
            power_ = other.HasPower ? other.power_.Clone() : null;
            playerId_ = other.HasPlayerId ? other.playerId_.Clone() : null;
            unitType_ = other.HasUnitType ? other.unitType_.Clone() : null;
            selected_ = other.HasSelected ? other.selected_.Clone() : null;
            unitHitPoints_ = other.HasUnitHitPoints ? other.unitHitPoints_.Clone() : null;
            unitHitPointsRatio_ = other.HasUnitHitPointsRatio ? other.unitHitPointsRatio_.Clone() : null;
            unitEnergy_ = other.HasUnitEnergy ? other.unitEnergy_.Clone() : null;
            unitEnergyRatio_ = other.HasUnitEnergyRatio ? other.unitEnergyRatio_.Clone() : null;
            unitShields_ = other.HasUnitShields ? other.unitShields_.Clone() : null;
            unitShieldsRatio_ = other.HasUnitShieldsRatio ? other.unitShieldsRatio_.Clone() : null;
            playerRelative_ = other.HasPlayerRelative ? other.playerRelative_.Clone() : null;
            unitDensityAa_ = other.HasUnitDensityAa ? other.unitDensityAa_.Clone() : null;
            unitDensity_ = other.HasUnitDensity ? other.unitDensity_.Clone() : null;
            effects_ = other.HasEffects ? other.effects_.Clone() : null;
            hallucinations_ = other.HasHallucinations ? other.hallucinations_.Clone() : null;
            cloaked_ = other.HasCloaked ? other.cloaked_.Clone() : null;
            blip_ = other.HasBlip ? other.blip_.Clone() : null;
            buffs_ = other.HasBuffs ? other.buffs_.Clone() : null;
            buffDuration_ = other.HasBuffDuration ? other.buffDuration_.Clone() : null;
            active_ = other.HasActive ? other.active_.Clone() : null;
            buildProgress_ = other.HasBuildProgress ? other.buildProgress_.Clone() : null;
            buildable_ = other.HasBuildable ? other.buildable_.Clone() : null;
            pathable_ = other.HasPathable ? other.pathable_.Clone() : null;
            placeholder_ = other.HasPlaceholder ? other.placeholder_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FeatureLayers Clone()
        {
            return new FeatureLayers(this);
        }

        /// <summary>Field number for the "height_map" field.</summary>
        public const int HeightMapFieldNumber = 1;
        private global::SC2APIProtocol.ImageData heightMap_;
        /// <summary>
        /// uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData HeightMap
        {
            get { return heightMap_; }
            set
            {
                heightMap_ = value;
            }
        }
        /// <summary>Gets whether the height_map field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeightMap
        {
            get { return heightMap_ != null; }
        }
        /// <summary>Clears the value of the height_map field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeightMap()
        {
            heightMap_ = null;
        }

        /// <summary>Field number for the "visibility_map" field.</summary>
        public const int VisibilityMapFieldNumber = 2;
        private global::SC2APIProtocol.ImageData visibilityMap_;
        /// <summary>
        /// uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData VisibilityMap
        {
            get { return visibilityMap_; }
            set
            {
                visibilityMap_ = value;
            }
        }
        /// <summary>Gets whether the visibility_map field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasVisibilityMap
        {
            get { return visibilityMap_ != null; }
        }
        /// <summary>Clears the value of the visibility_map field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearVisibilityMap()
        {
            visibilityMap_ = null;
        }

        /// <summary>Field number for the "creep" field.</summary>
        public const int CreepFieldNumber = 3;
        private global::SC2APIProtocol.ImageData creep_;
        /// <summary>
        /// 1-bit. Zerg creep.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData Creep
        {
            get { return creep_; }
            set
            {
                creep_ = value;
            }
        }
        /// <summary>Gets whether the creep field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCreep
        {
            get { return creep_ != null; }
        }
        /// <summary>Clears the value of the creep field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCreep()
        {
            creep_ = null;
        }

        /// <summary>Field number for the "power" field.</summary>
        public const int PowerFieldNumber = 4;
        private global::SC2APIProtocol.ImageData power_;
        /// <summary>
        /// 1-bit. Protoss power.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData Power
        {
            get { return power_; }
            set
            {
                power_ = value;
            }
        }
        /// <summary>Gets whether the power field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPower
        {
            get { return power_ != null; }
        }
        /// <summary>Clears the value of the power field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPower()
        {
            power_ = null;
        }

        /// <summary>Field number for the "player_id" field.</summary>
        public const int PlayerIdFieldNumber = 5;
        private global::SC2APIProtocol.ImageData playerId_;
        /// <summary>
        /// uint8. Participants: [1, 15] Neutral: 16
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData PlayerId
        {
            get { return playerId_; }
            set
            {
                playerId_ = value;
            }
        }
        /// <summary>Gets whether the player_id field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerId
        {
            get { return playerId_ != null; }
        }
        /// <summary>Clears the value of the player_id field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerId()
        {
            playerId_ = null;
        }

        /// <summary>Field number for the "unit_type" field.</summary>
        public const int UnitTypeFieldNumber = 6;
        private global::SC2APIProtocol.ImageData unitType_;
        /// <summary>
        /// int32. Unique identifier for type of unit.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData UnitType
        {
            get { return unitType_; }
            set
            {
                unitType_ = value;
            }
        }
        /// <summary>Gets whether the unit_type field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnitType
        {
            get { return unitType_ != null; }
        }
        /// <summary>Clears the value of the unit_type field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnitType()
        {
            unitType_ = null;
        }

        /// <summary>Field number for the "selected" field.</summary>
        public const int SelectedFieldNumber = 7;
        private global::SC2APIProtocol.ImageData selected_;
        /// <summary>
        /// 1-bit. Selected units.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData Selected
        {
            get { return selected_; }
            set
            {
                selected_ = value;
            }
        }
        /// <summary>Gets whether the selected field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSelected
        {
            get { return selected_ != null; }
        }
        /// <summary>Clears the value of the selected field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSelected()
        {
            selected_ = null;
        }

        /// <summary>Field number for the "unit_hit_points" field.</summary>
        public const int UnitHitPointsFieldNumber = 8;
        private global::SC2APIProtocol.ImageData unitHitPoints_;
        /// <summary>
        /// int32.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData UnitHitPoints
        {
            get { return unitHitPoints_; }
            set
            {
                unitHitPoints_ = value;
            }
        }
        /// <summary>Gets whether the unit_hit_points field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnitHitPoints
        {
            get { return unitHitPoints_ != null; }
        }
        /// <summary>Clears the value of the unit_hit_points field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnitHitPoints()
        {
            unitHitPoints_ = null;
        }

        /// <summary>Field number for the "unit_hit_points_ratio" field.</summary>
        public const int UnitHitPointsRatioFieldNumber = 17;
        private global::SC2APIProtocol.ImageData unitHitPointsRatio_;
        /// <summary>
        /// uint8. Ratio of current health to max health. [0%, 100%] encoded into [0, 255].
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData UnitHitPointsRatio
        {
            get { return unitHitPointsRatio_; }
            set
            {
                unitHitPointsRatio_ = value;
            }
        }
        /// <summary>Gets whether the unit_hit_points_ratio field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnitHitPointsRatio
        {
            get { return unitHitPointsRatio_ != null; }
        }
        /// <summary>Clears the value of the unit_hit_points_ratio field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnitHitPointsRatio()
        {
            unitHitPointsRatio_ = null;
        }

        /// <summary>Field number for the "unit_energy" field.</summary>
        public const int UnitEnergyFieldNumber = 9;
        private global::SC2APIProtocol.ImageData unitEnergy_;
        /// <summary>
        /// int32.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData UnitEnergy
        {
            get { return unitEnergy_; }
            set
            {
                unitEnergy_ = value;
            }
        }
        /// <summary>Gets whether the unit_energy field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnitEnergy
        {
            get { return unitEnergy_ != null; }
        }
        /// <summary>Clears the value of the unit_energy field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnitEnergy()
        {
            unitEnergy_ = null;
        }

        /// <summary>Field number for the "unit_energy_ratio" field.</summary>
        public const int UnitEnergyRatioFieldNumber = 18;
        private global::SC2APIProtocol.ImageData unitEnergyRatio_;
        /// <summary>
        /// uint8. Ratio of current energy to max energy. [0%, 100%] encoded into [0, 255].
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData UnitEnergyRatio
        {
            get { return unitEnergyRatio_; }
            set
            {
                unitEnergyRatio_ = value;
            }
        }
        /// <summary>Gets whether the unit_energy_ratio field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnitEnergyRatio
        {
            get { return unitEnergyRatio_ != null; }
        }
        /// <summary>Clears the value of the unit_energy_ratio field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnitEnergyRatio()
        {
            unitEnergyRatio_ = null;
        }

        /// <summary>Field number for the "unit_shields" field.</summary>
        public const int UnitShieldsFieldNumber = 10;
        private global::SC2APIProtocol.ImageData unitShields_;
        /// <summary>
        /// int32.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData UnitShields
        {
            get { return unitShields_; }
            set
            {
                unitShields_ = value;
            }
        }
        /// <summary>Gets whether the unit_shields field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnitShields
        {
            get { return unitShields_ != null; }
        }
        /// <summary>Clears the value of the unit_shields field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnitShields()
        {
            unitShields_ = null;
        }

        /// <summary>Field number for the "unit_shields_ratio" field.</summary>
        public const int UnitShieldsRatioFieldNumber = 19;
        private global::SC2APIProtocol.ImageData unitShieldsRatio_;
        /// <summary>
        /// uint8. Ratio of current shields to max shields. [0%, 100%] encoded into [0, 255].
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData UnitShieldsRatio
        {
            get { return unitShieldsRatio_; }
            set
            {
                unitShieldsRatio_ = value;
            }
        }
        /// <summary>Gets whether the unit_shields_ratio field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnitShieldsRatio
        {
            get { return unitShieldsRatio_ != null; }
        }
        /// <summary>Clears the value of the unit_shields_ratio field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnitShieldsRatio()
        {
            unitShieldsRatio_ = null;
        }

        /// <summary>Field number for the "player_relative" field.</summary>
        public const int PlayerRelativeFieldNumber = 11;
        private global::SC2APIProtocol.ImageData playerRelative_;
        /// <summary>
        /// uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData PlayerRelative
        {
            get { return playerRelative_; }
            set
            {
                playerRelative_ = value;
            }
        }
        /// <summary>Gets whether the player_relative field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerRelative
        {
            get { return playerRelative_ != null; }
        }
        /// <summary>Clears the value of the player_relative field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerRelative()
        {
            playerRelative_ = null;
        }

        /// <summary>Field number for the "unit_density_aa" field.</summary>
        public const int UnitDensityAaFieldNumber = 14;
        private global::SC2APIProtocol.ImageData unitDensityAa_;
        /// <summary>
        /// uint8. Density of units overlapping a pixel, anti-aliased. [0.0, 16.0f] encoded into [0, 255].
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData UnitDensityAa
        {
            get { return unitDensityAa_; }
            set
            {
                unitDensityAa_ = value;
            }
        }
        /// <summary>Gets whether the unit_density_aa field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnitDensityAa
        {
            get { return unitDensityAa_ != null; }
        }
        /// <summary>Clears the value of the unit_density_aa field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnitDensityAa()
        {
            unitDensityAa_ = null;
        }

        /// <summary>Field number for the "unit_density" field.</summary>
        public const int UnitDensityFieldNumber = 15;
        private global::SC2APIProtocol.ImageData unitDensity_;
        /// <summary>
        /// uint8. Count of units overlapping a pixel.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData UnitDensity
        {
            get { return unitDensity_; }
            set
            {
                unitDensity_ = value;
            }
        }
        /// <summary>Gets whether the unit_density field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnitDensity
        {
            get { return unitDensity_ != null; }
        }
        /// <summary>Clears the value of the unit_density field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnitDensity()
        {
            unitDensity_ = null;
        }

        /// <summary>Field number for the "effects" field.</summary>
        public const int EffectsFieldNumber = 20;
        private global::SC2APIProtocol.ImageData effects_;
        /// <summary>
        /// uint8. Visuals of persistent abilities. (eg. Psistorm)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData Effects
        {
            get { return effects_; }
            set
            {
                effects_ = value;
            }
        }
        /// <summary>Gets whether the effects field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasEffects
        {
            get { return effects_ != null; }
        }
        /// <summary>Clears the value of the effects field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearEffects()
        {
            effects_ = null;
        }

        /// <summary>Field number for the "hallucinations" field.</summary>
        public const int HallucinationsFieldNumber = 21;
        private global::SC2APIProtocol.ImageData hallucinations_;
        /// <summary>
        /// 1-bit. Whether the unit here is a hallucination.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData Hallucinations
        {
            get { return hallucinations_; }
            set
            {
                hallucinations_ = value;
            }
        }
        /// <summary>Gets whether the hallucinations field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHallucinations
        {
            get { return hallucinations_ != null; }
        }
        /// <summary>Clears the value of the hallucinations field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHallucinations()
        {
            hallucinations_ = null;
        }

        /// <summary>Field number for the "cloaked" field.</summary>
        public const int CloakedFieldNumber = 22;
        private global::SC2APIProtocol.ImageData cloaked_;
        /// <summary>
        /// 1-bit. Whether the unit here is cloaked. Hidden units will show up too, but with less details in other layers.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData Cloaked
        {
            get { return cloaked_; }
            set
            {
                cloaked_ = value;
            }
        }
        /// <summary>Gets whether the cloaked field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCloaked
        {
            get { return cloaked_ != null; }
        }
        /// <summary>Clears the value of the cloaked field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCloaked()
        {
            cloaked_ = null;
        }

        /// <summary>Field number for the "blip" field.</summary>
        public const int BlipFieldNumber = 23;
        private global::SC2APIProtocol.ImageData blip_;
        /// <summary>
        /// 1-bit. Whether the unit here is a blip.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData Blip
        {
            get { return blip_; }
            set
            {
                blip_ = value;
            }
        }
        /// <summary>Gets whether the blip field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBlip
        {
            get { return blip_ != null; }
        }
        /// <summary>Clears the value of the blip field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBlip()
        {
            blip_ = null;
        }

        /// <summary>Field number for the "buffs" field.</summary>
        public const int BuffsFieldNumber = 24;
        private global::SC2APIProtocol.ImageData buffs_;
        /// <summary>
        /// int32. One of the buffs applied to this unit. Extras are ignored.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData Buffs
        {
            get { return buffs_; }
            set
            {
                buffs_ = value;
            }
        }
        /// <summary>Gets whether the buffs field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBuffs
        {
            get { return buffs_ != null; }
        }
        /// <summary>Clears the value of the buffs field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBuffs()
        {
            buffs_ = null;
        }

        /// <summary>Field number for the "buff_duration" field.</summary>
        public const int BuffDurationFieldNumber = 26;
        private global::SC2APIProtocol.ImageData buffDuration_;
        /// <summary>
        /// uint8. Ratio of buff remaining. [0%, 100%] encoded into [0, 255].
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData BuffDuration
        {
            get { return buffDuration_; }
            set
            {
                buffDuration_ = value;
            }
        }
        /// <summary>Gets whether the buff_duration field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBuffDuration
        {
            get { return buffDuration_ != null; }
        }
        /// <summary>Clears the value of the buff_duration field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBuffDuration()
        {
            buffDuration_ = null;
        }

        /// <summary>Field number for the "active" field.</summary>
        public const int ActiveFieldNumber = 25;
        private global::SC2APIProtocol.ImageData active_;
        /// <summary>
        /// 1-bit. Whether the unit here is active.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData Active
        {
            get { return active_; }
            set
            {
                active_ = value;
            }
        }
        /// <summary>Gets whether the active field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasActive
        {
            get { return active_ != null; }
        }
        /// <summary>Clears the value of the active field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearActive()
        {
            active_ = null;
        }

        /// <summary>Field number for the "build_progress" field.</summary>
        public const int BuildProgressFieldNumber = 27;
        private global::SC2APIProtocol.ImageData buildProgress_;
        /// <summary>
        /// uint8. How far along the building is building something. [0%, 100%] encoded into [0, 255].
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData BuildProgress
        {
            get { return buildProgress_; }
            set
            {
                buildProgress_ = value;
            }
        }
        /// <summary>Gets whether the build_progress field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBuildProgress
        {
            get { return buildProgress_ != null; }
        }
        /// <summary>Clears the value of the build_progress field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBuildProgress()
        {
            buildProgress_ = null;
        }

        /// <summary>Field number for the "buildable" field.</summary>
        public const int BuildableFieldNumber = 28;
        private global::SC2APIProtocol.ImageData buildable_;
        /// <summary>
        /// 1-bit. Whether a building can be built here.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData Buildable
        {
            get { return buildable_; }
            set
            {
                buildable_ = value;
            }
        }
        /// <summary>Gets whether the buildable field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBuildable
        {
            get { return buildable_ != null; }
        }
        /// <summary>Clears the value of the buildable field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBuildable()
        {
            buildable_ = null;
        }

        /// <summary>Field number for the "pathable" field.</summary>
        public const int PathableFieldNumber = 29;
        private global::SC2APIProtocol.ImageData pathable_;
        /// <summary>
        /// 1-bit. Whether a unit can walk here.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData Pathable
        {
            get { return pathable_; }
            set
            {
                pathable_ = value;
            }
        }
        /// <summary>Gets whether the pathable field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPathable
        {
            get { return pathable_ != null; }
        }
        /// <summary>Clears the value of the pathable field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPathable()
        {
            pathable_ = null;
        }

        /// <summary>Field number for the "placeholder" field.</summary>
        public const int PlaceholderFieldNumber = 30;
        private global::SC2APIProtocol.ImageData placeholder_;
        /// <summary>
        /// 1-bit. Whether the unit here is a placeholder building to be constructed.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData Placeholder
        {
            get { return placeholder_; }
            set
            {
                placeholder_ = value;
            }
        }
        /// <summary>Gets whether the placeholder field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlaceholder
        {
            get { return placeholder_ != null; }
        }
        /// <summary>Clears the value of the placeholder field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlaceholder()
        {
            placeholder_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as FeatureLayers);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FeatureLayers other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(HeightMap, other.HeightMap)) return false;
            if (!object.Equals(VisibilityMap, other.VisibilityMap)) return false;
            if (!object.Equals(Creep, other.Creep)) return false;
            if (!object.Equals(Power, other.Power)) return false;
            if (!object.Equals(PlayerId, other.PlayerId)) return false;
            if (!object.Equals(UnitType, other.UnitType)) return false;
            if (!object.Equals(Selected, other.Selected)) return false;
            if (!object.Equals(UnitHitPoints, other.UnitHitPoints)) return false;
            if (!object.Equals(UnitHitPointsRatio, other.UnitHitPointsRatio)) return false;
            if (!object.Equals(UnitEnergy, other.UnitEnergy)) return false;
            if (!object.Equals(UnitEnergyRatio, other.UnitEnergyRatio)) return false;
            if (!object.Equals(UnitShields, other.UnitShields)) return false;
            if (!object.Equals(UnitShieldsRatio, other.UnitShieldsRatio)) return false;
            if (!object.Equals(PlayerRelative, other.PlayerRelative)) return false;
            if (!object.Equals(UnitDensityAa, other.UnitDensityAa)) return false;
            if (!object.Equals(UnitDensity, other.UnitDensity)) return false;
            if (!object.Equals(Effects, other.Effects)) return false;
            if (!object.Equals(Hallucinations, other.Hallucinations)) return false;
            if (!object.Equals(Cloaked, other.Cloaked)) return false;
            if (!object.Equals(Blip, other.Blip)) return false;
            if (!object.Equals(Buffs, other.Buffs)) return false;
            if (!object.Equals(BuffDuration, other.BuffDuration)) return false;
            if (!object.Equals(Active, other.Active)) return false;
            if (!object.Equals(BuildProgress, other.BuildProgress)) return false;
            if (!object.Equals(Buildable, other.Buildable)) return false;
            if (!object.Equals(Pathable, other.Pathable)) return false;
            if (!object.Equals(Placeholder, other.Placeholder)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasHeightMap) hash ^= HeightMap.GetHashCode();
            if (HasVisibilityMap) hash ^= VisibilityMap.GetHashCode();
            if (HasCreep) hash ^= Creep.GetHashCode();
            if (HasPower) hash ^= Power.GetHashCode();
            if (HasPlayerId) hash ^= PlayerId.GetHashCode();
            if (HasUnitType) hash ^= UnitType.GetHashCode();
            if (HasSelected) hash ^= Selected.GetHashCode();
            if (HasUnitHitPoints) hash ^= UnitHitPoints.GetHashCode();
            if (HasUnitHitPointsRatio) hash ^= UnitHitPointsRatio.GetHashCode();
            if (HasUnitEnergy) hash ^= UnitEnergy.GetHashCode();
            if (HasUnitEnergyRatio) hash ^= UnitEnergyRatio.GetHashCode();
            if (HasUnitShields) hash ^= UnitShields.GetHashCode();
            if (HasUnitShieldsRatio) hash ^= UnitShieldsRatio.GetHashCode();
            if (HasPlayerRelative) hash ^= PlayerRelative.GetHashCode();
            if (HasUnitDensityAa) hash ^= UnitDensityAa.GetHashCode();
            if (HasUnitDensity) hash ^= UnitDensity.GetHashCode();
            if (HasEffects) hash ^= Effects.GetHashCode();
            if (HasHallucinations) hash ^= Hallucinations.GetHashCode();
            if (HasCloaked) hash ^= Cloaked.GetHashCode();
            if (HasBlip) hash ^= Blip.GetHashCode();
            if (HasBuffs) hash ^= Buffs.GetHashCode();
            if (HasBuffDuration) hash ^= BuffDuration.GetHashCode();
            if (HasActive) hash ^= Active.GetHashCode();
            if (HasBuildProgress) hash ^= BuildProgress.GetHashCode();
            if (HasBuildable) hash ^= Buildable.GetHashCode();
            if (HasPathable) hash ^= Pathable.GetHashCode();
            if (HasPlaceholder) hash ^= Placeholder.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasHeightMap)
            {
                output.WriteRawTag(10);
                output.WriteMessage(HeightMap);
            }
            if (HasVisibilityMap)
            {
                output.WriteRawTag(18);
                output.WriteMessage(VisibilityMap);
            }
            if (HasCreep)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Creep);
            }
            if (HasPower)
            {
                output.WriteRawTag(34);
                output.WriteMessage(Power);
            }
            if (HasPlayerId)
            {
                output.WriteRawTag(42);
                output.WriteMessage(PlayerId);
            }
            if (HasUnitType)
            {
                output.WriteRawTag(50);
                output.WriteMessage(UnitType);
            }
            if (HasSelected)
            {
                output.WriteRawTag(58);
                output.WriteMessage(Selected);
            }
            if (HasUnitHitPoints)
            {
                output.WriteRawTag(66);
                output.WriteMessage(UnitHitPoints);
            }
            if (HasUnitEnergy)
            {
                output.WriteRawTag(74);
                output.WriteMessage(UnitEnergy);
            }
            if (HasUnitShields)
            {
                output.WriteRawTag(82);
                output.WriteMessage(UnitShields);
            }
            if (HasPlayerRelative)
            {
                output.WriteRawTag(90);
                output.WriteMessage(PlayerRelative);
            }
            if (HasUnitDensityAa)
            {
                output.WriteRawTag(114);
                output.WriteMessage(UnitDensityAa);
            }
            if (HasUnitDensity)
            {
                output.WriteRawTag(122);
                output.WriteMessage(UnitDensity);
            }
            if (HasUnitHitPointsRatio)
            {
                output.WriteRawTag(138, 1);
                output.WriteMessage(UnitHitPointsRatio);
            }
            if (HasUnitEnergyRatio)
            {
                output.WriteRawTag(146, 1);
                output.WriteMessage(UnitEnergyRatio);
            }
            if (HasUnitShieldsRatio)
            {
                output.WriteRawTag(154, 1);
                output.WriteMessage(UnitShieldsRatio);
            }
            if (HasEffects)
            {
                output.WriteRawTag(162, 1);
                output.WriteMessage(Effects);
            }
            if (HasHallucinations)
            {
                output.WriteRawTag(170, 1);
                output.WriteMessage(Hallucinations);
            }
            if (HasCloaked)
            {
                output.WriteRawTag(178, 1);
                output.WriteMessage(Cloaked);
            }
            if (HasBlip)
            {
                output.WriteRawTag(186, 1);
                output.WriteMessage(Blip);
            }
            if (HasBuffs)
            {
                output.WriteRawTag(194, 1);
                output.WriteMessage(Buffs);
            }
            if (HasActive)
            {
                output.WriteRawTag(202, 1);
                output.WriteMessage(Active);
            }
            if (HasBuffDuration)
            {
                output.WriteRawTag(210, 1);
                output.WriteMessage(BuffDuration);
            }
            if (HasBuildProgress)
            {
                output.WriteRawTag(218, 1);
                output.WriteMessage(BuildProgress);
            }
            if (HasBuildable)
            {
                output.WriteRawTag(226, 1);
                output.WriteMessage(Buildable);
            }
            if (HasPathable)
            {
                output.WriteRawTag(234, 1);
                output.WriteMessage(Pathable);
            }
            if (HasPlaceholder)
            {
                output.WriteRawTag(242, 1);
                output.WriteMessage(Placeholder);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasHeightMap)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeightMap);
            }
            if (HasVisibilityMap)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(VisibilityMap);
            }
            if (HasCreep)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Creep);
            }
            if (HasPower)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Power);
            }
            if (HasPlayerId)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerId);
            }
            if (HasUnitType)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitType);
            }
            if (HasSelected)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selected);
            }
            if (HasUnitHitPoints)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitHitPoints);
            }
            if (HasUnitHitPointsRatio)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(UnitHitPointsRatio);
            }
            if (HasUnitEnergy)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitEnergy);
            }
            if (HasUnitEnergyRatio)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(UnitEnergyRatio);
            }
            if (HasUnitShields)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitShields);
            }
            if (HasUnitShieldsRatio)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(UnitShieldsRatio);
            }
            if (HasPlayerRelative)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerRelative);
            }
            if (HasUnitDensityAa)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitDensityAa);
            }
            if (HasUnitDensity)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitDensity);
            }
            if (HasEffects)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(Effects);
            }
            if (HasHallucinations)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(Hallucinations);
            }
            if (HasCloaked)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(Cloaked);
            }
            if (HasBlip)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(Blip);
            }
            if (HasBuffs)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(Buffs);
            }
            if (HasBuffDuration)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(BuffDuration);
            }
            if (HasActive)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(Active);
            }
            if (HasBuildProgress)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(BuildProgress);
            }
            if (HasBuildable)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(Buildable);
            }
            if (HasPathable)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(Pathable);
            }
            if (HasPlaceholder)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(Placeholder);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FeatureLayers other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasHeightMap)
            {
                if (!HasHeightMap)
                {
                    HeightMap = new global::SC2APIProtocol.ImageData();
                }
                HeightMap.MergeFrom(other.HeightMap);
            }
            if (other.HasVisibilityMap)
            {
                if (!HasVisibilityMap)
                {
                    VisibilityMap = new global::SC2APIProtocol.ImageData();
                }
                VisibilityMap.MergeFrom(other.VisibilityMap);
            }
            if (other.HasCreep)
            {
                if (!HasCreep)
                {
                    Creep = new global::SC2APIProtocol.ImageData();
                }
                Creep.MergeFrom(other.Creep);
            }
            if (other.HasPower)
            {
                if (!HasPower)
                {
                    Power = new global::SC2APIProtocol.ImageData();
                }
                Power.MergeFrom(other.Power);
            }
            if (other.HasPlayerId)
            {
                if (!HasPlayerId)
                {
                    PlayerId = new global::SC2APIProtocol.ImageData();
                }
                PlayerId.MergeFrom(other.PlayerId);
            }
            if (other.HasUnitType)
            {
                if (!HasUnitType)
                {
                    UnitType = new global::SC2APIProtocol.ImageData();
                }
                UnitType.MergeFrom(other.UnitType);
            }
            if (other.HasSelected)
            {
                if (!HasSelected)
                {
                    Selected = new global::SC2APIProtocol.ImageData();
                }
                Selected.MergeFrom(other.Selected);
            }
            if (other.HasUnitHitPoints)
            {
                if (!HasUnitHitPoints)
                {
                    UnitHitPoints = new global::SC2APIProtocol.ImageData();
                }
                UnitHitPoints.MergeFrom(other.UnitHitPoints);
            }
            if (other.HasUnitHitPointsRatio)
            {
                if (!HasUnitHitPointsRatio)
                {
                    UnitHitPointsRatio = new global::SC2APIProtocol.ImageData();
                }
                UnitHitPointsRatio.MergeFrom(other.UnitHitPointsRatio);
            }
            if (other.HasUnitEnergy)
            {
                if (!HasUnitEnergy)
                {
                    UnitEnergy = new global::SC2APIProtocol.ImageData();
                }
                UnitEnergy.MergeFrom(other.UnitEnergy);
            }
            if (other.HasUnitEnergyRatio)
            {
                if (!HasUnitEnergyRatio)
                {
                    UnitEnergyRatio = new global::SC2APIProtocol.ImageData();
                }
                UnitEnergyRatio.MergeFrom(other.UnitEnergyRatio);
            }
            if (other.HasUnitShields)
            {
                if (!HasUnitShields)
                {
                    UnitShields = new global::SC2APIProtocol.ImageData();
                }
                UnitShields.MergeFrom(other.UnitShields);
            }
            if (other.HasUnitShieldsRatio)
            {
                if (!HasUnitShieldsRatio)
                {
                    UnitShieldsRatio = new global::SC2APIProtocol.ImageData();
                }
                UnitShieldsRatio.MergeFrom(other.UnitShieldsRatio);
            }
            if (other.HasPlayerRelative)
            {
                if (!HasPlayerRelative)
                {
                    PlayerRelative = new global::SC2APIProtocol.ImageData();
                }
                PlayerRelative.MergeFrom(other.PlayerRelative);
            }
            if (other.HasUnitDensityAa)
            {
                if (!HasUnitDensityAa)
                {
                    UnitDensityAa = new global::SC2APIProtocol.ImageData();
                }
                UnitDensityAa.MergeFrom(other.UnitDensityAa);
            }
            if (other.HasUnitDensity)
            {
                if (!HasUnitDensity)
                {
                    UnitDensity = new global::SC2APIProtocol.ImageData();
                }
                UnitDensity.MergeFrom(other.UnitDensity);
            }
            if (other.HasEffects)
            {
                if (!HasEffects)
                {
                    Effects = new global::SC2APIProtocol.ImageData();
                }
                Effects.MergeFrom(other.Effects);
            }
            if (other.HasHallucinations)
            {
                if (!HasHallucinations)
                {
                    Hallucinations = new global::SC2APIProtocol.ImageData();
                }
                Hallucinations.MergeFrom(other.Hallucinations);
            }
            if (other.HasCloaked)
            {
                if (!HasCloaked)
                {
                    Cloaked = new global::SC2APIProtocol.ImageData();
                }
                Cloaked.MergeFrom(other.Cloaked);
            }
            if (other.HasBlip)
            {
                if (!HasBlip)
                {
                    Blip = new global::SC2APIProtocol.ImageData();
                }
                Blip.MergeFrom(other.Blip);
            }
            if (other.HasBuffs)
            {
                if (!HasBuffs)
                {
                    Buffs = new global::SC2APIProtocol.ImageData();
                }
                Buffs.MergeFrom(other.Buffs);
            }
            if (other.HasBuffDuration)
            {
                if (!HasBuffDuration)
                {
                    BuffDuration = new global::SC2APIProtocol.ImageData();
                }
                BuffDuration.MergeFrom(other.BuffDuration);
            }
            if (other.HasActive)
            {
                if (!HasActive)
                {
                    Active = new global::SC2APIProtocol.ImageData();
                }
                Active.MergeFrom(other.Active);
            }
            if (other.HasBuildProgress)
            {
                if (!HasBuildProgress)
                {
                    BuildProgress = new global::SC2APIProtocol.ImageData();
                }
                BuildProgress.MergeFrom(other.BuildProgress);
            }
            if (other.HasBuildable)
            {
                if (!HasBuildable)
                {
                    Buildable = new global::SC2APIProtocol.ImageData();
                }
                Buildable.MergeFrom(other.Buildable);
            }
            if (other.HasPathable)
            {
                if (!HasPathable)
                {
                    Pathable = new global::SC2APIProtocol.ImageData();
                }
                Pathable.MergeFrom(other.Pathable);
            }
            if (other.HasPlaceholder)
            {
                if (!HasPlaceholder)
                {
                    Placeholder = new global::SC2APIProtocol.ImageData();
                }
                Placeholder.MergeFrom(other.Placeholder);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (!HasHeightMap)
                            {
                                HeightMap = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(HeightMap);
                            break;
                        }
                    case 18:
                        {
                            if (!HasVisibilityMap)
                            {
                                VisibilityMap = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(VisibilityMap);
                            break;
                        }
                    case 26:
                        {
                            if (!HasCreep)
                            {
                                Creep = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(Creep);
                            break;
                        }
                    case 34:
                        {
                            if (!HasPower)
                            {
                                Power = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(Power);
                            break;
                        }
                    case 42:
                        {
                            if (!HasPlayerId)
                            {
                                PlayerId = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(PlayerId);
                            break;
                        }
                    case 50:
                        {
                            if (!HasUnitType)
                            {
                                UnitType = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(UnitType);
                            break;
                        }
                    case 58:
                        {
                            if (!HasSelected)
                            {
                                Selected = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(Selected);
                            break;
                        }
                    case 66:
                        {
                            if (!HasUnitHitPoints)
                            {
                                UnitHitPoints = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(UnitHitPoints);
                            break;
                        }
                    case 74:
                        {
                            if (!HasUnitEnergy)
                            {
                                UnitEnergy = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(UnitEnergy);
                            break;
                        }
                    case 82:
                        {
                            if (!HasUnitShields)
                            {
                                UnitShields = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(UnitShields);
                            break;
                        }
                    case 90:
                        {
                            if (!HasPlayerRelative)
                            {
                                PlayerRelative = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(PlayerRelative);
                            break;
                        }
                    case 114:
                        {
                            if (!HasUnitDensityAa)
                            {
                                UnitDensityAa = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(UnitDensityAa);
                            break;
                        }
                    case 122:
                        {
                            if (!HasUnitDensity)
                            {
                                UnitDensity = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(UnitDensity);
                            break;
                        }
                    case 138:
                        {
                            if (!HasUnitHitPointsRatio)
                            {
                                UnitHitPointsRatio = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(UnitHitPointsRatio);
                            break;
                        }
                    case 146:
                        {
                            if (!HasUnitEnergyRatio)
                            {
                                UnitEnergyRatio = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(UnitEnergyRatio);
                            break;
                        }
                    case 154:
                        {
                            if (!HasUnitShieldsRatio)
                            {
                                UnitShieldsRatio = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(UnitShieldsRatio);
                            break;
                        }
                    case 162:
                        {
                            if (!HasEffects)
                            {
                                Effects = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(Effects);
                            break;
                        }
                    case 170:
                        {
                            if (!HasHallucinations)
                            {
                                Hallucinations = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(Hallucinations);
                            break;
                        }
                    case 178:
                        {
                            if (!HasCloaked)
                            {
                                Cloaked = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(Cloaked);
                            break;
                        }
                    case 186:
                        {
                            if (!HasBlip)
                            {
                                Blip = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(Blip);
                            break;
                        }
                    case 194:
                        {
                            if (!HasBuffs)
                            {
                                Buffs = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(Buffs);
                            break;
                        }
                    case 202:
                        {
                            if (!HasActive)
                            {
                                Active = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(Active);
                            break;
                        }
                    case 210:
                        {
                            if (!HasBuffDuration)
                            {
                                BuffDuration = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(BuffDuration);
                            break;
                        }
                    case 218:
                        {
                            if (!HasBuildProgress)
                            {
                                BuildProgress = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(BuildProgress);
                            break;
                        }
                    case 226:
                        {
                            if (!HasBuildable)
                            {
                                Buildable = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(Buildable);
                            break;
                        }
                    case 234:
                        {
                            if (!HasPathable)
                            {
                                Pathable = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(Pathable);
                            break;
                        }
                    case 242:
                        {
                            if (!HasPlaceholder)
                            {
                                Placeholder = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(Placeholder);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class FeatureLayersMinimap : pb::IMessage<FeatureLayersMinimap>
    {
        private static readonly pb::MessageParser<FeatureLayersMinimap> _parser = new pb::MessageParser<FeatureLayersMinimap>(() => new FeatureLayersMinimap());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FeatureLayersMinimap> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.SpatialReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FeatureLayersMinimap()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FeatureLayersMinimap(FeatureLayersMinimap other) : this()
        {
            heightMap_ = other.HasHeightMap ? other.heightMap_.Clone() : null;
            visibilityMap_ = other.HasVisibilityMap ? other.visibilityMap_.Clone() : null;
            creep_ = other.HasCreep ? other.creep_.Clone() : null;
            camera_ = other.HasCamera ? other.camera_.Clone() : null;
            playerId_ = other.HasPlayerId ? other.playerId_.Clone() : null;
            playerRelative_ = other.HasPlayerRelative ? other.playerRelative_.Clone() : null;
            selected_ = other.HasSelected ? other.selected_.Clone() : null;
            alerts_ = other.HasAlerts ? other.alerts_.Clone() : null;
            buildable_ = other.HasBuildable ? other.buildable_.Clone() : null;
            pathable_ = other.HasPathable ? other.pathable_.Clone() : null;
            unitType_ = other.HasUnitType ? other.unitType_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FeatureLayersMinimap Clone()
        {
            return new FeatureLayersMinimap(this);
        }

        /// <summary>Field number for the "height_map" field.</summary>
        public const int HeightMapFieldNumber = 1;
        private global::SC2APIProtocol.ImageData heightMap_;
        /// <summary>
        /// uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData HeightMap
        {
            get { return heightMap_; }
            set
            {
                heightMap_ = value;
            }
        }
        /// <summary>Gets whether the height_map field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeightMap
        {
            get { return heightMap_ != null; }
        }
        /// <summary>Clears the value of the height_map field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeightMap()
        {
            heightMap_ = null;
        }

        /// <summary>Field number for the "visibility_map" field.</summary>
        public const int VisibilityMapFieldNumber = 2;
        private global::SC2APIProtocol.ImageData visibilityMap_;
        /// <summary>
        /// uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData VisibilityMap
        {
            get { return visibilityMap_; }
            set
            {
                visibilityMap_ = value;
            }
        }
        /// <summary>Gets whether the visibility_map field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasVisibilityMap
        {
            get { return visibilityMap_ != null; }
        }
        /// <summary>Clears the value of the visibility_map field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearVisibilityMap()
        {
            visibilityMap_ = null;
        }

        /// <summary>Field number for the "creep" field.</summary>
        public const int CreepFieldNumber = 3;
        private global::SC2APIProtocol.ImageData creep_;
        /// <summary>
        /// 1-bit. Zerg creep.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData Creep
        {
            get { return creep_; }
            set
            {
                creep_ = value;
            }
        }
        /// <summary>Gets whether the creep field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCreep
        {
            get { return creep_ != null; }
        }
        /// <summary>Clears the value of the creep field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCreep()
        {
            creep_ = null;
        }

        /// <summary>Field number for the "camera" field.</summary>
        public const int CameraFieldNumber = 4;
        private global::SC2APIProtocol.ImageData camera_;
        /// <summary>
        /// 1-bit. Area covered by the camera.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData Camera
        {
            get { return camera_; }
            set
            {
                camera_ = value;
            }
        }
        /// <summary>Gets whether the camera field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCamera
        {
            get { return camera_ != null; }
        }
        /// <summary>Clears the value of the camera field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCamera()
        {
            camera_ = null;
        }

        /// <summary>Field number for the "player_id" field.</summary>
        public const int PlayerIdFieldNumber = 5;
        private global::SC2APIProtocol.ImageData playerId_;
        /// <summary>
        /// uint8. Participants: [1, 15] Neutral: 16
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData PlayerId
        {
            get { return playerId_; }
            set
            {
                playerId_ = value;
            }
        }
        /// <summary>Gets whether the player_id field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerId
        {
            get { return playerId_ != null; }
        }
        /// <summary>Clears the value of the player_id field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerId()
        {
            playerId_ = null;
        }

        /// <summary>Field number for the "player_relative" field.</summary>
        public const int PlayerRelativeFieldNumber = 6;
        private global::SC2APIProtocol.ImageData playerRelative_;
        /// <summary>
        /// uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData PlayerRelative
        {
            get { return playerRelative_; }
            set
            {
                playerRelative_ = value;
            }
        }
        /// <summary>Gets whether the player_relative field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerRelative
        {
            get { return playerRelative_ != null; }
        }
        /// <summary>Clears the value of the player_relative field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerRelative()
        {
            playerRelative_ = null;
        }

        /// <summary>Field number for the "selected" field.</summary>
        public const int SelectedFieldNumber = 7;
        private global::SC2APIProtocol.ImageData selected_;
        /// <summary>
        /// 1-bit. Selected units.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData Selected
        {
            get { return selected_; }
            set
            {
                selected_ = value;
            }
        }
        /// <summary>Gets whether the selected field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSelected
        {
            get { return selected_ != null; }
        }
        /// <summary>Clears the value of the selected field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSelected()
        {
            selected_ = null;
        }

        /// <summary>Field number for the "alerts" field.</summary>
        public const int AlertsFieldNumber = 9;
        private global::SC2APIProtocol.ImageData alerts_;
        /// <summary>
        /// 1-bit. Shows 'UnitAttacked' alert location.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData Alerts
        {
            get { return alerts_; }
            set
            {
                alerts_ = value;
            }
        }
        /// <summary>Gets whether the alerts field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAlerts
        {
            get { return alerts_ != null; }
        }
        /// <summary>Clears the value of the alerts field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAlerts()
        {
            alerts_ = null;
        }

        /// <summary>Field number for the "buildable" field.</summary>
        public const int BuildableFieldNumber = 10;
        private global::SC2APIProtocol.ImageData buildable_;
        /// <summary>
        /// 1-bit. Whether a building can be built here.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData Buildable
        {
            get { return buildable_; }
            set
            {
                buildable_ = value;
            }
        }
        /// <summary>Gets whether the buildable field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBuildable
        {
            get { return buildable_ != null; }
        }
        /// <summary>Clears the value of the buildable field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBuildable()
        {
            buildable_ = null;
        }

        /// <summary>Field number for the "pathable" field.</summary>
        public const int PathableFieldNumber = 11;
        private global::SC2APIProtocol.ImageData pathable_;
        /// <summary>
        /// 1-bit. Whether a unit can walk here.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData Pathable
        {
            get { return pathable_; }
            set
            {
                pathable_ = value;
            }
        }
        /// <summary>Gets whether the pathable field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPathable
        {
            get { return pathable_ != null; }
        }
        /// <summary>Clears the value of the pathable field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPathable()
        {
            pathable_ = null;
        }

        /// <summary>Field number for the "unit_type" field.</summary>
        public const int UnitTypeFieldNumber = 8;
        private global::SC2APIProtocol.ImageData unitType_;
        /// <summary>
        /// Cheat layers, enable with SpatialCameraSetup.allow_cheating_layers.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData UnitType
        {
            get { return unitType_; }
            set
            {
                unitType_ = value;
            }
        }
        /// <summary>Gets whether the unit_type field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnitType
        {
            get { return unitType_ != null; }
        }
        /// <summary>Clears the value of the unit_type field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnitType()
        {
            unitType_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as FeatureLayersMinimap);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FeatureLayersMinimap other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(HeightMap, other.HeightMap)) return false;
            if (!object.Equals(VisibilityMap, other.VisibilityMap)) return false;
            if (!object.Equals(Creep, other.Creep)) return false;
            if (!object.Equals(Camera, other.Camera)) return false;
            if (!object.Equals(PlayerId, other.PlayerId)) return false;
            if (!object.Equals(PlayerRelative, other.PlayerRelative)) return false;
            if (!object.Equals(Selected, other.Selected)) return false;
            if (!object.Equals(Alerts, other.Alerts)) return false;
            if (!object.Equals(Buildable, other.Buildable)) return false;
            if (!object.Equals(Pathable, other.Pathable)) return false;
            if (!object.Equals(UnitType, other.UnitType)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasHeightMap) hash ^= HeightMap.GetHashCode();
            if (HasVisibilityMap) hash ^= VisibilityMap.GetHashCode();
            if (HasCreep) hash ^= Creep.GetHashCode();
            if (HasCamera) hash ^= Camera.GetHashCode();
            if (HasPlayerId) hash ^= PlayerId.GetHashCode();
            if (HasPlayerRelative) hash ^= PlayerRelative.GetHashCode();
            if (HasSelected) hash ^= Selected.GetHashCode();
            if (HasAlerts) hash ^= Alerts.GetHashCode();
            if (HasBuildable) hash ^= Buildable.GetHashCode();
            if (HasPathable) hash ^= Pathable.GetHashCode();
            if (HasUnitType) hash ^= UnitType.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasHeightMap)
            {
                output.WriteRawTag(10);
                output.WriteMessage(HeightMap);
            }
            if (HasVisibilityMap)
            {
                output.WriteRawTag(18);
                output.WriteMessage(VisibilityMap);
            }
            if (HasCreep)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Creep);
            }
            if (HasCamera)
            {
                output.WriteRawTag(34);
                output.WriteMessage(Camera);
            }
            if (HasPlayerId)
            {
                output.WriteRawTag(42);
                output.WriteMessage(PlayerId);
            }
            if (HasPlayerRelative)
            {
                output.WriteRawTag(50);
                output.WriteMessage(PlayerRelative);
            }
            if (HasSelected)
            {
                output.WriteRawTag(58);
                output.WriteMessage(Selected);
            }
            if (HasUnitType)
            {
                output.WriteRawTag(66);
                output.WriteMessage(UnitType);
            }
            if (HasAlerts)
            {
                output.WriteRawTag(74);
                output.WriteMessage(Alerts);
            }
            if (HasBuildable)
            {
                output.WriteRawTag(82);
                output.WriteMessage(Buildable);
            }
            if (HasPathable)
            {
                output.WriteRawTag(90);
                output.WriteMessage(Pathable);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasHeightMap)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeightMap);
            }
            if (HasVisibilityMap)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(VisibilityMap);
            }
            if (HasCreep)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Creep);
            }
            if (HasCamera)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Camera);
            }
            if (HasPlayerId)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerId);
            }
            if (HasPlayerRelative)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerRelative);
            }
            if (HasSelected)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selected);
            }
            if (HasAlerts)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Alerts);
            }
            if (HasBuildable)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Buildable);
            }
            if (HasPathable)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pathable);
            }
            if (HasUnitType)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitType);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FeatureLayersMinimap other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasHeightMap)
            {
                if (!HasHeightMap)
                {
                    HeightMap = new global::SC2APIProtocol.ImageData();
                }
                HeightMap.MergeFrom(other.HeightMap);
            }
            if (other.HasVisibilityMap)
            {
                if (!HasVisibilityMap)
                {
                    VisibilityMap = new global::SC2APIProtocol.ImageData();
                }
                VisibilityMap.MergeFrom(other.VisibilityMap);
            }
            if (other.HasCreep)
            {
                if (!HasCreep)
                {
                    Creep = new global::SC2APIProtocol.ImageData();
                }
                Creep.MergeFrom(other.Creep);
            }
            if (other.HasCamera)
            {
                if (!HasCamera)
                {
                    Camera = new global::SC2APIProtocol.ImageData();
                }
                Camera.MergeFrom(other.Camera);
            }
            if (other.HasPlayerId)
            {
                if (!HasPlayerId)
                {
                    PlayerId = new global::SC2APIProtocol.ImageData();
                }
                PlayerId.MergeFrom(other.PlayerId);
            }
            if (other.HasPlayerRelative)
            {
                if (!HasPlayerRelative)
                {
                    PlayerRelative = new global::SC2APIProtocol.ImageData();
                }
                PlayerRelative.MergeFrom(other.PlayerRelative);
            }
            if (other.HasSelected)
            {
                if (!HasSelected)
                {
                    Selected = new global::SC2APIProtocol.ImageData();
                }
                Selected.MergeFrom(other.Selected);
            }
            if (other.HasAlerts)
            {
                if (!HasAlerts)
                {
                    Alerts = new global::SC2APIProtocol.ImageData();
                }
                Alerts.MergeFrom(other.Alerts);
            }
            if (other.HasBuildable)
            {
                if (!HasBuildable)
                {
                    Buildable = new global::SC2APIProtocol.ImageData();
                }
                Buildable.MergeFrom(other.Buildable);
            }
            if (other.HasPathable)
            {
                if (!HasPathable)
                {
                    Pathable = new global::SC2APIProtocol.ImageData();
                }
                Pathable.MergeFrom(other.Pathable);
            }
            if (other.HasUnitType)
            {
                if (!HasUnitType)
                {
                    UnitType = new global::SC2APIProtocol.ImageData();
                }
                UnitType.MergeFrom(other.UnitType);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (!HasHeightMap)
                            {
                                HeightMap = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(HeightMap);
                            break;
                        }
                    case 18:
                        {
                            if (!HasVisibilityMap)
                            {
                                VisibilityMap = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(VisibilityMap);
                            break;
                        }
                    case 26:
                        {
                            if (!HasCreep)
                            {
                                Creep = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(Creep);
                            break;
                        }
                    case 34:
                        {
                            if (!HasCamera)
                            {
                                Camera = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(Camera);
                            break;
                        }
                    case 42:
                        {
                            if (!HasPlayerId)
                            {
                                PlayerId = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(PlayerId);
                            break;
                        }
                    case 50:
                        {
                            if (!HasPlayerRelative)
                            {
                                PlayerRelative = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(PlayerRelative);
                            break;
                        }
                    case 58:
                        {
                            if (!HasSelected)
                            {
                                Selected = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(Selected);
                            break;
                        }
                    case 66:
                        {
                            if (!HasUnitType)
                            {
                                UnitType = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(UnitType);
                            break;
                        }
                    case 74:
                        {
                            if (!HasAlerts)
                            {
                                Alerts = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(Alerts);
                            break;
                        }
                    case 82:
                        {
                            if (!HasBuildable)
                            {
                                Buildable = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(Buildable);
                            break;
                        }
                    case 90:
                        {
                            if (!HasPathable)
                            {
                                Pathable = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(Pathable);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ObservationRender : pb::IMessage<ObservationRender>
    {
        private static readonly pb::MessageParser<ObservationRender> _parser = new pb::MessageParser<ObservationRender>(() => new ObservationRender());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ObservationRender> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.SpatialReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ObservationRender()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ObservationRender(ObservationRender other) : this()
        {
            map_ = other.HasMap ? other.map_.Clone() : null;
            minimap_ = other.HasMinimap ? other.minimap_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ObservationRender Clone()
        {
            return new ObservationRender(this);
        }

        /// <summary>Field number for the "map" field.</summary>
        public const int MapFieldNumber = 1;
        private global::SC2APIProtocol.ImageData map_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData Map
        {
            get { return map_; }
            set
            {
                map_ = value;
            }
        }
        /// <summary>Gets whether the map field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMap
        {
            get { return map_ != null; }
        }
        /// <summary>Clears the value of the map field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMap()
        {
            map_ = null;
        }

        /// <summary>Field number for the "minimap" field.</summary>
        public const int MinimapFieldNumber = 2;
        private global::SC2APIProtocol.ImageData minimap_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ImageData Minimap
        {
            get { return minimap_; }
            set
            {
                minimap_ = value;
            }
        }
        /// <summary>Gets whether the minimap field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMinimap
        {
            get { return minimap_ != null; }
        }
        /// <summary>Clears the value of the minimap field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMinimap()
        {
            minimap_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ObservationRender);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ObservationRender other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Map, other.Map)) return false;
            if (!object.Equals(Minimap, other.Minimap)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasMap) hash ^= Map.GetHashCode();
            if (HasMinimap) hash ^= Minimap.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasMap)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Map);
            }
            if (HasMinimap)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Minimap);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasMap)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Map);
            }
            if (HasMinimap)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Minimap);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ObservationRender other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasMap)
            {
                if (!HasMap)
                {
                    Map = new global::SC2APIProtocol.ImageData();
                }
                Map.MergeFrom(other.Map);
            }
            if (other.HasMinimap)
            {
                if (!HasMinimap)
                {
                    Minimap = new global::SC2APIProtocol.ImageData();
                }
                Minimap.MergeFrom(other.Minimap);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (!HasMap)
                            {
                                Map = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(Map);
                            break;
                        }
                    case 18:
                        {
                            if (!HasMinimap)
                            {
                                Minimap = new global::SC2APIProtocol.ImageData();
                            }
                            input.ReadMessage(Minimap);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ActionSpatial : pb::IMessage<ActionSpatial>
    {
        private static readonly pb::MessageParser<ActionSpatial> _parser = new pb::MessageParser<ActionSpatial>(() => new ActionSpatial());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActionSpatial> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.SpatialReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionSpatial()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionSpatial(ActionSpatial other) : this()
        {
            switch (other.ActionCase)
            {
                case ActionOneofCase.UnitCommand:
                    UnitCommand = other.UnitCommand.Clone();
                    break;
                case ActionOneofCase.CameraMove:
                    CameraMove = other.CameraMove.Clone();
                    break;
                case ActionOneofCase.UnitSelectionPoint:
                    UnitSelectionPoint = other.UnitSelectionPoint.Clone();
                    break;
                case ActionOneofCase.UnitSelectionRect:
                    UnitSelectionRect = other.UnitSelectionRect.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionSpatial Clone()
        {
            return new ActionSpatial(this);
        }

        /// <summary>Field number for the "unit_command" field.</summary>
        public const int UnitCommandFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ActionSpatialUnitCommand UnitCommand
        {
            get { return HasUnitCommand ? (global::SC2APIProtocol.ActionSpatialUnitCommand)action_ : null; }
            set
            {
                action_ = value;
                actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.UnitCommand;
            }
        }
        /// <summary>Gets whether the "unit_command" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnitCommand
        {
            get { return actionCase_ == ActionOneofCase.UnitCommand; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "unit_command" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnitCommand()
        {
            if (HasUnitCommand)
            {
                ClearAction();
            }
        }

        /// <summary>Field number for the "camera_move" field.</summary>
        public const int CameraMoveFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ActionSpatialCameraMove CameraMove
        {
            get { return HasCameraMove ? (global::SC2APIProtocol.ActionSpatialCameraMove)action_ : null; }
            set
            {
                action_ = value;
                actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.CameraMove;
            }
        }
        /// <summary>Gets whether the "camera_move" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCameraMove
        {
            get { return actionCase_ == ActionOneofCase.CameraMove; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "camera_move" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCameraMove()
        {
            if (HasCameraMove)
            {
                ClearAction();
            }
        }

        /// <summary>Field number for the "unit_selection_point" field.</summary>
        public const int UnitSelectionPointFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ActionSpatialUnitSelectionPoint UnitSelectionPoint
        {
            get { return HasUnitSelectionPoint ? (global::SC2APIProtocol.ActionSpatialUnitSelectionPoint)action_ : null; }
            set
            {
                action_ = value;
                actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.UnitSelectionPoint;
            }
        }
        /// <summary>Gets whether the "unit_selection_point" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnitSelectionPoint
        {
            get { return actionCase_ == ActionOneofCase.UnitSelectionPoint; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "unit_selection_point" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnitSelectionPoint()
        {
            if (HasUnitSelectionPoint)
            {
                ClearAction();
            }
        }

        /// <summary>Field number for the "unit_selection_rect" field.</summary>
        public const int UnitSelectionRectFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ActionSpatialUnitSelectionRect UnitSelectionRect
        {
            get { return HasUnitSelectionRect ? (global::SC2APIProtocol.ActionSpatialUnitSelectionRect)action_ : null; }
            set
            {
                action_ = value;
                actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.UnitSelectionRect;
            }
        }
        /// <summary>Gets whether the "unit_selection_rect" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnitSelectionRect
        {
            get { return actionCase_ == ActionOneofCase.UnitSelectionRect; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "unit_selection_rect" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnitSelectionRect()
        {
            if (HasUnitSelectionRect)
            {
                ClearAction();
            }
        }

        private object action_;
        /// <summary>Enum of possible cases for the "action" oneof.</summary>
        public enum ActionOneofCase
        {
            None = 0,
            UnitCommand = 1,
            CameraMove = 2,
            UnitSelectionPoint = 3,
            UnitSelectionRect = 4,
        }
        private ActionOneofCase actionCase_ = ActionOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionOneofCase ActionCase
        {
            get { return actionCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAction()
        {
            actionCase_ = ActionOneofCase.None;
            action_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ActionSpatial);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActionSpatial other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(UnitCommand, other.UnitCommand)) return false;
            if (!object.Equals(CameraMove, other.CameraMove)) return false;
            if (!object.Equals(UnitSelectionPoint, other.UnitSelectionPoint)) return false;
            if (!object.Equals(UnitSelectionRect, other.UnitSelectionRect)) return false;
            if (ActionCase != other.ActionCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasUnitCommand) hash ^= UnitCommand.GetHashCode();
            if (HasCameraMove) hash ^= CameraMove.GetHashCode();
            if (HasUnitSelectionPoint) hash ^= UnitSelectionPoint.GetHashCode();
            if (HasUnitSelectionRect) hash ^= UnitSelectionRect.GetHashCode();
            hash ^= (int)actionCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasUnitCommand)
            {
                output.WriteRawTag(10);
                output.WriteMessage(UnitCommand);
            }
            if (HasCameraMove)
            {
                output.WriteRawTag(18);
                output.WriteMessage(CameraMove);
            }
            if (HasUnitSelectionPoint)
            {
                output.WriteRawTag(26);
                output.WriteMessage(UnitSelectionPoint);
            }
            if (HasUnitSelectionRect)
            {
                output.WriteRawTag(34);
                output.WriteMessage(UnitSelectionRect);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasUnitCommand)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitCommand);
            }
            if (HasCameraMove)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CameraMove);
            }
            if (HasUnitSelectionPoint)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitSelectionPoint);
            }
            if (HasUnitSelectionRect)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitSelectionRect);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActionSpatial other)
        {
            if (other == null)
            {
                return;
            }
            switch (other.ActionCase)
            {
                case ActionOneofCase.UnitCommand:
                    if (UnitCommand == null)
                    {
                        UnitCommand = new global::SC2APIProtocol.ActionSpatialUnitCommand();
                    }
                    UnitCommand.MergeFrom(other.UnitCommand);
                    break;
                case ActionOneofCase.CameraMove:
                    if (CameraMove == null)
                    {
                        CameraMove = new global::SC2APIProtocol.ActionSpatialCameraMove();
                    }
                    CameraMove.MergeFrom(other.CameraMove);
                    break;
                case ActionOneofCase.UnitSelectionPoint:
                    if (UnitSelectionPoint == null)
                    {
                        UnitSelectionPoint = new global::SC2APIProtocol.ActionSpatialUnitSelectionPoint();
                    }
                    UnitSelectionPoint.MergeFrom(other.UnitSelectionPoint);
                    break;
                case ActionOneofCase.UnitSelectionRect:
                    if (UnitSelectionRect == null)
                    {
                        UnitSelectionRect = new global::SC2APIProtocol.ActionSpatialUnitSelectionRect();
                    }
                    UnitSelectionRect.MergeFrom(other.UnitSelectionRect);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            global::SC2APIProtocol.ActionSpatialUnitCommand subBuilder = new global::SC2APIProtocol.ActionSpatialUnitCommand();
                            if (HasUnitCommand)
                            {
                                subBuilder.MergeFrom(UnitCommand);
                            }
                            input.ReadMessage(subBuilder);
                            UnitCommand = subBuilder;
                            break;
                        }
                    case 18:
                        {
                            global::SC2APIProtocol.ActionSpatialCameraMove subBuilder = new global::SC2APIProtocol.ActionSpatialCameraMove();
                            if (HasCameraMove)
                            {
                                subBuilder.MergeFrom(CameraMove);
                            }
                            input.ReadMessage(subBuilder);
                            CameraMove = subBuilder;
                            break;
                        }
                    case 26:
                        {
                            global::SC2APIProtocol.ActionSpatialUnitSelectionPoint subBuilder = new global::SC2APIProtocol.ActionSpatialUnitSelectionPoint();
                            if (HasUnitSelectionPoint)
                            {
                                subBuilder.MergeFrom(UnitSelectionPoint);
                            }
                            input.ReadMessage(subBuilder);
                            UnitSelectionPoint = subBuilder;
                            break;
                        }
                    case 34:
                        {
                            global::SC2APIProtocol.ActionSpatialUnitSelectionRect subBuilder = new global::SC2APIProtocol.ActionSpatialUnitSelectionRect();
                            if (HasUnitSelectionRect)
                            {
                                subBuilder.MergeFrom(UnitSelectionRect);
                            }
                            input.ReadMessage(subBuilder);
                            UnitSelectionRect = subBuilder;
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ActionSpatialUnitCommand : pb::IMessage<ActionSpatialUnitCommand>
    {
        private static readonly pb::MessageParser<ActionSpatialUnitCommand> _parser = new pb::MessageParser<ActionSpatialUnitCommand>(() => new ActionSpatialUnitCommand());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActionSpatialUnitCommand> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.SpatialReflection.Descriptor.MessageTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionSpatialUnitCommand()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionSpatialUnitCommand(ActionSpatialUnitCommand other) : this()
        {
            _hasBits0 = other._hasBits0;
            abilityId_ = other.abilityId_;
            queueCommand_ = other.queueCommand_;
            switch (other.TargetCase)
            {
                case TargetOneofCase.TargetScreenCoord:
                    TargetScreenCoord = other.TargetScreenCoord.Clone();
                    break;
                case TargetOneofCase.TargetMinimapCoord:
                    TargetMinimapCoord = other.TargetMinimapCoord.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionSpatialUnitCommand Clone()
        {
            return new ActionSpatialUnitCommand(this);
        }

        /// <summary>Field number for the "ability_id" field.</summary>
        public const int AbilityIdFieldNumber = 1;
        private readonly static int AbilityIdDefaultValue = 0;

        private int abilityId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AbilityId
        {
            get { if ((_hasBits0 & 1) != 0) { return abilityId_; } else { return AbilityIdDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                abilityId_ = value;
            }
        }
        /// <summary>Gets whether the "ability_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAbilityId
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "ability_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAbilityId()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "target_screen_coord" field.</summary>
        public const int TargetScreenCoordFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.PointI TargetScreenCoord
        {
            get { return HasTargetScreenCoord ? (global::SC2APIProtocol.PointI)target_ : null; }
            set
            {
                target_ = value;
                targetCase_ = value == null ? TargetOneofCase.None : TargetOneofCase.TargetScreenCoord;
            }
        }
        /// <summary>Gets whether the "target_screen_coord" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTargetScreenCoord
        {
            get { return targetCase_ == TargetOneofCase.TargetScreenCoord; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "target_screen_coord" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTargetScreenCoord()
        {
            if (HasTargetScreenCoord)
            {
                ClearTarget();
            }
        }

        /// <summary>Field number for the "target_minimap_coord" field.</summary>
        public const int TargetMinimapCoordFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.PointI TargetMinimapCoord
        {
            get { return HasTargetMinimapCoord ? (global::SC2APIProtocol.PointI)target_ : null; }
            set
            {
                target_ = value;
                targetCase_ = value == null ? TargetOneofCase.None : TargetOneofCase.TargetMinimapCoord;
            }
        }
        /// <summary>Gets whether the "target_minimap_coord" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTargetMinimapCoord
        {
            get { return targetCase_ == TargetOneofCase.TargetMinimapCoord; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "target_minimap_coord" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTargetMinimapCoord()
        {
            if (HasTargetMinimapCoord)
            {
                ClearTarget();
            }
        }

        /// <summary>Field number for the "queue_command" field.</summary>
        public const int QueueCommandFieldNumber = 4;
        private readonly static bool QueueCommandDefaultValue = false;

        private bool queueCommand_;
        /// <summary>
        /// Equivalent to shift+command.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool QueueCommand
        {
            get { if ((_hasBits0 & 2) != 0) { return queueCommand_; } else { return QueueCommandDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                queueCommand_ = value;
            }
        }
        /// <summary>Gets whether the "queue_command" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasQueueCommand
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "queue_command" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearQueueCommand()
        {
            _hasBits0 &= ~2;
        }

        private object target_;
        /// <summary>Enum of possible cases for the "target" oneof.</summary>
        public enum TargetOneofCase
        {
            None = 0,
            TargetScreenCoord = 2,
            TargetMinimapCoord = 3,
        }
        private TargetOneofCase targetCase_ = TargetOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TargetOneofCase TargetCase
        {
            get { return targetCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTarget()
        {
            targetCase_ = TargetOneofCase.None;
            target_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ActionSpatialUnitCommand);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActionSpatialUnitCommand other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (AbilityId != other.AbilityId) return false;
            if (!object.Equals(TargetScreenCoord, other.TargetScreenCoord)) return false;
            if (!object.Equals(TargetMinimapCoord, other.TargetMinimapCoord)) return false;
            if (QueueCommand != other.QueueCommand) return false;
            if (TargetCase != other.TargetCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasAbilityId) hash ^= AbilityId.GetHashCode();
            if (HasTargetScreenCoord) hash ^= TargetScreenCoord.GetHashCode();
            if (HasTargetMinimapCoord) hash ^= TargetMinimapCoord.GetHashCode();
            if (HasQueueCommand) hash ^= QueueCommand.GetHashCode();
            hash ^= (int)targetCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasAbilityId)
            {
                output.WriteRawTag(8);
                output.WriteInt32(AbilityId);
            }
            if (HasTargetScreenCoord)
            {
                output.WriteRawTag(18);
                output.WriteMessage(TargetScreenCoord);
            }
            if (HasTargetMinimapCoord)
            {
                output.WriteRawTag(26);
                output.WriteMessage(TargetMinimapCoord);
            }
            if (HasQueueCommand)
            {
                output.WriteRawTag(32);
                output.WriteBool(QueueCommand);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasAbilityId)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityId);
            }
            if (HasTargetScreenCoord)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetScreenCoord);
            }
            if (HasTargetMinimapCoord)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetMinimapCoord);
            }
            if (HasQueueCommand)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActionSpatialUnitCommand other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasAbilityId)
            {
                AbilityId = other.AbilityId;
            }
            if (other.HasQueueCommand)
            {
                QueueCommand = other.QueueCommand;
            }
            switch (other.TargetCase)
            {
                case TargetOneofCase.TargetScreenCoord:
                    if (TargetScreenCoord == null)
                    {
                        TargetScreenCoord = new global::SC2APIProtocol.PointI();
                    }
                    TargetScreenCoord.MergeFrom(other.TargetScreenCoord);
                    break;
                case TargetOneofCase.TargetMinimapCoord:
                    if (TargetMinimapCoord == null)
                    {
                        TargetMinimapCoord = new global::SC2APIProtocol.PointI();
                    }
                    TargetMinimapCoord.MergeFrom(other.TargetMinimapCoord);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            AbilityId = input.ReadInt32();
                            break;
                        }
                    case 18:
                        {
                            global::SC2APIProtocol.PointI subBuilder = new global::SC2APIProtocol.PointI();
                            if (HasTargetScreenCoord)
                            {
                                subBuilder.MergeFrom(TargetScreenCoord);
                            }
                            input.ReadMessage(subBuilder);
                            TargetScreenCoord = subBuilder;
                            break;
                        }
                    case 26:
                        {
                            global::SC2APIProtocol.PointI subBuilder = new global::SC2APIProtocol.PointI();
                            if (HasTargetMinimapCoord)
                            {
                                subBuilder.MergeFrom(TargetMinimapCoord);
                            }
                            input.ReadMessage(subBuilder);
                            TargetMinimapCoord = subBuilder;
                            break;
                        }
                    case 32:
                        {
                            QueueCommand = input.ReadBool();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ActionSpatialCameraMove : pb::IMessage<ActionSpatialCameraMove>
    {
        private static readonly pb::MessageParser<ActionSpatialCameraMove> _parser = new pb::MessageParser<ActionSpatialCameraMove>(() => new ActionSpatialCameraMove());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActionSpatialCameraMove> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.SpatialReflection.Descriptor.MessageTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionSpatialCameraMove()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionSpatialCameraMove(ActionSpatialCameraMove other) : this()
        {
            centerMinimap_ = other.HasCenterMinimap ? other.centerMinimap_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionSpatialCameraMove Clone()
        {
            return new ActionSpatialCameraMove(this);
        }

        /// <summary>Field number for the "center_minimap" field.</summary>
        public const int CenterMinimapFieldNumber = 1;
        private global::SC2APIProtocol.PointI centerMinimap_;
        /// <summary>
        /// Simulates a click on the minimap to move the camera.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.PointI CenterMinimap
        {
            get { return centerMinimap_; }
            set
            {
                centerMinimap_ = value;
            }
        }
        /// <summary>Gets whether the center_minimap field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCenterMinimap
        {
            get { return centerMinimap_ != null; }
        }
        /// <summary>Clears the value of the center_minimap field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCenterMinimap()
        {
            centerMinimap_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ActionSpatialCameraMove);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActionSpatialCameraMove other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(CenterMinimap, other.CenterMinimap)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasCenterMinimap) hash ^= CenterMinimap.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasCenterMinimap)
            {
                output.WriteRawTag(10);
                output.WriteMessage(CenterMinimap);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasCenterMinimap)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CenterMinimap);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActionSpatialCameraMove other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasCenterMinimap)
            {
                if (!HasCenterMinimap)
                {
                    CenterMinimap = new global::SC2APIProtocol.PointI();
                }
                CenterMinimap.MergeFrom(other.CenterMinimap);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (!HasCenterMinimap)
                            {
                                CenterMinimap = new global::SC2APIProtocol.PointI();
                            }
                            input.ReadMessage(CenterMinimap);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ActionSpatialUnitSelectionPoint : pb::IMessage<ActionSpatialUnitSelectionPoint>
    {
        private static readonly pb::MessageParser<ActionSpatialUnitSelectionPoint> _parser = new pb::MessageParser<ActionSpatialUnitSelectionPoint>(() => new ActionSpatialUnitSelectionPoint());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActionSpatialUnitSelectionPoint> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.SpatialReflection.Descriptor.MessageTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionSpatialUnitSelectionPoint()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionSpatialUnitSelectionPoint(ActionSpatialUnitSelectionPoint other) : this()
        {
            _hasBits0 = other._hasBits0;
            selectionScreenCoord_ = other.HasSelectionScreenCoord ? other.selectionScreenCoord_.Clone() : null;
            type_ = other.type_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionSpatialUnitSelectionPoint Clone()
        {
            return new ActionSpatialUnitSelectionPoint(this);
        }

        /// <summary>Field number for the "selection_screen_coord" field.</summary>
        public const int SelectionScreenCoordFieldNumber = 1;
        private global::SC2APIProtocol.PointI selectionScreenCoord_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.PointI SelectionScreenCoord
        {
            get { return selectionScreenCoord_; }
            set
            {
                selectionScreenCoord_ = value;
            }
        }
        /// <summary>Gets whether the selection_screen_coord field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSelectionScreenCoord
        {
            get { return selectionScreenCoord_ != null; }
        }
        /// <summary>Clears the value of the selection_screen_coord field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSelectionScreenCoord()
        {
            selectionScreenCoord_ = null;
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private readonly static global::SC2APIProtocol.ActionSpatialUnitSelectionPoint.Types.Type TypeDefaultValue = global::SC2APIProtocol.ActionSpatialUnitSelectionPoint.Types.Type.Select;

        private global::SC2APIProtocol.ActionSpatialUnitSelectionPoint.Types.Type type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ActionSpatialUnitSelectionPoint.Types.Type Type
        {
            get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                type_ = value;
            }
        }
        /// <summary>Gets whether the "type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasType
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType()
        {
            _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ActionSpatialUnitSelectionPoint);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActionSpatialUnitSelectionPoint other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(SelectionScreenCoord, other.SelectionScreenCoord)) return false;
            if (Type != other.Type) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasSelectionScreenCoord) hash ^= SelectionScreenCoord.GetHashCode();
            if (HasType) hash ^= Type.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasSelectionScreenCoord)
            {
                output.WriteRawTag(10);
                output.WriteMessage(SelectionScreenCoord);
            }
            if (HasType)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Type);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasSelectionScreenCoord)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectionScreenCoord);
            }
            if (HasType)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActionSpatialUnitSelectionPoint other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasSelectionScreenCoord)
            {
                if (!HasSelectionScreenCoord)
                {
                    SelectionScreenCoord = new global::SC2APIProtocol.PointI();
                }
                SelectionScreenCoord.MergeFrom(other.SelectionScreenCoord);
            }
            if (other.HasType)
            {
                Type = other.Type;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (!HasSelectionScreenCoord)
                            {
                                SelectionScreenCoord = new global::SC2APIProtocol.PointI();
                            }
                            input.ReadMessage(SelectionScreenCoord);
                            break;
                        }
                    case 16:
                        {
                            Type = (global::SC2APIProtocol.ActionSpatialUnitSelectionPoint.Types.Type)input.ReadEnum();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ActionSpatialUnitSelectionPoint message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum Type
            {
                /// <summary>
                /// Equivalent to normal click. Changes selection to unit.
                /// </summary>
                [pbr::OriginalName("Select")] Select = 1,
                /// <summary>
                /// Equivalent to shift+click. Toggle selection of unit.
                /// </summary>
                [pbr::OriginalName("Toggle")] Toggle = 2,
                /// <summary>
                /// Equivalent to control+click. Selects all units of a given type.
                /// </summary>
                [pbr::OriginalName("AllType")] AllType = 3,
                /// <summary>
                /// Equivalent to shift+control+click. Selects all units of a given type.
                /// </summary>
                [pbr::OriginalName("AddAllType")] AddAllType = 4,
            }

        }
        #endregion

    }

    public sealed partial class ActionSpatialUnitSelectionRect : pb::IMessage<ActionSpatialUnitSelectionRect>
    {
        private static readonly pb::MessageParser<ActionSpatialUnitSelectionRect> _parser = new pb::MessageParser<ActionSpatialUnitSelectionRect>(() => new ActionSpatialUnitSelectionRect());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActionSpatialUnitSelectionRect> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.SpatialReflection.Descriptor.MessageTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionSpatialUnitSelectionRect()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionSpatialUnitSelectionRect(ActionSpatialUnitSelectionRect other) : this()
        {
            _hasBits0 = other._hasBits0;
            selectionScreenCoord_ = other.selectionScreenCoord_.Clone();
            selectionAdd_ = other.selectionAdd_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionSpatialUnitSelectionRect Clone()
        {
            return new ActionSpatialUnitSelectionRect(this);
        }

        /// <summary>Field number for the "selection_screen_coord" field.</summary>
        public const int SelectionScreenCoordFieldNumber = 1;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.RectangleI> _repeated_selectionScreenCoord_codec
            = pb::FieldCodec.ForMessage(10, global::SC2APIProtocol.RectangleI.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.RectangleI> selectionScreenCoord_ = new pbc::RepeatedField<global::SC2APIProtocol.RectangleI>();
        /// <summary>
        /// Eventually this should not be an array, but a single field (multiple would be cheating).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.RectangleI> SelectionScreenCoord
        {
            get { return selectionScreenCoord_; }
        }

        /// <summary>Field number for the "selection_add" field.</summary>
        public const int SelectionAddFieldNumber = 2;
        private readonly static bool SelectionAddDefaultValue = false;

        private bool selectionAdd_;
        /// <summary>
        /// Equivalent to shift+drag. Adds units to selection.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool SelectionAdd
        {
            get { if ((_hasBits0 & 1) != 0) { return selectionAdd_; } else { return SelectionAddDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                selectionAdd_ = value;
            }
        }
        /// <summary>Gets whether the "selection_add" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSelectionAdd
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "selection_add" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSelectionAdd()
        {
            _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ActionSpatialUnitSelectionRect);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActionSpatialUnitSelectionRect other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!selectionScreenCoord_.Equals(other.selectionScreenCoord_)) return false;
            if (SelectionAdd != other.SelectionAdd) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= selectionScreenCoord_.GetHashCode();
            if (HasSelectionAdd) hash ^= SelectionAdd.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            selectionScreenCoord_.WriteTo(output, _repeated_selectionScreenCoord_codec);
            if (HasSelectionAdd)
            {
                output.WriteRawTag(16);
                output.WriteBool(SelectionAdd);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += selectionScreenCoord_.CalculateSize(_repeated_selectionScreenCoord_codec);
            if (HasSelectionAdd)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActionSpatialUnitSelectionRect other)
        {
            if (other == null)
            {
                return;
            }
            selectionScreenCoord_.Add(other.selectionScreenCoord_);
            if (other.HasSelectionAdd)
            {
                SelectionAdd = other.SelectionAdd;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            selectionScreenCoord_.AddEntriesFrom(input, _repeated_selectionScreenCoord_codec);
                            break;
                        }
                    case 16:
                        {
                            SelectionAdd = input.ReadBool();
                            break;
                        }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code
