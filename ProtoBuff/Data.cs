// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: s2clientprotocol/data.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SC2APIProtocol
{

    /// <summary>Holder for reflection information generated from s2clientprotocol/data.proto</summary>
    public static partial class DataReflection
    {

        #region Descriptor
        /// <summary>File descriptor for s2clientprotocol/data.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static DataReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "ChtzMmNsaWVudHByb3RvY29sL2RhdGEucHJvdG8SDlNDMkFQSVByb3RvY29s",
                  "Gh1zMmNsaWVudHByb3RvY29sL2NvbW1vbi5wcm90byLEAwoLQWJpbGl0eURh",
                  "dGESEgoKYWJpbGl0eV9pZBgBIAEoDRIRCglsaW5rX25hbWUYAiABKAkSEgoK",
                  "bGlua19pbmRleBgDIAEoDRITCgtidXR0b25fbmFtZRgEIAEoCRIVCg1mcmll",
                  "bmRseV9uYW1lGAUgASgJEg4KBmhvdGtleRgGIAEoCRIcChRyZW1hcHNfdG9f",
                  "YWJpbGl0eV9pZBgHIAEoDRIRCglhdmFpbGFibGUYCCABKAgSMgoGdGFyZ2V0",
                  "GAkgASgOMiIuU0MyQVBJUHJvdG9jb2wuQWJpbGl0eURhdGEuVGFyZ2V0EhUK",
                  "DWFsbG93X21pbmltYXAYCiABKAgSFgoOYWxsb3dfYXV0b2Nhc3QYCyABKAgS",
                  "EwoLaXNfYnVpbGRpbmcYDCABKAgSGAoQZm9vdHByaW50X3JhZGl1cxgNIAEo",
                  "AhIcChRpc19pbnN0YW50X3BsYWNlbWVudBgOIAEoCBISCgpjYXN0X3Jhbmdl",
                  "GA8gASgCIkkKBlRhcmdldBIICgROb25lEAESCQoFUG9pbnQQAhIICgRVbml0",
                  "EAMSDwoLUG9pbnRPclVuaXQQBBIPCgtQb2ludE9yTm9uZRAFIkoKC0RhbWFn",
                  "ZUJvbnVzEiwKCWF0dHJpYnV0ZRgBIAEoDjIZLlNDMkFQSVByb3RvY29sLkF0",
                  "dHJpYnV0ZRINCgVib251cxgCIAEoAiLXAQoGV2VhcG9uEi8KBHR5cGUYASAB",
                  "KA4yIS5TQzJBUElQcm90b2NvbC5XZWFwb24uVGFyZ2V0VHlwZRIOCgZkYW1h",
                  "Z2UYAiABKAISMQoMZGFtYWdlX2JvbnVzGAMgAygLMhsuU0MyQVBJUHJvdG9j",
                  "b2wuRGFtYWdlQm9udXMSDwoHYXR0YWNrcxgEIAEoDRINCgVyYW5nZRgFIAEo",
                  "AhINCgVzcGVlZBgGIAEoAiIqCgpUYXJnZXRUeXBlEgoKBkdyb3VuZBABEgcK",
                  "A0FpchACEgcKA0FueRADIpUECgxVbml0VHlwZURhdGESDwoHdW5pdF9pZBgB",
                  "IAEoDRIMCgRuYW1lGAIgASgJEhEKCWF2YWlsYWJsZRgDIAEoCBISCgpjYXJn",
                  "b19zaXplGAQgASgNEhQKDG1pbmVyYWxfY29zdBgMIAEoDRIUCgx2ZXNwZW5l",
                  "X2Nvc3QYDSABKA0SFQoNZm9vZF9yZXF1aXJlZBgOIAEoAhIVCg1mb29kX3By",
                  "b3ZpZGVkGBIgASgCEhIKCmFiaWxpdHlfaWQYDyABKA0SIgoEcmFjZRgQIAEo",
                  "DjIULlNDMkFQSVByb3RvY29sLlJhY2USEgoKYnVpbGRfdGltZRgRIAEoAhIT",
                  "CgtoYXNfdmVzcGVuZRgTIAEoCBIUCgxoYXNfbWluZXJhbHMYFCABKAgSEwoL",
                  "c2lnaHRfcmFuZ2UYGSABKAISEgoKdGVjaF9hbGlhcxgVIAMoDRISCgp1bml0",
                  "X2FsaWFzGBYgASgNEhgKEHRlY2hfcmVxdWlyZW1lbnQYFyABKA0SGAoQcmVx",
                  "dWlyZV9hdHRhY2hlZBgYIAEoCBItCgphdHRyaWJ1dGVzGAggAygOMhkuU0My",
                  "QVBJUHJvdG9jb2wuQXR0cmlidXRlEhYKDm1vdmVtZW50X3NwZWVkGAkgASgC",
                  "Eg0KBWFybW9yGAogASgCEicKB3dlYXBvbnMYCyADKAsyFi5TQzJBUElQcm90",
                  "b2NvbC5XZWFwb24ihgEKC1VwZ3JhZGVEYXRhEhIKCnVwZ3JhZGVfaWQYASAB",
                  "KA0SDAoEbmFtZRgCIAEoCRIUCgxtaW5lcmFsX2Nvc3QYAyABKA0SFAoMdmVz",
                  "cGVuZV9jb3N0GAQgASgNEhUKDXJlc2VhcmNoX3RpbWUYBSABKAISEgoKYWJp",
                  "bGl0eV9pZBgGIAEoDSIpCghCdWZmRGF0YRIPCgdidWZmX2lkGAEgASgNEgwK",
                  "BG5hbWUYAiABKAkiVAoKRWZmZWN0RGF0YRIRCgllZmZlY3RfaWQYASABKA0S",
                  "DAoEbmFtZRgCIAEoCRIVCg1mcmllbmRseV9uYW1lGAMgASgJEg4KBnJhZGl1",
                  "cxgEIAEoAiqeAQoJQXR0cmlidXRlEgkKBUxpZ2h0EAESCwoHQXJtb3JlZBAC",
                  "Eg4KCkJpb2xvZ2ljYWwQAxIOCgpNZWNoYW5pY2FsEAQSCwoHUm9ib3RpYxAF",
                  "EgsKB1BzaW9uaWMQBhILCgdNYXNzaXZlEAcSDQoJU3RydWN0dXJlEAgSCQoF",
                  "SG92ZXIQCRIKCgZIZXJvaWMQChIMCghTdW1tb25lZBAL"));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { global::SC2APIProtocol.CommonReflection.Descriptor, },
                new pbr::GeneratedClrTypeInfo(new[] { typeof(global::SC2APIProtocol.Attribute), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.AbilityData), global::SC2APIProtocol.AbilityData.Parser, new[]{ "AbilityId", "LinkName", "LinkIndex", "ButtonName", "FriendlyName", "Hotkey", "RemapsToAbilityId", "Available", "Target", "AllowMinimap", "AllowAutocast", "IsBuilding", "FootprintRadius", "IsInstantPlacement", "CastRange" }, null, new[]{ typeof(global::SC2APIProtocol.AbilityData.Types.Target) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.DamageBonus), global::SC2APIProtocol.DamageBonus.Parser, new[]{ "Attribute", "Bonus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.Weapon), global::SC2APIProtocol.Weapon.Parser, new[]{ "Type", "Damage", "DamageBonus", "Attacks", "Range", "Speed" }, null, new[]{ typeof(global::SC2APIProtocol.Weapon.Types.TargetType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.UnitTypeData), global::SC2APIProtocol.UnitTypeData.Parser, new[]{ "UnitId", "Name", "Available", "CargoSize", "MineralCost", "VespeneCost", "FoodRequired", "FoodProvided", "AbilityId", "Race", "BuildTime", "HasVespene", "HasMinerals", "SightRange", "TechAlias", "UnitAlias", "TechRequirement", "RequireAttached", "Attributes", "MovementSpeed", "Armor", "Weapons" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.UpgradeData), global::SC2APIProtocol.UpgradeData.Parser, new[]{ "UpgradeId", "Name", "MineralCost", "VespeneCost", "ResearchTime", "AbilityId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.BuffData), global::SC2APIProtocol.BuffData.Parser, new[]{ "BuffId", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.EffectData), global::SC2APIProtocol.EffectData.Parser, new[]{ "EffectId", "Name", "FriendlyName", "Radius" }, null, null, null, null)
                }));
        }
        #endregion

    }
    #region Enums
    public enum Attribute
    {
        [pbr::OriginalName("Light")] Light = 1,
        [pbr::OriginalName("Armored")] Armored = 2,
        [pbr::OriginalName("Biological")] Biological = 3,
        [pbr::OriginalName("Mechanical")] Mechanical = 4,
        [pbr::OriginalName("Robotic")] Robotic = 5,
        [pbr::OriginalName("Psionic")] Psionic = 6,
        [pbr::OriginalName("Massive")] Massive = 7,
        [pbr::OriginalName("Structure")] Structure = 8,
        [pbr::OriginalName("Hover")] Hover = 9,
        [pbr::OriginalName("Heroic")] Heroic = 10,
        [pbr::OriginalName("Summoned")] Summoned = 11,
    }

    #endregion

    #region Messages
    /// <summary>
    /// May not relevant: queueable (everything is queueable).
    /// May not be important: AbilSetId - marine stim, marauder stim.
    /// Stuff omitted: transient.
    /// Stuff that may be important: cost, range, Alignment, targetfilters.
    /// </summary>
    public sealed partial class AbilityData : pb::IMessage<AbilityData>
    {
        private static readonly pb::MessageParser<AbilityData> _parser = new pb::MessageParser<AbilityData>(() => new AbilityData());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AbilityData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.DataReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AbilityData()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AbilityData(AbilityData other) : this()
        {
            _hasBits0 = other._hasBits0;
            abilityId_ = other.abilityId_;
            linkName_ = other.linkName_;
            linkIndex_ = other.linkIndex_;
            buttonName_ = other.buttonName_;
            friendlyName_ = other.friendlyName_;
            hotkey_ = other.hotkey_;
            remapsToAbilityId_ = other.remapsToAbilityId_;
            available_ = other.available_;
            target_ = other.target_;
            allowMinimap_ = other.allowMinimap_;
            allowAutocast_ = other.allowAutocast_;
            isBuilding_ = other.isBuilding_;
            footprintRadius_ = other.footprintRadius_;
            isInstantPlacement_ = other.isInstantPlacement_;
            castRange_ = other.castRange_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AbilityData Clone()
        {
            return new AbilityData(this);
        }

        /// <summary>Field number for the "ability_id" field.</summary>
        public const int AbilityIdFieldNumber = 1;
        private readonly static uint AbilityIdDefaultValue = 0;

        private uint abilityId_;
        /// <summary>
        /// Stable ID.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AbilityId
        {
            get { if ((_hasBits0 & 1) != 0) { return abilityId_; } else { return AbilityIdDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                abilityId_ = value;
            }
        }
        /// <summary>Gets whether the "ability_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAbilityId
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "ability_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAbilityId()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "link_name" field.</summary>
        public const int LinkNameFieldNumber = 2;
        private readonly static string LinkNameDefaultValue = "";

        private string linkName_;
        /// <summary>
        /// Catalog name of the ability.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LinkName
        {
            get { return linkName_ ?? LinkNameDefaultValue; }
            set
            {
                linkName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "link_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLinkName
        {
            get { return linkName_ != null; }
        }
        /// <summary>Clears the value of the "link_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLinkName()
        {
            linkName_ = null;
        }

        /// <summary>Field number for the "link_index" field.</summary>
        public const int LinkIndexFieldNumber = 3;
        private readonly static uint LinkIndexDefaultValue = 0;

        private uint linkIndex_;
        /// <summary>
        /// Catalog index of the ability.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LinkIndex
        {
            get { if ((_hasBits0 & 2) != 0) { return linkIndex_; } else { return LinkIndexDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                linkIndex_ = value;
            }
        }
        /// <summary>Gets whether the "link_index" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLinkIndex
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "link_index" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLinkIndex()
        {
            _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "button_name" field.</summary>
        public const int ButtonNameFieldNumber = 4;
        private readonly static string ButtonNameDefaultValue = "";

        private string buttonName_;
        /// <summary>
        /// Name used for the command card. May not always be set.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ButtonName
        {
            get { return buttonName_ ?? ButtonNameDefaultValue; }
            set
            {
                buttonName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "button_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasButtonName
        {
            get { return buttonName_ != null; }
        }
        /// <summary>Clears the value of the "button_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearButtonName()
        {
            buttonName_ = null;
        }

        /// <summary>Field number for the "friendly_name" field.</summary>
        public const int FriendlyNameFieldNumber = 5;
        private readonly static string FriendlyNameDefaultValue = "";

        private string friendlyName_;
        /// <summary>
        /// A human friendly name when the button name or link name isn't descriptive.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FriendlyName
        {
            get { return friendlyName_ ?? FriendlyNameDefaultValue; }
            set
            {
                friendlyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "friendly_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasFriendlyName
        {
            get { return friendlyName_ != null; }
        }
        /// <summary>Clears the value of the "friendly_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFriendlyName()
        {
            friendlyName_ = null;
        }

        /// <summary>Field number for the "hotkey" field.</summary>
        public const int HotkeyFieldNumber = 6;
        private readonly static string HotkeyDefaultValue = "";

        private string hotkey_;
        /// <summary>
        /// Hotkey. May not always be set.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Hotkey
        {
            get { return hotkey_ ?? HotkeyDefaultValue; }
            set
            {
                hotkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "hotkey" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHotkey
        {
            get { return hotkey_ != null; }
        }
        /// <summary>Clears the value of the "hotkey" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHotkey()
        {
            hotkey_ = null;
        }

        /// <summary>Field number for the "remaps_to_ability_id" field.</summary>
        public const int RemapsToAbilityIdFieldNumber = 7;
        private readonly static uint RemapsToAbilityIdDefaultValue = 0;

        private uint remapsToAbilityId_;
        /// <summary>
        /// This ability id may be represented by the given more generic id.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RemapsToAbilityId
        {
            get { if ((_hasBits0 & 4) != 0) { return remapsToAbilityId_; } else { return RemapsToAbilityIdDefaultValue; } }
            set
            {
                _hasBits0 |= 4;
                remapsToAbilityId_ = value;
            }
        }
        /// <summary>Gets whether the "remaps_to_ability_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRemapsToAbilityId
        {
            get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "remaps_to_ability_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRemapsToAbilityId()
        {
            _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "available" field.</summary>
        public const int AvailableFieldNumber = 8;
        private readonly static bool AvailableDefaultValue = false;

        private bool available_;
        /// <summary>
        /// If true, the ability may be used by this set of mods/map.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Available
        {
            get { if ((_hasBits0 & 8) != 0) { return available_; } else { return AvailableDefaultValue; } }
            set
            {
                _hasBits0 |= 8;
                available_ = value;
            }
        }
        /// <summary>Gets whether the "available" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAvailable
        {
            get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "available" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAvailable()
        {
            _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "target" field.</summary>
        public const int TargetFieldNumber = 9;
        private readonly static global::SC2APIProtocol.AbilityData.Types.Target TargetDefaultValue = global::SC2APIProtocol.AbilityData.Types.Target.None;

        private global::SC2APIProtocol.AbilityData.Types.Target target_;
        /// <summary>
        /// Determines if a point is optional or required.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.AbilityData.Types.Target Target
        {
            get { if ((_hasBits0 & 16) != 0) { return target_; } else { return TargetDefaultValue; } }
            set
            {
                _hasBits0 |= 16;
                target_ = value;
            }
        }
        /// <summary>Gets whether the "target" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTarget
        {
            get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "target" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTarget()
        {
            _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "allow_minimap" field.</summary>
        public const int AllowMinimapFieldNumber = 10;
        private readonly static bool AllowMinimapDefaultValue = false;

        private bool allowMinimap_;
        /// <summary>
        /// Can be cast in the minimap.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool AllowMinimap
        {
            get { if ((_hasBits0 & 32) != 0) { return allowMinimap_; } else { return AllowMinimapDefaultValue; } }
            set
            {
                _hasBits0 |= 32;
                allowMinimap_ = value;
            }
        }
        /// <summary>Gets whether the "allow_minimap" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAllowMinimap
        {
            get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "allow_minimap" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAllowMinimap()
        {
            _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "allow_autocast" field.</summary>
        public const int AllowAutocastFieldNumber = 11;
        private readonly static bool AllowAutocastDefaultValue = false;

        private bool allowAutocast_;
        /// <summary>
        /// Autocast can be set.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool AllowAutocast
        {
            get { if ((_hasBits0 & 64) != 0) { return allowAutocast_; } else { return AllowAutocastDefaultValue; } }
            set
            {
                _hasBits0 |= 64;
                allowAutocast_ = value;
            }
        }
        /// <summary>Gets whether the "allow_autocast" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAllowAutocast
        {
            get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "allow_autocast" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAllowAutocast()
        {
            _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "is_building" field.</summary>
        public const int IsBuildingFieldNumber = 12;
        private readonly static bool IsBuildingDefaultValue = false;

        private bool isBuilding_;
        /// <summary>
        /// Requires placement to construct a building.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsBuilding
        {
            get { if ((_hasBits0 & 128) != 0) { return isBuilding_; } else { return IsBuildingDefaultValue; } }
            set
            {
                _hasBits0 |= 128;
                isBuilding_ = value;
            }
        }
        /// <summary>Gets whether the "is_building" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIsBuilding
        {
            get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "is_building" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIsBuilding()
        {
            _hasBits0 &= ~128;
        }

        /// <summary>Field number for the "footprint_radius" field.</summary>
        public const int FootprintRadiusFieldNumber = 13;
        private readonly static float FootprintRadiusDefaultValue = 0F;

        private float footprintRadius_;
        /// <summary>
        /// Estimation of the footprint size. Need a better footprint.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float FootprintRadius
        {
            get { if ((_hasBits0 & 256) != 0) { return footprintRadius_; } else { return FootprintRadiusDefaultValue; } }
            set
            {
                _hasBits0 |= 256;
                footprintRadius_ = value;
            }
        }
        /// <summary>Gets whether the "footprint_radius" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasFootprintRadius
        {
            get { return (_hasBits0 & 256) != 0; }
        }
        /// <summary>Clears the value of the "footprint_radius" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFootprintRadius()
        {
            _hasBits0 &= ~256;
        }

        /// <summary>Field number for the "is_instant_placement" field.</summary>
        public const int IsInstantPlacementFieldNumber = 14;
        private readonly static bool IsInstantPlacementDefaultValue = false;

        private bool isInstantPlacement_;
        /// <summary>
        /// Placement next to an existing structure, e.g., an add-on like a Tech Lab.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsInstantPlacement
        {
            get { if ((_hasBits0 & 512) != 0) { return isInstantPlacement_; } else { return IsInstantPlacementDefaultValue; } }
            set
            {
                _hasBits0 |= 512;
                isInstantPlacement_ = value;
            }
        }
        /// <summary>Gets whether the "is_instant_placement" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIsInstantPlacement
        {
            get { return (_hasBits0 & 512) != 0; }
        }
        /// <summary>Clears the value of the "is_instant_placement" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIsInstantPlacement()
        {
            _hasBits0 &= ~512;
        }

        /// <summary>Field number for the "cast_range" field.</summary>
        public const int CastRangeFieldNumber = 15;
        private readonly static float CastRangeDefaultValue = 0F;

        private float castRange_;
        /// <summary>
        /// Range unit can cast ability without needing to approach target.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float CastRange
        {
            get { if ((_hasBits0 & 1024) != 0) { return castRange_; } else { return CastRangeDefaultValue; } }
            set
            {
                _hasBits0 |= 1024;
                castRange_ = value;
            }
        }
        /// <summary>Gets whether the "cast_range" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCastRange
        {
            get { return (_hasBits0 & 1024) != 0; }
        }
        /// <summary>Clears the value of the "cast_range" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCastRange()
        {
            _hasBits0 &= ~1024;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AbilityData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AbilityData other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (AbilityId != other.AbilityId) return false;
            if (LinkName != other.LinkName) return false;
            if (LinkIndex != other.LinkIndex) return false;
            if (ButtonName != other.ButtonName) return false;
            if (FriendlyName != other.FriendlyName) return false;
            if (Hotkey != other.Hotkey) return false;
            if (RemapsToAbilityId != other.RemapsToAbilityId) return false;
            if (Available != other.Available) return false;
            if (Target != other.Target) return false;
            if (AllowMinimap != other.AllowMinimap) return false;
            if (AllowAutocast != other.AllowAutocast) return false;
            if (IsBuilding != other.IsBuilding) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FootprintRadius, other.FootprintRadius)) return false;
            if (IsInstantPlacement != other.IsInstantPlacement) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CastRange, other.CastRange)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasAbilityId) hash ^= AbilityId.GetHashCode();
            if (HasLinkName) hash ^= LinkName.GetHashCode();
            if (HasLinkIndex) hash ^= LinkIndex.GetHashCode();
            if (HasButtonName) hash ^= ButtonName.GetHashCode();
            if (HasFriendlyName) hash ^= FriendlyName.GetHashCode();
            if (HasHotkey) hash ^= Hotkey.GetHashCode();
            if (HasRemapsToAbilityId) hash ^= RemapsToAbilityId.GetHashCode();
            if (HasAvailable) hash ^= Available.GetHashCode();
            if (HasTarget) hash ^= Target.GetHashCode();
            if (HasAllowMinimap) hash ^= AllowMinimap.GetHashCode();
            if (HasAllowAutocast) hash ^= AllowAutocast.GetHashCode();
            if (HasIsBuilding) hash ^= IsBuilding.GetHashCode();
            if (HasFootprintRadius) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FootprintRadius);
            if (HasIsInstantPlacement) hash ^= IsInstantPlacement.GetHashCode();
            if (HasCastRange) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CastRange);
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasAbilityId)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(AbilityId);
            }
            if (HasLinkName)
            {
                output.WriteRawTag(18);
                output.WriteString(LinkName);
            }
            if (HasLinkIndex)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(LinkIndex);
            }
            if (HasButtonName)
            {
                output.WriteRawTag(34);
                output.WriteString(ButtonName);
            }
            if (HasFriendlyName)
            {
                output.WriteRawTag(42);
                output.WriteString(FriendlyName);
            }
            if (HasHotkey)
            {
                output.WriteRawTag(50);
                output.WriteString(Hotkey);
            }
            if (HasRemapsToAbilityId)
            {
                output.WriteRawTag(56);
                output.WriteUInt32(RemapsToAbilityId);
            }
            if (HasAvailable)
            {
                output.WriteRawTag(64);
                output.WriteBool(Available);
            }
            if (HasTarget)
            {
                output.WriteRawTag(72);
                output.WriteEnum((int)Target);
            }
            if (HasAllowMinimap)
            {
                output.WriteRawTag(80);
                output.WriteBool(AllowMinimap);
            }
            if (HasAllowAutocast)
            {
                output.WriteRawTag(88);
                output.WriteBool(AllowAutocast);
            }
            if (HasIsBuilding)
            {
                output.WriteRawTag(96);
                output.WriteBool(IsBuilding);
            }
            if (HasFootprintRadius)
            {
                output.WriteRawTag(109);
                output.WriteFloat(FootprintRadius);
            }
            if (HasIsInstantPlacement)
            {
                output.WriteRawTag(112);
                output.WriteBool(IsInstantPlacement);
            }
            if (HasCastRange)
            {
                output.WriteRawTag(125);
                output.WriteFloat(CastRange);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasAbilityId)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AbilityId);
            }
            if (HasLinkName)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(LinkName);
            }
            if (HasLinkIndex)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LinkIndex);
            }
            if (HasButtonName)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ButtonName);
            }
            if (HasFriendlyName)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(FriendlyName);
            }
            if (HasHotkey)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Hotkey);
            }
            if (HasRemapsToAbilityId)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RemapsToAbilityId);
            }
            if (HasAvailable)
            {
                size += 1 + 1;
            }
            if (HasTarget)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Target);
            }
            if (HasAllowMinimap)
            {
                size += 1 + 1;
            }
            if (HasAllowAutocast)
            {
                size += 1 + 1;
            }
            if (HasIsBuilding)
            {
                size += 1 + 1;
            }
            if (HasFootprintRadius)
            {
                size += 1 + 4;
            }
            if (HasIsInstantPlacement)
            {
                size += 1 + 1;
            }
            if (HasCastRange)
            {
                size += 1 + 4;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AbilityData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasAbilityId)
            {
                AbilityId = other.AbilityId;
            }
            if (other.HasLinkName)
            {
                LinkName = other.LinkName;
            }
            if (other.HasLinkIndex)
            {
                LinkIndex = other.LinkIndex;
            }
            if (other.HasButtonName)
            {
                ButtonName = other.ButtonName;
            }
            if (other.HasFriendlyName)
            {
                FriendlyName = other.FriendlyName;
            }
            if (other.HasHotkey)
            {
                Hotkey = other.Hotkey;
            }
            if (other.HasRemapsToAbilityId)
            {
                RemapsToAbilityId = other.RemapsToAbilityId;
            }
            if (other.HasAvailable)
            {
                Available = other.Available;
            }
            if (other.HasTarget)
            {
                Target = other.Target;
            }
            if (other.HasAllowMinimap)
            {
                AllowMinimap = other.AllowMinimap;
            }
            if (other.HasAllowAutocast)
            {
                AllowAutocast = other.AllowAutocast;
            }
            if (other.HasIsBuilding)
            {
                IsBuilding = other.IsBuilding;
            }
            if (other.HasFootprintRadius)
            {
                FootprintRadius = other.FootprintRadius;
            }
            if (other.HasIsInstantPlacement)
            {
                IsInstantPlacement = other.IsInstantPlacement;
            }
            if (other.HasCastRange)
            {
                CastRange = other.CastRange;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            AbilityId = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            LinkName = input.ReadString();
                            break;
                        }
                    case 24:
                        {
                            LinkIndex = input.ReadUInt32();
                            break;
                        }
                    case 34:
                        {
                            ButtonName = input.ReadString();
                            break;
                        }
                    case 42:
                        {
                            FriendlyName = input.ReadString();
                            break;
                        }
                    case 50:
                        {
                            Hotkey = input.ReadString();
                            break;
                        }
                    case 56:
                        {
                            RemapsToAbilityId = input.ReadUInt32();
                            break;
                        }
                    case 64:
                        {
                            Available = input.ReadBool();
                            break;
                        }
                    case 72:
                        {
                            Target = (global::SC2APIProtocol.AbilityData.Types.Target)input.ReadEnum();
                            break;
                        }
                    case 80:
                        {
                            AllowMinimap = input.ReadBool();
                            break;
                        }
                    case 88:
                        {
                            AllowAutocast = input.ReadBool();
                            break;
                        }
                    case 96:
                        {
                            IsBuilding = input.ReadBool();
                            break;
                        }
                    case 109:
                        {
                            FootprintRadius = input.ReadFloat();
                            break;
                        }
                    case 112:
                        {
                            IsInstantPlacement = input.ReadBool();
                            break;
                        }
                    case 125:
                        {
                            CastRange = input.ReadFloat();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the AbilityData message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum Target
            {
                /// <summary>
                /// Does not require a target.
                /// </summary>
                [pbr::OriginalName("None")] None = 1,
                /// <summary>
                /// Requires a target position.
                /// </summary>
                [pbr::OriginalName("Point")] Point = 2,
                /// <summary>
                /// Requires a unit to target. Given by position using feature layers.
                /// </summary>
                [pbr::OriginalName("Unit")] Unit = 3,
                /// <summary>
                /// Requires either a target point or target unit.
                /// </summary>
                [pbr::OriginalName("PointOrUnit")] PointOrUnit = 4,
                /// <summary>
                /// Requires either a target point or no target. (eg. building add-ons)
                /// </summary>
                [pbr::OriginalName("PointOrNone")] PointOrNone = 5,
            }

        }
        #endregion

    }

    public sealed partial class DamageBonus : pb::IMessage<DamageBonus>
    {
        private static readonly pb::MessageParser<DamageBonus> _parser = new pb::MessageParser<DamageBonus>(() => new DamageBonus());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DamageBonus> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.DataReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DamageBonus()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DamageBonus(DamageBonus other) : this()
        {
            _hasBits0 = other._hasBits0;
            attribute_ = other.attribute_;
            bonus_ = other.bonus_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DamageBonus Clone()
        {
            return new DamageBonus(this);
        }

        /// <summary>Field number for the "attribute" field.</summary>
        public const int AttributeFieldNumber = 1;
        private readonly static global::SC2APIProtocol.Attribute AttributeDefaultValue = global::SC2APIProtocol.Attribute.Light;

        private global::SC2APIProtocol.Attribute attribute_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.Attribute Attribute
        {
            get { if ((_hasBits0 & 1) != 0) { return attribute_; } else { return AttributeDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                attribute_ = value;
            }
        }
        /// <summary>Gets whether the "attribute" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAttribute
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "attribute" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAttribute()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "bonus" field.</summary>
        public const int BonusFieldNumber = 2;
        private readonly static float BonusDefaultValue = 0F;

        private float bonus_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Bonus
        {
            get { if ((_hasBits0 & 2) != 0) { return bonus_; } else { return BonusDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                bonus_ = value;
            }
        }
        /// <summary>Gets whether the "bonus" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBonus
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "bonus" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBonus()
        {
            _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DamageBonus);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DamageBonus other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Attribute != other.Attribute) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Bonus, other.Bonus)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasAttribute) hash ^= Attribute.GetHashCode();
            if (HasBonus) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Bonus);
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasAttribute)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Attribute);
            }
            if (HasBonus)
            {
                output.WriteRawTag(21);
                output.WriteFloat(Bonus);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasAttribute)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Attribute);
            }
            if (HasBonus)
            {
                size += 1 + 4;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DamageBonus other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasAttribute)
            {
                Attribute = other.Attribute;
            }
            if (other.HasBonus)
            {
                Bonus = other.Bonus;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Attribute = (global::SC2APIProtocol.Attribute)input.ReadEnum();
                            break;
                        }
                    case 21:
                        {
                            Bonus = input.ReadFloat();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Weapon : pb::IMessage<Weapon>
    {
        private static readonly pb::MessageParser<Weapon> _parser = new pb::MessageParser<Weapon>(() => new Weapon());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Weapon> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.DataReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Weapon()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Weapon(Weapon other) : this()
        {
            _hasBits0 = other._hasBits0;
            type_ = other.type_;
            damage_ = other.damage_;
            damageBonus_ = other.damageBonus_.Clone();
            attacks_ = other.attacks_;
            range_ = other.range_;
            speed_ = other.speed_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Weapon Clone()
        {
            return new Weapon(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private readonly static global::SC2APIProtocol.Weapon.Types.TargetType TypeDefaultValue = global::SC2APIProtocol.Weapon.Types.TargetType.Ground;

        private global::SC2APIProtocol.Weapon.Types.TargetType type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.Weapon.Types.TargetType Type
        {
            get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                type_ = value;
            }
        }
        /// <summary>Gets whether the "type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasType
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "damage" field.</summary>
        public const int DamageFieldNumber = 2;
        private readonly static float DamageDefaultValue = 0F;

        private float damage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Damage
        {
            get { if ((_hasBits0 & 2) != 0) { return damage_; } else { return DamageDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                damage_ = value;
            }
        }
        /// <summary>Gets whether the "damage" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDamage
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "damage" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDamage()
        {
            _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "damage_bonus" field.</summary>
        public const int DamageBonusFieldNumber = 3;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.DamageBonus> _repeated_damageBonus_codec
            = pb::FieldCodec.ForMessage(26, global::SC2APIProtocol.DamageBonus.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.DamageBonus> damageBonus_ = new pbc::RepeatedField<global::SC2APIProtocol.DamageBonus>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.DamageBonus> DamageBonus
        {
            get { return damageBonus_; }
        }

        /// <summary>Field number for the "attacks" field.</summary>
        public const int AttacksFieldNumber = 4;
        private readonly static uint AttacksDefaultValue = 0;

        private uint attacks_;
        /// <summary>
        /// Number of hits per attack. (eg. Colossus has 2 beams)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Attacks
        {
            get { if ((_hasBits0 & 4) != 0) { return attacks_; } else { return AttacksDefaultValue; } }
            set
            {
                _hasBits0 |= 4;
                attacks_ = value;
            }
        }
        /// <summary>Gets whether the "attacks" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAttacks
        {
            get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "attacks" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAttacks()
        {
            _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "range" field.</summary>
        public const int RangeFieldNumber = 5;
        private readonly static float RangeDefaultValue = 0F;

        private float range_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Range
        {
            get { if ((_hasBits0 & 8) != 0) { return range_; } else { return RangeDefaultValue; } }
            set
            {
                _hasBits0 |= 8;
                range_ = value;
            }
        }
        /// <summary>Gets whether the "range" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRange
        {
            get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "range" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRange()
        {
            _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "speed" field.</summary>
        public const int SpeedFieldNumber = 6;
        private readonly static float SpeedDefaultValue = 0F;

        private float speed_;
        /// <summary>
        /// Time between attacks.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Speed
        {
            get { if ((_hasBits0 & 16) != 0) { return speed_; } else { return SpeedDefaultValue; } }
            set
            {
                _hasBits0 |= 16;
                speed_ = value;
            }
        }
        /// <summary>Gets whether the "speed" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSpeed
        {
            get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "speed" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSpeed()
        {
            _hasBits0 &= ~16;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Weapon);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Weapon other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Type != other.Type) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Damage, other.Damage)) return false;
            if (!damageBonus_.Equals(other.damageBonus_)) return false;
            if (Attacks != other.Attacks) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Range, other.Range)) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasType) hash ^= Type.GetHashCode();
            if (HasDamage) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Damage);
            hash ^= damageBonus_.GetHashCode();
            if (HasAttacks) hash ^= Attacks.GetHashCode();
            if (HasRange) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Range);
            if (HasSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasType)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Type);
            }
            if (HasDamage)
            {
                output.WriteRawTag(21);
                output.WriteFloat(Damage);
            }
            damageBonus_.WriteTo(output, _repeated_damageBonus_codec);
            if (HasAttacks)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(Attacks);
            }
            if (HasRange)
            {
                output.WriteRawTag(45);
                output.WriteFloat(Range);
            }
            if (HasSpeed)
            {
                output.WriteRawTag(53);
                output.WriteFloat(Speed);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasType)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (HasDamage)
            {
                size += 1 + 4;
            }
            size += damageBonus_.CalculateSize(_repeated_damageBonus_codec);
            if (HasAttacks)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Attacks);
            }
            if (HasRange)
            {
                size += 1 + 4;
            }
            if (HasSpeed)
            {
                size += 1 + 4;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Weapon other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasType)
            {
                Type = other.Type;
            }
            if (other.HasDamage)
            {
                Damage = other.Damage;
            }
            damageBonus_.Add(other.damageBonus_);
            if (other.HasAttacks)
            {
                Attacks = other.Attacks;
            }
            if (other.HasRange)
            {
                Range = other.Range;
            }
            if (other.HasSpeed)
            {
                Speed = other.Speed;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Type = (global::SC2APIProtocol.Weapon.Types.TargetType)input.ReadEnum();
                            break;
                        }
                    case 21:
                        {
                            Damage = input.ReadFloat();
                            break;
                        }
                    case 26:
                        {
                            damageBonus_.AddEntriesFrom(input, _repeated_damageBonus_codec);
                            break;
                        }
                    case 32:
                        {
                            Attacks = input.ReadUInt32();
                            break;
                        }
                    case 45:
                        {
                            Range = input.ReadFloat();
                            break;
                        }
                    case 53:
                        {
                            Speed = input.ReadFloat();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Weapon message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum TargetType
            {
                [pbr::OriginalName("Ground")] Ground = 1,
                [pbr::OriginalName("Air")] Air = 2,
                [pbr::OriginalName("Any")] Any = 3,
            }

        }
        #endregion

    }

    public sealed partial class UnitTypeData : pb::IMessage<UnitTypeData>
    {
        private static readonly pb::MessageParser<UnitTypeData> _parser = new pb::MessageParser<UnitTypeData>(() => new UnitTypeData());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UnitTypeData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.DataReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UnitTypeData()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UnitTypeData(UnitTypeData other) : this()
        {
            _hasBits0 = other._hasBits0;
            unitId_ = other.unitId_;
            name_ = other.name_;
            available_ = other.available_;
            cargoSize_ = other.cargoSize_;
            mineralCost_ = other.mineralCost_;
            vespeneCost_ = other.vespeneCost_;
            foodRequired_ = other.foodRequired_;
            foodProvided_ = other.foodProvided_;
            abilityId_ = other.abilityId_;
            race_ = other.race_;
            buildTime_ = other.buildTime_;
            hasVespene_ = other.hasVespene_;
            hasMinerals_ = other.hasMinerals_;
            sightRange_ = other.sightRange_;
            techAlias_ = other.techAlias_.Clone();
            unitAlias_ = other.unitAlias_;
            techRequirement_ = other.techRequirement_;
            requireAttached_ = other.requireAttached_;
            attributes_ = other.attributes_.Clone();
            movementSpeed_ = other.movementSpeed_;
            armor_ = other.armor_;
            weapons_ = other.weapons_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UnitTypeData Clone()
        {
            return new UnitTypeData(this);
        }

        /// <summary>Field number for the "unit_id" field.</summary>
        public const int UnitIdFieldNumber = 1;
        private readonly static uint UnitIdDefaultValue = 0;

        private uint unitId_;
        /// <summary>
        /// Stable ID.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint UnitId
        {
            get { if ((_hasBits0 & 1) != 0) { return unitId_; } else { return UnitIdDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                unitId_ = value;
            }
        }
        /// <summary>Gets whether the "unit_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnitId
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "unit_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnitId()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private readonly static string NameDefaultValue = "";

        private string name_;
        /// <summary>
        /// Catalog name of the unit.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name
        {
            get { return name_ ?? NameDefaultValue; }
            set
            {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasName
        {
            get { return name_ != null; }
        }
        /// <summary>Clears the value of the "name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearName()
        {
            name_ = null;
        }

        /// <summary>Field number for the "available" field.</summary>
        public const int AvailableFieldNumber = 3;
        private readonly static bool AvailableDefaultValue = false;

        private bool available_;
        /// <summary>
        /// If true, the ability may be used by this set of mods/map.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Available
        {
            get { if ((_hasBits0 & 2) != 0) { return available_; } else { return AvailableDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                available_ = value;
            }
        }
        /// <summary>Gets whether the "available" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAvailable
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "available" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAvailable()
        {
            _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "cargo_size" field.</summary>
        public const int CargoSizeFieldNumber = 4;
        private readonly static uint CargoSizeDefaultValue = 0;

        private uint cargoSize_;
        /// <summary>
        /// Number of cargo slots it occupies in transports.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CargoSize
        {
            get { if ((_hasBits0 & 4) != 0) { return cargoSize_; } else { return CargoSizeDefaultValue; } }
            set
            {
                _hasBits0 |= 4;
                cargoSize_ = value;
            }
        }
        /// <summary>Gets whether the "cargo_size" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCargoSize
        {
            get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "cargo_size" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCargoSize()
        {
            _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "mineral_cost" field.</summary>
        public const int MineralCostFieldNumber = 12;
        private readonly static uint MineralCostDefaultValue = 0;

        private uint mineralCost_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MineralCost
        {
            get { if ((_hasBits0 & 32) != 0) { return mineralCost_; } else { return MineralCostDefaultValue; } }
            set
            {
                _hasBits0 |= 32;
                mineralCost_ = value;
            }
        }
        /// <summary>Gets whether the "mineral_cost" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMineralCost
        {
            get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "mineral_cost" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMineralCost()
        {
            _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "vespene_cost" field.</summary>
        public const int VespeneCostFieldNumber = 13;
        private readonly static uint VespeneCostDefaultValue = 0;

        private uint vespeneCost_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint VespeneCost
        {
            get { if ((_hasBits0 & 64) != 0) { return vespeneCost_; } else { return VespeneCostDefaultValue; } }
            set
            {
                _hasBits0 |= 64;
                vespeneCost_ = value;
            }
        }
        /// <summary>Gets whether the "vespene_cost" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasVespeneCost
        {
            get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "vespene_cost" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearVespeneCost()
        {
            _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "food_required" field.</summary>
        public const int FoodRequiredFieldNumber = 14;
        private readonly static float FoodRequiredDefaultValue = 0F;

        private float foodRequired_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float FoodRequired
        {
            get { if ((_hasBits0 & 128) != 0) { return foodRequired_; } else { return FoodRequiredDefaultValue; } }
            set
            {
                _hasBits0 |= 128;
                foodRequired_ = value;
            }
        }
        /// <summary>Gets whether the "food_required" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasFoodRequired
        {
            get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "food_required" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFoodRequired()
        {
            _hasBits0 &= ~128;
        }

        /// <summary>Field number for the "food_provided" field.</summary>
        public const int FoodProvidedFieldNumber = 18;
        private readonly static float FoodProvidedDefaultValue = 0F;

        private float foodProvided_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float FoodProvided
        {
            get { if ((_hasBits0 & 2048) != 0) { return foodProvided_; } else { return FoodProvidedDefaultValue; } }
            set
            {
                _hasBits0 |= 2048;
                foodProvided_ = value;
            }
        }
        /// <summary>Gets whether the "food_provided" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasFoodProvided
        {
            get { return (_hasBits0 & 2048) != 0; }
        }
        /// <summary>Clears the value of the "food_provided" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFoodProvided()
        {
            _hasBits0 &= ~2048;
        }

        /// <summary>Field number for the "ability_id" field.</summary>
        public const int AbilityIdFieldNumber = 15;
        private readonly static uint AbilityIdDefaultValue = 0;

        private uint abilityId_;
        /// <summary>
        /// The ability that builds this unit.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AbilityId
        {
            get { if ((_hasBits0 & 256) != 0) { return abilityId_; } else { return AbilityIdDefaultValue; } }
            set
            {
                _hasBits0 |= 256;
                abilityId_ = value;
            }
        }
        /// <summary>Gets whether the "ability_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAbilityId
        {
            get { return (_hasBits0 & 256) != 0; }
        }
        /// <summary>Clears the value of the "ability_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAbilityId()
        {
            _hasBits0 &= ~256;
        }

        /// <summary>Field number for the "race" field.</summary>
        public const int RaceFieldNumber = 16;
        private readonly static global::SC2APIProtocol.Race RaceDefaultValue = global::SC2APIProtocol.Race.NoRace;

        private global::SC2APIProtocol.Race race_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.Race Race
        {
            get { if ((_hasBits0 & 512) != 0) { return race_; } else { return RaceDefaultValue; } }
            set
            {
                _hasBits0 |= 512;
                race_ = value;
            }
        }
        /// <summary>Gets whether the "race" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRace
        {
            get { return (_hasBits0 & 512) != 0; }
        }
        /// <summary>Clears the value of the "race" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRace()
        {
            _hasBits0 &= ~512;
        }

        /// <summary>Field number for the "build_time" field.</summary>
        public const int BuildTimeFieldNumber = 17;
        private readonly static float BuildTimeDefaultValue = 0F;

        private float buildTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float BuildTime
        {
            get { if ((_hasBits0 & 1024) != 0) { return buildTime_; } else { return BuildTimeDefaultValue; } }
            set
            {
                _hasBits0 |= 1024;
                buildTime_ = value;
            }
        }
        /// <summary>Gets whether the "build_time" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBuildTime
        {
            get { return (_hasBits0 & 1024) != 0; }
        }
        /// <summary>Clears the value of the "build_time" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBuildTime()
        {
            _hasBits0 &= ~1024;
        }

        /// <summary>Field number for the "has_vespene" field.</summary>
        public const int HasVespeneFieldNumber = 19;
        private readonly static bool HasVespeneDefaultValue = false;

        private bool hasVespene_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasVespene
        {
            get { if ((_hasBits0 & 4096) != 0) { return hasVespene_; } else { return HasVespeneDefaultValue; } }
            set
            {
                _hasBits0 |= 4096;
                hasVespene_ = value;
            }
        }
        /// <summary>Gets whether the "has_vespene" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHasVespene
        {
            get { return (_hasBits0 & 4096) != 0; }
        }
        /// <summary>Clears the value of the "has_vespene" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHasVespene()
        {
            _hasBits0 &= ~4096;
        }

        /// <summary>Field number for the "has_minerals" field.</summary>
        public const int HasMineralsFieldNumber = 20;
        private readonly static bool HasMineralsDefaultValue = false;

        private bool hasMinerals_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMinerals
        {
            get { if ((_hasBits0 & 8192) != 0) { return hasMinerals_; } else { return HasMineralsDefaultValue; } }
            set
            {
                _hasBits0 |= 8192;
                hasMinerals_ = value;
            }
        }
        /// <summary>Gets whether the "has_minerals" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHasMinerals
        {
            get { return (_hasBits0 & 8192) != 0; }
        }
        /// <summary>Clears the value of the "has_minerals" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHasMinerals()
        {
            _hasBits0 &= ~8192;
        }

        /// <summary>Field number for the "sight_range" field.</summary>
        public const int SightRangeFieldNumber = 25;
        private readonly static float SightRangeDefaultValue = 0F;

        private float sightRange_;
        /// <summary>
        /// Range unit reveals vision.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float SightRange
        {
            get { if ((_hasBits0 & 131072) != 0) { return sightRange_; } else { return SightRangeDefaultValue; } }
            set
            {
                _hasBits0 |= 131072;
                sightRange_ = value;
            }
        }
        /// <summary>Gets whether the "sight_range" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSightRange
        {
            get { return (_hasBits0 & 131072) != 0; }
        }
        /// <summary>Clears the value of the "sight_range" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSightRange()
        {
            _hasBits0 &= ~131072;
        }

        /// <summary>Field number for the "tech_alias" field.</summary>
        public const int TechAliasFieldNumber = 21;
        private static readonly pb::FieldCodec<uint> _repeated_techAlias_codec
            = pb::FieldCodec.ForUInt32(168);
        private readonly pbc::RepeatedField<uint> techAlias_ = new pbc::RepeatedField<uint>();
        /// <summary>
        /// Other units that satisfy the same tech requirement.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> TechAlias
        {
            get { return techAlias_; }
        }

        /// <summary>Field number for the "unit_alias" field.</summary>
        public const int UnitAliasFieldNumber = 22;
        private readonly static uint UnitAliasDefaultValue = 0;

        private uint unitAlias_;
        /// <summary>
        /// The morphed variant of this unit.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint UnitAlias
        {
            get { if ((_hasBits0 & 16384) != 0) { return unitAlias_; } else { return UnitAliasDefaultValue; } }
            set
            {
                _hasBits0 |= 16384;
                unitAlias_ = value;
            }
        }
        /// <summary>Gets whether the "unit_alias" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnitAlias
        {
            get { return (_hasBits0 & 16384) != 0; }
        }
        /// <summary>Clears the value of the "unit_alias" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnitAlias()
        {
            _hasBits0 &= ~16384;
        }

        /// <summary>Field number for the "tech_requirement" field.</summary>
        public const int TechRequirementFieldNumber = 23;
        private readonly static uint TechRequirementDefaultValue = 0;

        private uint techRequirement_;
        /// <summary>
        /// Structure required to build this unit. (Or any with the same tech_alias)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TechRequirement
        {
            get { if ((_hasBits0 & 32768) != 0) { return techRequirement_; } else { return TechRequirementDefaultValue; } }
            set
            {
                _hasBits0 |= 32768;
                techRequirement_ = value;
            }
        }
        /// <summary>Gets whether the "tech_requirement" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTechRequirement
        {
            get { return (_hasBits0 & 32768) != 0; }
        }
        /// <summary>Clears the value of the "tech_requirement" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTechRequirement()
        {
            _hasBits0 &= ~32768;
        }

        /// <summary>Field number for the "require_attached" field.</summary>
        public const int RequireAttachedFieldNumber = 24;
        private readonly static bool RequireAttachedDefaultValue = false;

        private bool requireAttached_;
        /// <summary>
        /// Whether tech_requirement is an add-on.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool RequireAttached
        {
            get { if ((_hasBits0 & 65536) != 0) { return requireAttached_; } else { return RequireAttachedDefaultValue; } }
            set
            {
                _hasBits0 |= 65536;
                requireAttached_ = value;
            }
        }
        /// <summary>Gets whether the "require_attached" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRequireAttached
        {
            get { return (_hasBits0 & 65536) != 0; }
        }
        /// <summary>Clears the value of the "require_attached" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRequireAttached()
        {
            _hasBits0 &= ~65536;
        }

        /// <summary>Field number for the "attributes" field.</summary>
        public const int AttributesFieldNumber = 8;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.Attribute> _repeated_attributes_codec
            = pb::FieldCodec.ForEnum(64, x => (int)x, x => (global::SC2APIProtocol.Attribute)x);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.Attribute> attributes_ = new pbc::RepeatedField<global::SC2APIProtocol.Attribute>();
        /// <summary>
        /// Values include changes from upgrades
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.Attribute> Attributes
        {
            get { return attributes_; }
        }

        /// <summary>Field number for the "movement_speed" field.</summary>
        public const int MovementSpeedFieldNumber = 9;
        private readonly static float MovementSpeedDefaultValue = 0F;

        private float movementSpeed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float MovementSpeed
        {
            get { if ((_hasBits0 & 8) != 0) { return movementSpeed_; } else { return MovementSpeedDefaultValue; } }
            set
            {
                _hasBits0 |= 8;
                movementSpeed_ = value;
            }
        }
        /// <summary>Gets whether the "movement_speed" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMovementSpeed
        {
            get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "movement_speed" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMovementSpeed()
        {
            _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "armor" field.</summary>
        public const int ArmorFieldNumber = 10;
        private readonly static float ArmorDefaultValue = 0F;

        private float armor_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Armor
        {
            get { if ((_hasBits0 & 16) != 0) { return armor_; } else { return ArmorDefaultValue; } }
            set
            {
                _hasBits0 |= 16;
                armor_ = value;
            }
        }
        /// <summary>Gets whether the "armor" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasArmor
        {
            get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "armor" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearArmor()
        {
            _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "weapons" field.</summary>
        public const int WeaponsFieldNumber = 11;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.Weapon> _repeated_weapons_codec
            = pb::FieldCodec.ForMessage(90, global::SC2APIProtocol.Weapon.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.Weapon> weapons_ = new pbc::RepeatedField<global::SC2APIProtocol.Weapon>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.Weapon> Weapons
        {
            get { return weapons_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as UnitTypeData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UnitTypeData other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UnitId != other.UnitId) return false;
            if (Name != other.Name) return false;
            if (Available != other.Available) return false;
            if (CargoSize != other.CargoSize) return false;
            if (MineralCost != other.MineralCost) return false;
            if (VespeneCost != other.VespeneCost) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FoodRequired, other.FoodRequired)) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FoodProvided, other.FoodProvided)) return false;
            if (AbilityId != other.AbilityId) return false;
            if (Race != other.Race) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BuildTime, other.BuildTime)) return false;
            if (HasVespene != other.HasVespene) return false;
            if (HasMinerals != other.HasMinerals) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SightRange, other.SightRange)) return false;
            if (!techAlias_.Equals(other.techAlias_)) return false;
            if (UnitAlias != other.UnitAlias) return false;
            if (TechRequirement != other.TechRequirement) return false;
            if (RequireAttached != other.RequireAttached) return false;
            if (!attributes_.Equals(other.attributes_)) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MovementSpeed, other.MovementSpeed)) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Armor, other.Armor)) return false;
            if (!weapons_.Equals(other.weapons_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasUnitId) hash ^= UnitId.GetHashCode();
            if (HasName) hash ^= Name.GetHashCode();
            if (HasAvailable) hash ^= Available.GetHashCode();
            if (HasCargoSize) hash ^= CargoSize.GetHashCode();
            if (HasMineralCost) hash ^= MineralCost.GetHashCode();
            if (HasVespeneCost) hash ^= VespeneCost.GetHashCode();
            if (HasFoodRequired) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FoodRequired);
            if (HasFoodProvided) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FoodProvided);
            if (HasAbilityId) hash ^= AbilityId.GetHashCode();
            if (HasRace) hash ^= Race.GetHashCode();
            if (HasBuildTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BuildTime);
            if (HasHasVespene) hash ^= HasVespene.GetHashCode();
            if (HasHasMinerals) hash ^= HasMinerals.GetHashCode();
            if (HasSightRange) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SightRange);
            hash ^= techAlias_.GetHashCode();
            if (HasUnitAlias) hash ^= UnitAlias.GetHashCode();
            if (HasTechRequirement) hash ^= TechRequirement.GetHashCode();
            if (HasRequireAttached) hash ^= RequireAttached.GetHashCode();
            hash ^= attributes_.GetHashCode();
            if (HasMovementSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MovementSpeed);
            if (HasArmor) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Armor);
            hash ^= weapons_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasUnitId)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(UnitId);
            }
            if (HasName)
            {
                output.WriteRawTag(18);
                output.WriteString(Name);
            }
            if (HasAvailable)
            {
                output.WriteRawTag(24);
                output.WriteBool(Available);
            }
            if (HasCargoSize)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(CargoSize);
            }
            attributes_.WriteTo(output, _repeated_attributes_codec);
            if (HasMovementSpeed)
            {
                output.WriteRawTag(77);
                output.WriteFloat(MovementSpeed);
            }
            if (HasArmor)
            {
                output.WriteRawTag(85);
                output.WriteFloat(Armor);
            }
            weapons_.WriteTo(output, _repeated_weapons_codec);
            if (HasMineralCost)
            {
                output.WriteRawTag(96);
                output.WriteUInt32(MineralCost);
            }
            if (HasVespeneCost)
            {
                output.WriteRawTag(104);
                output.WriteUInt32(VespeneCost);
            }
            if (HasFoodRequired)
            {
                output.WriteRawTag(117);
                output.WriteFloat(FoodRequired);
            }
            if (HasAbilityId)
            {
                output.WriteRawTag(120);
                output.WriteUInt32(AbilityId);
            }
            if (HasRace)
            {
                output.WriteRawTag(128, 1);
                output.WriteEnum((int)Race);
            }
            if (HasBuildTime)
            {
                output.WriteRawTag(141, 1);
                output.WriteFloat(BuildTime);
            }
            if (HasFoodProvided)
            {
                output.WriteRawTag(149, 1);
                output.WriteFloat(FoodProvided);
            }
            if (HasHasVespene)
            {
                output.WriteRawTag(152, 1);
                output.WriteBool(HasVespene);
            }
            if (HasHasMinerals)
            {
                output.WriteRawTag(160, 1);
                output.WriteBool(HasMinerals);
            }
            techAlias_.WriteTo(output, _repeated_techAlias_codec);
            if (HasUnitAlias)
            {
                output.WriteRawTag(176, 1);
                output.WriteUInt32(UnitAlias);
            }
            if (HasTechRequirement)
            {
                output.WriteRawTag(184, 1);
                output.WriteUInt32(TechRequirement);
            }
            if (HasRequireAttached)
            {
                output.WriteRawTag(192, 1);
                output.WriteBool(RequireAttached);
            }
            if (HasSightRange)
            {
                output.WriteRawTag(205, 1);
                output.WriteFloat(SightRange);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasUnitId)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnitId);
            }
            if (HasName)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (HasAvailable)
            {
                size += 1 + 1;
            }
            if (HasCargoSize)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CargoSize);
            }
            if (HasMineralCost)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MineralCost);
            }
            if (HasVespeneCost)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VespeneCost);
            }
            if (HasFoodRequired)
            {
                size += 1 + 4;
            }
            if (HasFoodProvided)
            {
                size += 2 + 4;
            }
            if (HasAbilityId)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AbilityId);
            }
            if (HasRace)
            {
                size += 2 + pb::CodedOutputStream.ComputeEnumSize((int)Race);
            }
            if (HasBuildTime)
            {
                size += 2 + 4;
            }
            if (HasHasVespene)
            {
                size += 2 + 1;
            }
            if (HasHasMinerals)
            {
                size += 2 + 1;
            }
            if (HasSightRange)
            {
                size += 2 + 4;
            }
            size += techAlias_.CalculateSize(_repeated_techAlias_codec);
            if (HasUnitAlias)
            {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UnitAlias);
            }
            if (HasTechRequirement)
            {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TechRequirement);
            }
            if (HasRequireAttached)
            {
                size += 2 + 1;
            }
            size += attributes_.CalculateSize(_repeated_attributes_codec);
            if (HasMovementSpeed)
            {
                size += 1 + 4;
            }
            if (HasArmor)
            {
                size += 1 + 4;
            }
            size += weapons_.CalculateSize(_repeated_weapons_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UnitTypeData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasUnitId)
            {
                UnitId = other.UnitId;
            }
            if (other.HasName)
            {
                Name = other.Name;
            }
            if (other.HasAvailable)
            {
                Available = other.Available;
            }
            if (other.HasCargoSize)
            {
                CargoSize = other.CargoSize;
            }
            if (other.HasMineralCost)
            {
                MineralCost = other.MineralCost;
            }
            if (other.HasVespeneCost)
            {
                VespeneCost = other.VespeneCost;
            }
            if (other.HasFoodRequired)
            {
                FoodRequired = other.FoodRequired;
            }
            if (other.HasFoodProvided)
            {
                FoodProvided = other.FoodProvided;
            }
            if (other.HasAbilityId)
            {
                AbilityId = other.AbilityId;
            }
            if (other.HasRace)
            {
                Race = other.Race;
            }
            if (other.HasBuildTime)
            {
                BuildTime = other.BuildTime;
            }
            if (other.HasHasVespene)
            {
                HasVespene = other.HasVespene;
            }
            if (other.HasHasMinerals)
            {
                HasMinerals = other.HasMinerals;
            }
            if (other.HasSightRange)
            {
                SightRange = other.SightRange;
            }
            techAlias_.Add(other.techAlias_);
            if (other.HasUnitAlias)
            {
                UnitAlias = other.UnitAlias;
            }
            if (other.HasTechRequirement)
            {
                TechRequirement = other.TechRequirement;
            }
            if (other.HasRequireAttached)
            {
                RequireAttached = other.RequireAttached;
            }
            attributes_.Add(other.attributes_);
            if (other.HasMovementSpeed)
            {
                MovementSpeed = other.MovementSpeed;
            }
            if (other.HasArmor)
            {
                Armor = other.Armor;
            }
            weapons_.Add(other.weapons_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            UnitId = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            Name = input.ReadString();
                            break;
                        }
                    case 24:
                        {
                            Available = input.ReadBool();
                            break;
                        }
                    case 32:
                        {
                            CargoSize = input.ReadUInt32();
                            break;
                        }
                    case 66:
                    case 64:
                        {
                            attributes_.AddEntriesFrom(input, _repeated_attributes_codec);
                            break;
                        }
                    case 77:
                        {
                            MovementSpeed = input.ReadFloat();
                            break;
                        }
                    case 85:
                        {
                            Armor = input.ReadFloat();
                            break;
                        }
                    case 90:
                        {
                            weapons_.AddEntriesFrom(input, _repeated_weapons_codec);
                            break;
                        }
                    case 96:
                        {
                            MineralCost = input.ReadUInt32();
                            break;
                        }
                    case 104:
                        {
                            VespeneCost = input.ReadUInt32();
                            break;
                        }
                    case 117:
                        {
                            FoodRequired = input.ReadFloat();
                            break;
                        }
                    case 120:
                        {
                            AbilityId = input.ReadUInt32();
                            break;
                        }
                    case 128:
                        {
                            Race = (global::SC2APIProtocol.Race)input.ReadEnum();
                            break;
                        }
                    case 141:
                        {
                            BuildTime = input.ReadFloat();
                            break;
                        }
                    case 149:
                        {
                            FoodProvided = input.ReadFloat();
                            break;
                        }
                    case 152:
                        {
                            HasVespene = input.ReadBool();
                            break;
                        }
                    case 160:
                        {
                            HasMinerals = input.ReadBool();
                            break;
                        }
                    case 170:
                    case 168:
                        {
                            techAlias_.AddEntriesFrom(input, _repeated_techAlias_codec);
                            break;
                        }
                    case 176:
                        {
                            UnitAlias = input.ReadUInt32();
                            break;
                        }
                    case 184:
                        {
                            TechRequirement = input.ReadUInt32();
                            break;
                        }
                    case 192:
                        {
                            RequireAttached = input.ReadBool();
                            break;
                        }
                    case 205:
                        {
                            SightRange = input.ReadFloat();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class UpgradeData : pb::IMessage<UpgradeData>
    {
        private static readonly pb::MessageParser<UpgradeData> _parser = new pb::MessageParser<UpgradeData>(() => new UpgradeData());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UpgradeData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.DataReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpgradeData()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpgradeData(UpgradeData other) : this()
        {
            _hasBits0 = other._hasBits0;
            upgradeId_ = other.upgradeId_;
            name_ = other.name_;
            mineralCost_ = other.mineralCost_;
            vespeneCost_ = other.vespeneCost_;
            researchTime_ = other.researchTime_;
            abilityId_ = other.abilityId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpgradeData Clone()
        {
            return new UpgradeData(this);
        }

        /// <summary>Field number for the "upgrade_id" field.</summary>
        public const int UpgradeIdFieldNumber = 1;
        private readonly static uint UpgradeIdDefaultValue = 0;

        private uint upgradeId_;
        /// <summary>
        /// Stable ID.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint UpgradeId
        {
            get { if ((_hasBits0 & 1) != 0) { return upgradeId_; } else { return UpgradeIdDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                upgradeId_ = value;
            }
        }
        /// <summary>Gets whether the "upgrade_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUpgradeId
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "upgrade_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUpgradeId()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private readonly static string NameDefaultValue = "";

        private string name_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name
        {
            get { return name_ ?? NameDefaultValue; }
            set
            {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasName
        {
            get { return name_ != null; }
        }
        /// <summary>Clears the value of the "name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearName()
        {
            name_ = null;
        }

        /// <summary>Field number for the "mineral_cost" field.</summary>
        public const int MineralCostFieldNumber = 3;
        private readonly static uint MineralCostDefaultValue = 0;

        private uint mineralCost_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MineralCost
        {
            get { if ((_hasBits0 & 2) != 0) { return mineralCost_; } else { return MineralCostDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                mineralCost_ = value;
            }
        }
        /// <summary>Gets whether the "mineral_cost" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMineralCost
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "mineral_cost" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMineralCost()
        {
            _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "vespene_cost" field.</summary>
        public const int VespeneCostFieldNumber = 4;
        private readonly static uint VespeneCostDefaultValue = 0;

        private uint vespeneCost_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint VespeneCost
        {
            get { if ((_hasBits0 & 4) != 0) { return vespeneCost_; } else { return VespeneCostDefaultValue; } }
            set
            {
                _hasBits0 |= 4;
                vespeneCost_ = value;
            }
        }
        /// <summary>Gets whether the "vespene_cost" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasVespeneCost
        {
            get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "vespene_cost" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearVespeneCost()
        {
            _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "research_time" field.</summary>
        public const int ResearchTimeFieldNumber = 5;
        private readonly static float ResearchTimeDefaultValue = 0F;

        private float researchTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ResearchTime
        {
            get { if ((_hasBits0 & 8) != 0) { return researchTime_; } else { return ResearchTimeDefaultValue; } }
            set
            {
                _hasBits0 |= 8;
                researchTime_ = value;
            }
        }
        /// <summary>Gets whether the "research_time" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasResearchTime
        {
            get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "research_time" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearResearchTime()
        {
            _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "ability_id" field.</summary>
        public const int AbilityIdFieldNumber = 6;
        private readonly static uint AbilityIdDefaultValue = 0;

        private uint abilityId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AbilityId
        {
            get { if ((_hasBits0 & 16) != 0) { return abilityId_; } else { return AbilityIdDefaultValue; } }
            set
            {
                _hasBits0 |= 16;
                abilityId_ = value;
            }
        }
        /// <summary>Gets whether the "ability_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAbilityId
        {
            get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "ability_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAbilityId()
        {
            _hasBits0 &= ~16;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as UpgradeData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UpgradeData other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UpgradeId != other.UpgradeId) return false;
            if (Name != other.Name) return false;
            if (MineralCost != other.MineralCost) return false;
            if (VespeneCost != other.VespeneCost) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ResearchTime, other.ResearchTime)) return false;
            if (AbilityId != other.AbilityId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasUpgradeId) hash ^= UpgradeId.GetHashCode();
            if (HasName) hash ^= Name.GetHashCode();
            if (HasMineralCost) hash ^= MineralCost.GetHashCode();
            if (HasVespeneCost) hash ^= VespeneCost.GetHashCode();
            if (HasResearchTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ResearchTime);
            if (HasAbilityId) hash ^= AbilityId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasUpgradeId)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(UpgradeId);
            }
            if (HasName)
            {
                output.WriteRawTag(18);
                output.WriteString(Name);
            }
            if (HasMineralCost)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(MineralCost);
            }
            if (HasVespeneCost)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(VespeneCost);
            }
            if (HasResearchTime)
            {
                output.WriteRawTag(45);
                output.WriteFloat(ResearchTime);
            }
            if (HasAbilityId)
            {
                output.WriteRawTag(48);
                output.WriteUInt32(AbilityId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasUpgradeId)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UpgradeId);
            }
            if (HasName)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (HasMineralCost)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MineralCost);
            }
            if (HasVespeneCost)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VespeneCost);
            }
            if (HasResearchTime)
            {
                size += 1 + 4;
            }
            if (HasAbilityId)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AbilityId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UpgradeData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasUpgradeId)
            {
                UpgradeId = other.UpgradeId;
            }
            if (other.HasName)
            {
                Name = other.Name;
            }
            if (other.HasMineralCost)
            {
                MineralCost = other.MineralCost;
            }
            if (other.HasVespeneCost)
            {
                VespeneCost = other.VespeneCost;
            }
            if (other.HasResearchTime)
            {
                ResearchTime = other.ResearchTime;
            }
            if (other.HasAbilityId)
            {
                AbilityId = other.AbilityId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            UpgradeId = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            Name = input.ReadString();
                            break;
                        }
                    case 24:
                        {
                            MineralCost = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            VespeneCost = input.ReadUInt32();
                            break;
                        }
                    case 45:
                        {
                            ResearchTime = input.ReadFloat();
                            break;
                        }
                    case 48:
                        {
                            AbilityId = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class BuffData : pb::IMessage<BuffData>
    {
        private static readonly pb::MessageParser<BuffData> _parser = new pb::MessageParser<BuffData>(() => new BuffData());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BuffData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.DataReflection.Descriptor.MessageTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BuffData()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BuffData(BuffData other) : this()
        {
            _hasBits0 = other._hasBits0;
            buffId_ = other.buffId_;
            name_ = other.name_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BuffData Clone()
        {
            return new BuffData(this);
        }

        /// <summary>Field number for the "buff_id" field.</summary>
        public const int BuffIdFieldNumber = 1;
        private readonly static uint BuffIdDefaultValue = 0;

        private uint buffId_;
        /// <summary>
        /// Stable ID.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BuffId
        {
            get { if ((_hasBits0 & 1) != 0) { return buffId_; } else { return BuffIdDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                buffId_ = value;
            }
        }
        /// <summary>Gets whether the "buff_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBuffId
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "buff_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBuffId()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private readonly static string NameDefaultValue = "";

        private string name_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name
        {
            get { return name_ ?? NameDefaultValue; }
            set
            {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasName
        {
            get { return name_ != null; }
        }
        /// <summary>Clears the value of the "name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearName()
        {
            name_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as BuffData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BuffData other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (BuffId != other.BuffId) return false;
            if (Name != other.Name) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasBuffId) hash ^= BuffId.GetHashCode();
            if (HasName) hash ^= Name.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasBuffId)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(BuffId);
            }
            if (HasName)
            {
                output.WriteRawTag(18);
                output.WriteString(Name);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasBuffId)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuffId);
            }
            if (HasName)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BuffData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasBuffId)
            {
                BuffId = other.BuffId;
            }
            if (other.HasName)
            {
                Name = other.Name;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            BuffId = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            Name = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class EffectData : pb::IMessage<EffectData>
    {
        private static readonly pb::MessageParser<EffectData> _parser = new pb::MessageParser<EffectData>(() => new EffectData());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EffectData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.DataReflection.Descriptor.MessageTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EffectData()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EffectData(EffectData other) : this()
        {
            _hasBits0 = other._hasBits0;
            effectId_ = other.effectId_;
            name_ = other.name_;
            friendlyName_ = other.friendlyName_;
            radius_ = other.radius_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EffectData Clone()
        {
            return new EffectData(this);
        }

        /// <summary>Field number for the "effect_id" field.</summary>
        public const int EffectIdFieldNumber = 1;
        private readonly static uint EffectIdDefaultValue = 0;

        private uint effectId_;
        /// <summary>
        /// Stable ID.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint EffectId
        {
            get { if ((_hasBits0 & 1) != 0) { return effectId_; } else { return EffectIdDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                effectId_ = value;
            }
        }
        /// <summary>Gets whether the "effect_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasEffectId
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "effect_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearEffectId()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private readonly static string NameDefaultValue = "";

        private string name_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name
        {
            get { return name_ ?? NameDefaultValue; }
            set
            {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasName
        {
            get { return name_ != null; }
        }
        /// <summary>Clears the value of the "name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearName()
        {
            name_ = null;
        }

        /// <summary>Field number for the "friendly_name" field.</summary>
        public const int FriendlyNameFieldNumber = 3;
        private readonly static string FriendlyNameDefaultValue = "";

        private string friendlyName_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FriendlyName
        {
            get { return friendlyName_ ?? FriendlyNameDefaultValue; }
            set
            {
                friendlyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "friendly_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasFriendlyName
        {
            get { return friendlyName_ != null; }
        }
        /// <summary>Clears the value of the "friendly_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFriendlyName()
        {
            friendlyName_ = null;
        }

        /// <summary>Field number for the "radius" field.</summary>
        public const int RadiusFieldNumber = 4;
        private readonly static float RadiusDefaultValue = 0F;

        private float radius_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Radius
        {
            get { if ((_hasBits0 & 2) != 0) { return radius_; } else { return RadiusDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                radius_ = value;
            }
        }
        /// <summary>Gets whether the "radius" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRadius
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "radius" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRadius()
        {
            _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as EffectData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EffectData other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (EffectId != other.EffectId) return false;
            if (Name != other.Name) return false;
            if (FriendlyName != other.FriendlyName) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Radius, other.Radius)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasEffectId) hash ^= EffectId.GetHashCode();
            if (HasName) hash ^= Name.GetHashCode();
            if (HasFriendlyName) hash ^= FriendlyName.GetHashCode();
            if (HasRadius) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Radius);
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasEffectId)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(EffectId);
            }
            if (HasName)
            {
                output.WriteRawTag(18);
                output.WriteString(Name);
            }
            if (HasFriendlyName)
            {
                output.WriteRawTag(26);
                output.WriteString(FriendlyName);
            }
            if (HasRadius)
            {
                output.WriteRawTag(37);
                output.WriteFloat(Radius);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasEffectId)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EffectId);
            }
            if (HasName)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (HasFriendlyName)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(FriendlyName);
            }
            if (HasRadius)
            {
                size += 1 + 4;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EffectData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasEffectId)
            {
                EffectId = other.EffectId;
            }
            if (other.HasName)
            {
                Name = other.Name;
            }
            if (other.HasFriendlyName)
            {
                FriendlyName = other.FriendlyName;
            }
            if (other.HasRadius)
            {
                Radius = other.Radius;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            EffectId = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            Name = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            FriendlyName = input.ReadString();
                            break;
                        }
                    case 37:
                        {
                            Radius = input.ReadFloat();
                            break;
                        }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code
