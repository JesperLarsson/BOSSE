// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: s2clientprotocol/common.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;

namespace SC2APIProtocol
{
    /// <summary>Holder for reflection information generated from s2clientprotocol/common.proto</summary>
    public static partial class CommonReflection
    {

        #region Descriptor
        /// <summary>File descriptor for s2clientprotocol/common.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static CommonReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "Ch1zMmNsaWVudHByb3RvY29sL2NvbW1vbi5wcm90bxIOU0MyQVBJUHJvdG9j",
                  "b2wiPgoQQXZhaWxhYmxlQWJpbGl0eRISCgphYmlsaXR5X2lkGAEgASgFEhYK",
                  "DnJlcXVpcmVzX3BvaW50GAIgASgIIlgKCUltYWdlRGF0YRIWCg5iaXRzX3Bl",
                  "cl9waXhlbBgBIAEoBRIlCgRzaXplGAIgASgLMhcuU0MyQVBJUHJvdG9jb2wu",
                  "U2l6ZTJESRIMCgRkYXRhGAMgASgMIh4KBlBvaW50SRIJCgF4GAEgASgFEgkK",
                  "AXkYAiABKAUiVAoKUmVjdGFuZ2xlSRIiCgJwMBgBIAEoCzIWLlNDMkFQSVBy",
                  "b3RvY29sLlBvaW50SRIiCgJwMRgCIAEoCzIWLlNDMkFQSVByb3RvY29sLlBv",
                  "aW50SSIfCgdQb2ludDJEEgkKAXgYASABKAISCQoBeRgCIAEoAiIoCgVQb2lu",
                  "dBIJCgF4GAEgASgCEgkKAXkYAiABKAISCQoBehgDIAEoAiIfCgdTaXplMkRJ",
                  "EgkKAXgYASABKAUSCQoBeRgCIAEoBSpBCgRSYWNlEgoKBk5vUmFjZRAAEgoK",
                  "BlRlcnJhbhABEggKBFplcmcQAhILCgdQcm90b3NzEAMSCgoGUmFuZG9tEAQ="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(new[] { typeof(global::SC2APIProtocol.Race), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.AvailableAbility), global::SC2APIProtocol.AvailableAbility.Parser, new[]{ "AbilityId", "RequiresPoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ImageData), global::SC2APIProtocol.ImageData.Parser, new[]{ "BitsPerPixel", "Size", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.PointI), global::SC2APIProtocol.PointI.Parser, new[]{ "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.RectangleI), global::SC2APIProtocol.RectangleI.Parser, new[]{ "P0", "P1" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.Point2D), global::SC2APIProtocol.Point2D.Parser, new[]{ "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.Point), global::SC2APIProtocol.Point.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.Size2DI), global::SC2APIProtocol.Size2DI.Parser, new[]{ "X", "Y" }, null, null, null, null)
                }));
        }
        #endregion

    }
    #region Enums
    public enum Race
    {
        [pbr::OriginalName("NoRace")] NoRace = 0,
        [pbr::OriginalName("Terran")] Terran = 1,
        [pbr::OriginalName("Zerg")] Zerg = 2,
        [pbr::OriginalName("Protoss")] Protoss = 3,
        [pbr::OriginalName("Random")] Random = 4,
    }

    #endregion

    #region Messages
    public sealed partial class AvailableAbility : pb::IMessage<AvailableAbility>
    {
        private static readonly pb::MessageParser<AvailableAbility> _parser = new pb::MessageParser<AvailableAbility>(() => new AvailableAbility());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AvailableAbility> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.CommonReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AvailableAbility()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AvailableAbility(AvailableAbility other) : this()
        {
            _hasBits0 = other._hasBits0;
            abilityId_ = other.abilityId_;
            requiresPoint_ = other.requiresPoint_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AvailableAbility Clone()
        {
            return new AvailableAbility(this);
        }

        /// <summary>Field number for the "ability_id" field.</summary>
        public const int AbilityIdFieldNumber = 1;
        private readonly static int AbilityIdDefaultValue = 0;

        private int abilityId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AbilityId
        {
            get { if ((_hasBits0 & 1) != 0) { return abilityId_; } else { return AbilityIdDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                abilityId_ = value;
            }
        }
        /// <summary>Gets whether the "ability_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAbilityId
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "ability_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAbilityId()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "requires_point" field.</summary>
        public const int RequiresPointFieldNumber = 2;
        private readonly static bool RequiresPointDefaultValue = false;

        private bool requiresPoint_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool RequiresPoint
        {
            get { if ((_hasBits0 & 2) != 0) { return requiresPoint_; } else { return RequiresPointDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                requiresPoint_ = value;
            }
        }
        /// <summary>Gets whether the "requires_point" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRequiresPoint
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "requires_point" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRequiresPoint()
        {
            _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AvailableAbility);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AvailableAbility other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (AbilityId != other.AbilityId) return false;
            if (RequiresPoint != other.RequiresPoint) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasAbilityId) hash ^= AbilityId.GetHashCode();
            if (HasRequiresPoint) hash ^= RequiresPoint.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasAbilityId)
            {
                output.WriteRawTag(8);
                output.WriteInt32(AbilityId);
            }
            if (HasRequiresPoint)
            {
                output.WriteRawTag(16);
                output.WriteBool(RequiresPoint);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasAbilityId)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityId);
            }
            if (HasRequiresPoint)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AvailableAbility other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasAbilityId)
            {
                AbilityId = other.AbilityId;
            }
            if (other.HasRequiresPoint)
            {
                RequiresPoint = other.RequiresPoint;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            AbilityId = input.ReadInt32();
                            break;
                        }
                    case 16:
                        {
                            RequiresPoint = input.ReadBool();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ImageData : pb::IMessage<ImageData>
    {
        private static readonly pb::MessageParser<ImageData> _parser = new pb::MessageParser<ImageData>(() => new ImageData());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ImageData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.CommonReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageData()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageData(ImageData other) : this()
        {
            _hasBits0 = other._hasBits0;
            bitsPerPixel_ = other.bitsPerPixel_;
            size_ = other.HasSize ? other.size_.Clone() : null;
            data_ = other.data_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageData Clone()
        {
            return new ImageData(this);
        }

        /// <summary>Field number for the "bits_per_pixel" field.</summary>
        public const int BitsPerPixelFieldNumber = 1;
        private readonly static int BitsPerPixelDefaultValue = 0;

        private int bitsPerPixel_;
        /// <summary>
        /// Number of bits per pixel; 8 bits for a byte etc.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BitsPerPixel
        {
            get { if ((_hasBits0 & 1) != 0) { return bitsPerPixel_; } else { return BitsPerPixelDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                bitsPerPixel_ = value;
            }
        }
        /// <summary>Gets whether the "bits_per_pixel" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBitsPerPixel
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "bits_per_pixel" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBitsPerPixel()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "size" field.</summary>
        public const int SizeFieldNumber = 2;
        private global::SC2APIProtocol.Size2DI size_;
        /// <summary>
        /// Dimension in pixels.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.Size2DI Size
        {
            get { return size_; }
            set
            {
                size_ = value;
            }
        }
        /// <summary>Gets whether the size field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSize
        {
            get { return size_ != null; }
        }
        /// <summary>Clears the value of the size field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSize()
        {
            size_ = null;
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 3;
        private readonly static pb::ByteString DataDefaultValue = pb::ByteString.Empty;

        private pb::ByteString data_;
        /// <summary>
        /// Binary data; the size of this buffer in bytes is width * height * bits_per_pixel / 8.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Data
        {
            get { return data_ ?? DataDefaultValue; }
            set
            {
                data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "data" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasData
        {
            get { return data_ != null; }
        }
        /// <summary>Clears the value of the "data" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData()
        {
            data_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ImageData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ImageData other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (BitsPerPixel != other.BitsPerPixel) return false;
            if (!object.Equals(Size, other.Size)) return false;
            if (Data != other.Data) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasBitsPerPixel) hash ^= BitsPerPixel.GetHashCode();
            if (HasSize) hash ^= Size.GetHashCode();
            if (HasData) hash ^= Data.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasBitsPerPixel)
            {
                output.WriteRawTag(8);
                output.WriteInt32(BitsPerPixel);
            }
            if (HasSize)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Size);
            }
            if (HasData)
            {
                output.WriteRawTag(26);
                output.WriteBytes(Data);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasBitsPerPixel)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(BitsPerPixel);
            }
            if (HasSize)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Size);
            }
            if (HasData)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ImageData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasBitsPerPixel)
            {
                BitsPerPixel = other.BitsPerPixel;
            }
            if (other.HasSize)
            {
                if (!HasSize)
                {
                    Size = new global::SC2APIProtocol.Size2DI();
                }
                Size.MergeFrom(other.Size);
            }
            if (other.HasData)
            {
                Data = other.Data;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            BitsPerPixel = input.ReadInt32();
                            break;
                        }
                    case 18:
                        {
                            if (!HasSize)
                            {
                                Size = new global::SC2APIProtocol.Size2DI();
                            }
                            input.ReadMessage(Size);
                            break;
                        }
                    case 26:
                        {
                            Data = input.ReadBytes();
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    /// Point on the screen/minimap (e.g., 0..64).
    /// Note: bottom left of the screen is 0, 0.
    /// </summary>
    public sealed partial class PointI : pb::IMessage<PointI>
    {
        private static readonly pb::MessageParser<PointI> _parser = new pb::MessageParser<PointI>(() => new PointI());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PointI> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.CommonReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PointI()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PointI(PointI other) : this()
        {
            _hasBits0 = other._hasBits0;
            x_ = other.x_;
            y_ = other.y_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PointI Clone()
        {
            return new PointI(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private readonly static int XDefaultValue = 0;

        private int x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int X
        {
            get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                x_ = value;
            }
        }
        /// <summary>Gets whether the "x" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasX
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "x" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearX()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private readonly static int YDefaultValue = 0;

        private int y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Y
        {
            get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                y_ = value;
            }
        }
        /// <summary>Gets whether the "y" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasY
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "y" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearY()
        {
            _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PointI);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PointI other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (X != other.X) return false;
            if (Y != other.Y) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasX) hash ^= X.GetHashCode();
            if (HasY) hash ^= Y.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasX)
            {
                output.WriteRawTag(8);
                output.WriteInt32(X);
            }
            if (HasY)
            {
                output.WriteRawTag(16);
                output.WriteInt32(Y);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasX)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
            }
            if (HasY)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PointI other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasX)
            {
                X = other.X;
            }
            if (other.HasY)
            {
                Y = other.Y;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            X = input.ReadInt32();
                            break;
                        }
                    case 16:
                        {
                            Y = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    /// Screen space rectangular area.
    /// </summary>
    public sealed partial class RectangleI : pb::IMessage<RectangleI>
    {
        private static readonly pb::MessageParser<RectangleI> _parser = new pb::MessageParser<RectangleI>(() => new RectangleI());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RectangleI> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.CommonReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RectangleI()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RectangleI(RectangleI other) : this()
        {
            p0_ = other.HasP0 ? other.p0_.Clone() : null;
            p1_ = other.HasP1 ? other.p1_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RectangleI Clone()
        {
            return new RectangleI(this);
        }

        /// <summary>Field number for the "p0" field.</summary>
        public const int P0FieldNumber = 1;
        private global::SC2APIProtocol.PointI p0_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.PointI P0
        {
            get { return p0_; }
            set
            {
                p0_ = value;
            }
        }
        /// <summary>Gets whether the p0 field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasP0
        {
            get { return p0_ != null; }
        }
        /// <summary>Clears the value of the p0 field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearP0()
        {
            p0_ = null;
        }

        /// <summary>Field number for the "p1" field.</summary>
        public const int P1FieldNumber = 2;
        private global::SC2APIProtocol.PointI p1_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.PointI P1
        {
            get { return p1_; }
            set
            {
                p1_ = value;
            }
        }
        /// <summary>Gets whether the p1 field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasP1
        {
            get { return p1_ != null; }
        }
        /// <summary>Clears the value of the p1 field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearP1()
        {
            p1_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RectangleI);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RectangleI other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(P0, other.P0)) return false;
            if (!object.Equals(P1, other.P1)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasP0) hash ^= P0.GetHashCode();
            if (HasP1) hash ^= P1.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasP0)
            {
                output.WriteRawTag(10);
                output.WriteMessage(P0);
            }
            if (HasP1)
            {
                output.WriteRawTag(18);
                output.WriteMessage(P1);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasP0)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(P0);
            }
            if (HasP1)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(P1);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RectangleI other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasP0)
            {
                if (!HasP0)
                {
                    P0 = new global::SC2APIProtocol.PointI();
                }
                P0.MergeFrom(other.P0);
            }
            if (other.HasP1)
            {
                if (!HasP1)
                {
                    P1 = new global::SC2APIProtocol.PointI();
                }
                P1.MergeFrom(other.P1);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (!HasP0)
                            {
                                P0 = new global::SC2APIProtocol.PointI();
                            }
                            input.ReadMessage(P0);
                            break;
                        }
                    case 18:
                        {
                            if (!HasP1)
                            {
                                P1 = new global::SC2APIProtocol.PointI();
                            }
                            input.ReadMessage(P1);
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    /// Point on the game board, 0..255.
    /// Note: bottom left of the screen is 0, 0.
    /// </summary>
    public sealed partial class Point2D : pb::IMessage<Point2D>
    {
        private static readonly pb::MessageParser<Point2D> _parser = new pb::MessageParser<Point2D>(() => new Point2D());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Point2D> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.CommonReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Point2D()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Point2D(Point2D other) : this()
        {
            _hasBits0 = other._hasBits0;
            x_ = other.x_;
            y_ = other.y_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        // Human added 2019-12-14
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Point2D(float x, float y)
        {
            x_ = x;
            y_ = y;
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Point2D Clone()
        {
            return new Point2D(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private readonly static float XDefaultValue = 0F;

        private float x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float X
        {
            get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                x_ = value;
            }
        }
        /// <summary>Gets whether the "x" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasX
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "x" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearX()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private readonly static float YDefaultValue = 0F;

        private float y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Y
        {
            get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                y_ = value;
            }
        }
        /// <summary>Gets whether the "y" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasY
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "y" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearY()
        {
            _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Point2D);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Point2D other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasX) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
            if (HasY) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasX)
            {
                output.WriteRawTag(13);
                output.WriteFloat(X);
            }
            if (HasY)
            {
                output.WriteRawTag(21);
                output.WriteFloat(Y);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasX)
            {
                size += 1 + 4;
            }
            if (HasY)
            {
                size += 1 + 4;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Point2D other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasX)
            {
                X = other.X;
            }
            if (other.HasY)
            {
                Y = other.Y;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 13:
                        {
                            X = input.ReadFloat();
                            break;
                        }
                    case 21:
                        {
                            Y = input.ReadFloat();
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    /// Point on the game board, 0..255.
    /// Note: bottom left of the screen is 0, 0.
    /// </summary>
    public sealed partial class Point : pb::IMessage<Point>
    {
        private static readonly pb::MessageParser<Point> _parser = new pb::MessageParser<Point>(() => new Point());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Point> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.CommonReflection.Descriptor.MessageTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Point()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Point(Point other) : this()
        {
            _hasBits0 = other._hasBits0;
            x_ = other.x_;
            y_ = other.y_;
            z_ = other.z_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Point Clone()
        {
            return new Point(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private readonly static float XDefaultValue = 0F;

        private float x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float X
        {
            get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                x_ = value;
            }
        }
        /// <summary>Gets whether the "x" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasX
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "x" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearX()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private readonly static float YDefaultValue = 0F;

        private float y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Y
        {
            get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                y_ = value;
            }
        }
        /// <summary>Gets whether the "y" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasY
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "y" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearY()
        {
            _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "z" field.</summary>
        public const int ZFieldNumber = 3;
        private readonly static float ZDefaultValue = 0F;

        private float z_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Z
        {
            get { if ((_hasBits0 & 4) != 0) { return z_; } else { return ZDefaultValue; } }
            set
            {
                _hasBits0 |= 4;
                z_ = value;
            }
        }
        /// <summary>Gets whether the "z" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasZ
        {
            get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "z" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearZ()
        {
            _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Point);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Point other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasX) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
            if (HasY) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
            if (HasZ) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasX)
            {
                output.WriteRawTag(13);
                output.WriteFloat(X);
            }
            if (HasY)
            {
                output.WriteRawTag(21);
                output.WriteFloat(Y);
            }
            if (HasZ)
            {
                output.WriteRawTag(29);
                output.WriteFloat(Z);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasX)
            {
                size += 1 + 4;
            }
            if (HasY)
            {
                size += 1 + 4;
            }
            if (HasZ)
            {
                size += 1 + 4;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Point other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasX)
            {
                X = other.X;
            }
            if (other.HasY)
            {
                Y = other.Y;
            }
            if (other.HasZ)
            {
                Z = other.Z;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 13:
                        {
                            X = input.ReadFloat();
                            break;
                        }
                    case 21:
                        {
                            Y = input.ReadFloat();
                            break;
                        }
                    case 29:
                        {
                            Z = input.ReadFloat();
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    /// Screen dimensions.
    /// </summary>
    public sealed partial class Size2DI : pb::IMessage<Size2DI>
    {
        private static readonly pb::MessageParser<Size2DI> _parser = new pb::MessageParser<Size2DI>(() => new Size2DI());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Size2DI> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.CommonReflection.Descriptor.MessageTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Size2DI()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Size2DI(Size2DI other) : this()
        {
            _hasBits0 = other._hasBits0;
            x_ = other.x_;
            y_ = other.y_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Size2DI Clone()
        {
            return new Size2DI(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private readonly static int XDefaultValue = 0;

        private int x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int X
        {
            get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                x_ = value;
            }
        }
        /// <summary>Gets whether the "x" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasX
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "x" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearX()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private readonly static int YDefaultValue = 0;

        private int y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Y
        {
            get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                y_ = value;
            }
        }
        /// <summary>Gets whether the "y" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasY
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "y" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearY()
        {
            _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Size2DI);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Size2DI other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (X != other.X) return false;
            if (Y != other.Y) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasX) hash ^= X.GetHashCode();
            if (HasY) hash ^= Y.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasX)
            {
                output.WriteRawTag(8);
                output.WriteInt32(X);
            }
            if (HasY)
            {
                output.WriteRawTag(16);
                output.WriteInt32(Y);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasX)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
            }
            if (HasY)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Size2DI other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasX)
            {
                X = other.X;
            }
            if (other.HasY)
            {
                Y = other.Y;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            X = input.ReadInt32();
                            break;
                        }
                    case 16:
                        {
                            Y = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code
