// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: s2clientprotocol/ui.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SC2APIProtocol
{

    /// <summary>Holder for reflection information generated from s2clientprotocol/ui.proto</summary>
    public static partial class UiReflection
    {

        #region Descriptor
        /// <summary>File descriptor for s2clientprotocol/ui.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static UiReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "ChlzMmNsaWVudHByb3RvY29sL3VpLnByb3RvEg5TQzJBUElQcm90b2NvbCKG",
                  "AgoNT2JzZXJ2YXRpb25VSRIsCgZncm91cHMYASADKAsyHC5TQzJBUElQcm90",
                  "b2NvbC5Db250cm9sR3JvdXASLQoGc2luZ2xlGAIgASgLMhsuU0MyQVBJUHJv",
                  "dG9jb2wuU2luZ2xlUGFuZWxIABIrCgVtdWx0aRgDIAEoCzIaLlNDMkFQSVBy",
                  "b3RvY29sLk11bHRpUGFuZWxIABIrCgVjYXJnbxgEIAEoCzIaLlNDMkFQSVBy",
                  "b3RvY29sLkNhcmdvUGFuZWxIABI1Cgpwcm9kdWN0aW9uGAUgASgLMh8uU0My",
                  "QVBJUHJvdG9jb2wuUHJvZHVjdGlvblBhbmVsSABCBwoFcGFuZWwiVAoMQ29u",
                  "dHJvbEdyb3VwEhsKE2NvbnRyb2xfZ3JvdXBfaW5kZXgYASABKA0SGAoQbGVh",
                  "ZGVyX3VuaXRfdHlwZRgCIAEoDRINCgVjb3VudBgDIAEoDSKFAgoIVW5pdElu",
                  "Zm8SEQoJdW5pdF90eXBlGAEgASgNEhcKD3BsYXllcl9yZWxhdGl2ZRgCIAEo",
                  "DRIOCgZoZWFsdGgYAyABKAUSDwoHc2hpZWxkcxgEIAEoBRIOCgZlbmVyZ3kY",
                  "BSABKAUSHQoVdHJhbnNwb3J0X3Nsb3RzX3Rha2VuGAYgASgFEhYKDmJ1aWxk",
                  "X3Byb2dyZXNzGAcgASgCEigKBmFkZF9vbhgIIAEoCzIYLlNDMkFQSVByb3Rv",
                  "Y29sLlVuaXRJbmZvEhIKCm1heF9oZWFsdGgYCSABKAUSEwoLbWF4X3NoaWVs",
                  "ZHMYCiABKAUSEgoKbWF4X2VuZXJneRgLIAEoBSKdAQoLU2luZ2xlUGFuZWwS",
                  "JgoEdW5pdBgBIAEoCzIYLlNDMkFQSVByb3RvY29sLlVuaXRJbmZvEhwKFGF0",
                  "dGFja191cGdyYWRlX2xldmVsGAIgASgFEhsKE2FybW9yX3VwZ3JhZGVfbGV2",
                  "ZWwYAyABKAUSHAoUc2hpZWxkX3VwZ3JhZGVfbGV2ZWwYBCABKAUSDQoFYnVm",
                  "ZnMYBSADKAUiNQoKTXVsdGlQYW5lbBInCgV1bml0cxgBIAMoCzIYLlNDMkFQ",
                  "SVByb3RvY29sLlVuaXRJbmZvInsKCkNhcmdvUGFuZWwSJgoEdW5pdBgBIAEo",
                  "CzIYLlNDMkFQSVByb3RvY29sLlVuaXRJbmZvEiwKCnBhc3NlbmdlcnMYAiAD",
                  "KAsyGC5TQzJBUElQcm90b2NvbC5Vbml0SW5mbxIXCg9zbG90c19hdmFpbGFi",
                  "bGUYAyABKAUiNwoJQnVpbGRJdGVtEhIKCmFiaWxpdHlfaWQYASABKA0SFgoO",
                  "YnVpbGRfcHJvZ3Jlc3MYAiABKAIinQEKD1Byb2R1Y3Rpb25QYW5lbBImCgR1",
                  "bml0GAEgASgLMhguU0MyQVBJUHJvdG9jb2wuVW5pdEluZm8SLQoLYnVpbGRf",
                  "cXVldWUYAiADKAsyGC5TQzJBUElQcm90b2NvbC5Vbml0SW5mbxIzChBwcm9k",
                  "dWN0aW9uX3F1ZXVlGAMgAygLMhkuU0MyQVBJUHJvdG9jb2wuQnVpbGRJdGVt",
                  "ItoECghBY3Rpb25VSRI7Cg1jb250cm9sX2dyb3VwGAEgASgLMiIuU0MyQVBJ",
                  "UHJvdG9jb2wuQWN0aW9uQ29udHJvbEdyb3VwSAASNwoLc2VsZWN0X2FybXkY",
                  "AiABKAsyIC5TQzJBUElQcm90b2NvbC5BY3Rpb25TZWxlY3RBcm15SAASQgoR",
                  "c2VsZWN0X3dhcnBfZ2F0ZXMYAyABKAsyJS5TQzJBUElQcm90b2NvbC5BY3Rp",
                  "b25TZWxlY3RXYXJwR2F0ZXNIABI5CgxzZWxlY3RfbGFydmEYBCABKAsyIS5T",
                  "QzJBUElQcm90b2NvbC5BY3Rpb25TZWxlY3RMYXJ2YUgAEkQKEnNlbGVjdF9p",
                  "ZGxlX3dvcmtlchgFIAEoCzImLlNDMkFQSVByb3RvY29sLkFjdGlvblNlbGVj",
                  "dElkbGVXb3JrZXJIABI3CgttdWx0aV9wYW5lbBgGIAEoCzIgLlNDMkFQSVBy",
                  "b3RvY29sLkFjdGlvbk11bHRpUGFuZWxIABI9CgtjYXJnb19wYW5lbBgHIAEo",
                  "CzImLlNDMkFQSVByb3RvY29sLkFjdGlvbkNhcmdvUGFuZWxVbmxvYWRIABJQ",
                  "ChBwcm9kdWN0aW9uX3BhbmVsGAggASgLMjQuU0MyQVBJUHJvdG9jb2wuQWN0",
                  "aW9uUHJvZHVjdGlvblBhbmVsUmVtb3ZlRnJvbVF1ZXVlSAASPwoPdG9nZ2xl",
                  "X2F1dG9jYXN0GAkgASgLMiQuU0MyQVBJUHJvdG9jb2wuQWN0aW9uVG9nZ2xl",
                  "QXV0b2Nhc3RIAEIICgZhY3Rpb24i1AEKEkFjdGlvbkNvbnRyb2xHcm91cBJF",
                  "CgZhY3Rpb24YASABKA4yNS5TQzJBUElQcm90b2NvbC5BY3Rpb25Db250cm9s",
                  "R3JvdXAuQ29udHJvbEdyb3VwQWN0aW9uEhsKE2NvbnRyb2xfZ3JvdXBfaW5k",
                  "ZXgYAiABKA0iWgoSQ29udHJvbEdyb3VwQWN0aW9uEgoKBlJlY2FsbBABEgcK",
                  "A1NldBACEgoKBkFwcGVuZBADEg8KC1NldEFuZFN0ZWFsEAQSEgoOQXBwZW5k",
                  "QW5kU3RlYWwQBSIpChBBY3Rpb25TZWxlY3RBcm15EhUKDXNlbGVjdGlvbl9h",
                  "ZGQYASABKAgiLgoVQWN0aW9uU2VsZWN0V2FycEdhdGVzEhUKDXNlbGVjdGlv",
                  "bl9hZGQYASABKAgiEwoRQWN0aW9uU2VsZWN0TGFydmEiggEKFkFjdGlvblNl",
                  "bGVjdElkbGVXb3JrZXISOQoEdHlwZRgBIAEoDjIrLlNDMkFQSVByb3RvY29s",
                  "LkFjdGlvblNlbGVjdElkbGVXb3JrZXIuVHlwZSItCgRUeXBlEgcKA1NldBAB",
                  "EgcKA0FkZBACEgcKA0FsbBADEgoKBkFkZEFsbBAEIrMBChBBY3Rpb25NdWx0",
                  "aVBhbmVsEjMKBHR5cGUYASABKA4yJS5TQzJBUElQcm90b2NvbC5BY3Rpb25N",
                  "dWx0aVBhbmVsLlR5cGUSEgoKdW5pdF9pbmRleBgCIAEoBSJWCgRUeXBlEhAK",
                  "DFNpbmdsZVNlbGVjdBABEhAKDERlc2VsZWN0VW5pdBACEhMKD1NlbGVjdEFs",
                  "bE9mVHlwZRADEhUKEURlc2VsZWN0QWxsT2ZUeXBlEAQiLAoWQWN0aW9uQ2Fy",
                  "Z29QYW5lbFVubG9hZBISCgp1bml0X2luZGV4GAEgASgFIjoKJEFjdGlvblBy",
                  "b2R1Y3Rpb25QYW5lbFJlbW92ZUZyb21RdWV1ZRISCgp1bml0X2luZGV4GAEg",
                  "ASgFIioKFEFjdGlvblRvZ2dsZUF1dG9jYXN0EhIKCmFiaWxpdHlfaWQYASAB",
                  "KAU="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ObservationUI), global::SC2APIProtocol.ObservationUI.Parser, new[]{ "Groups", "Single", "Multi", "Cargo", "Production" }, new[]{ "Panel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ControlGroup), global::SC2APIProtocol.ControlGroup.Parser, new[]{ "ControlGroupIndex", "LeaderUnitType", "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.UnitInfo), global::SC2APIProtocol.UnitInfo.Parser, new[]{ "UnitType", "PlayerRelative", "Health", "Shields", "Energy", "TransportSlotsTaken", "BuildProgress", "AddOn", "MaxHealth", "MaxShields", "MaxEnergy" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.SinglePanel), global::SC2APIProtocol.SinglePanel.Parser, new[]{ "Unit", "AttackUpgradeLevel", "ArmorUpgradeLevel", "ShieldUpgradeLevel", "Buffs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.MultiPanel), global::SC2APIProtocol.MultiPanel.Parser, new[]{ "Units" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.CargoPanel), global::SC2APIProtocol.CargoPanel.Parser, new[]{ "Unit", "Passengers", "SlotsAvailable" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.BuildItem), global::SC2APIProtocol.BuildItem.Parser, new[]{ "AbilityId", "BuildProgress" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ProductionPanel), global::SC2APIProtocol.ProductionPanel.Parser, new[]{ "Unit", "BuildQueue", "ProductionQueue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionUI), global::SC2APIProtocol.ActionUI.Parser, new[]{ "ControlGroup", "SelectArmy", "SelectWarpGates", "SelectLarva", "SelectIdleWorker", "MultiPanel", "CargoPanel", "ProductionPanel", "ToggleAutocast" }, new[]{ "Action" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionControlGroup), global::SC2APIProtocol.ActionControlGroup.Parser, new[]{ "Action", "ControlGroupIndex" }, null, new[]{ typeof(global::SC2APIProtocol.ActionControlGroup.Types.ControlGroupAction) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionSelectArmy), global::SC2APIProtocol.ActionSelectArmy.Parser, new[]{ "SelectionAdd" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionSelectWarpGates), global::SC2APIProtocol.ActionSelectWarpGates.Parser, new[]{ "SelectionAdd" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionSelectLarva), global::SC2APIProtocol.ActionSelectLarva.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionSelectIdleWorker), global::SC2APIProtocol.ActionSelectIdleWorker.Parser, new[]{ "Type" }, null, new[]{ typeof(global::SC2APIProtocol.ActionSelectIdleWorker.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionMultiPanel), global::SC2APIProtocol.ActionMultiPanel.Parser, new[]{ "Type", "UnitIndex" }, null, new[]{ typeof(global::SC2APIProtocol.ActionMultiPanel.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionCargoPanelUnload), global::SC2APIProtocol.ActionCargoPanelUnload.Parser, new[]{ "UnitIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionProductionPanelRemoveFromQueue), global::SC2APIProtocol.ActionProductionPanelRemoveFromQueue.Parser, new[]{ "UnitIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionToggleAutocast), global::SC2APIProtocol.ActionToggleAutocast.Parser, new[]{ "AbilityId" }, null, null, null, null)
                }));
        }
        #endregion

    }
    #region Messages
    public sealed partial class ObservationUI : pb::IMessage<ObservationUI>
    {
        private static readonly pb::MessageParser<ObservationUI> _parser = new pb::MessageParser<ObservationUI>(() => new ObservationUI());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ObservationUI> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.UiReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ObservationUI()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ObservationUI(ObservationUI other) : this()
        {
            groups_ = other.groups_.Clone();
            switch (other.PanelCase)
            {
                case PanelOneofCase.Single:
                    Single = other.Single.Clone();
                    break;
                case PanelOneofCase.Multi:
                    Multi = other.Multi.Clone();
                    break;
                case PanelOneofCase.Cargo:
                    Cargo = other.Cargo.Clone();
                    break;
                case PanelOneofCase.Production:
                    Production = other.Production.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ObservationUI Clone()
        {
            return new ObservationUI(this);
        }

        /// <summary>Field number for the "groups" field.</summary>
        public const int GroupsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.ControlGroup> _repeated_groups_codec
            = pb::FieldCodec.ForMessage(10, global::SC2APIProtocol.ControlGroup.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.ControlGroup> groups_ = new pbc::RepeatedField<global::SC2APIProtocol.ControlGroup>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.ControlGroup> Groups
        {
            get { return groups_; }
        }

        /// <summary>Field number for the "single" field.</summary>
        public const int SingleFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.SinglePanel Single
        {
            get { return HasSingle ? (global::SC2APIProtocol.SinglePanel)panel_ : null; }
            set
            {
                panel_ = value;
                panelCase_ = value == null ? PanelOneofCase.None : PanelOneofCase.Single;
            }
        }
        /// <summary>Gets whether the "single" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSingle
        {
            get { return panelCase_ == PanelOneofCase.Single; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "single" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSingle()
        {
            if (HasSingle)
            {
                ClearPanel();
            }
        }

        /// <summary>Field number for the "multi" field.</summary>
        public const int MultiFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.MultiPanel Multi
        {
            get { return HasMulti ? (global::SC2APIProtocol.MultiPanel)panel_ : null; }
            set
            {
                panel_ = value;
                panelCase_ = value == null ? PanelOneofCase.None : PanelOneofCase.Multi;
            }
        }
        /// <summary>Gets whether the "multi" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMulti
        {
            get { return panelCase_ == PanelOneofCase.Multi; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "multi" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMulti()
        {
            if (HasMulti)
            {
                ClearPanel();
            }
        }

        /// <summary>Field number for the "cargo" field.</summary>
        public const int CargoFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.CargoPanel Cargo
        {
            get { return HasCargo ? (global::SC2APIProtocol.CargoPanel)panel_ : null; }
            set
            {
                panel_ = value;
                panelCase_ = value == null ? PanelOneofCase.None : PanelOneofCase.Cargo;
            }
        }
        /// <summary>Gets whether the "cargo" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCargo
        {
            get { return panelCase_ == PanelOneofCase.Cargo; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "cargo" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCargo()
        {
            if (HasCargo)
            {
                ClearPanel();
            }
        }

        /// <summary>Field number for the "production" field.</summary>
        public const int ProductionFieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ProductionPanel Production
        {
            get { return HasProduction ? (global::SC2APIProtocol.ProductionPanel)panel_ : null; }
            set
            {
                panel_ = value;
                panelCase_ = value == null ? PanelOneofCase.None : PanelOneofCase.Production;
            }
        }
        /// <summary>Gets whether the "production" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasProduction
        {
            get { return panelCase_ == PanelOneofCase.Production; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "production" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearProduction()
        {
            if (HasProduction)
            {
                ClearPanel();
            }
        }

        private object panel_;
        /// <summary>Enum of possible cases for the "panel" oneof.</summary>
        public enum PanelOneofCase
        {
            None = 0,
            Single = 2,
            Multi = 3,
            Cargo = 4,
            Production = 5,
        }
        private PanelOneofCase panelCase_ = PanelOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PanelOneofCase PanelCase
        {
            get { return panelCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPanel()
        {
            panelCase_ = PanelOneofCase.None;
            panel_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ObservationUI);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ObservationUI other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!groups_.Equals(other.groups_)) return false;
            if (!object.Equals(Single, other.Single)) return false;
            if (!object.Equals(Multi, other.Multi)) return false;
            if (!object.Equals(Cargo, other.Cargo)) return false;
            if (!object.Equals(Production, other.Production)) return false;
            if (PanelCase != other.PanelCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= groups_.GetHashCode();
            if (HasSingle) hash ^= Single.GetHashCode();
            if (HasMulti) hash ^= Multi.GetHashCode();
            if (HasCargo) hash ^= Cargo.GetHashCode();
            if (HasProduction) hash ^= Production.GetHashCode();
            hash ^= (int)panelCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            groups_.WriteTo(output, _repeated_groups_codec);
            if (HasSingle)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Single);
            }
            if (HasMulti)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Multi);
            }
            if (HasCargo)
            {
                output.WriteRawTag(34);
                output.WriteMessage(Cargo);
            }
            if (HasProduction)
            {
                output.WriteRawTag(42);
                output.WriteMessage(Production);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += groups_.CalculateSize(_repeated_groups_codec);
            if (HasSingle)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Single);
            }
            if (HasMulti)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Multi);
            }
            if (HasCargo)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cargo);
            }
            if (HasProduction)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Production);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ObservationUI other)
        {
            if (other == null)
            {
                return;
            }
            groups_.Add(other.groups_);
            switch (other.PanelCase)
            {
                case PanelOneofCase.Single:
                    if (Single == null)
                    {
                        Single = new global::SC2APIProtocol.SinglePanel();
                    }
                    Single.MergeFrom(other.Single);
                    break;
                case PanelOneofCase.Multi:
                    if (Multi == null)
                    {
                        Multi = new global::SC2APIProtocol.MultiPanel();
                    }
                    Multi.MergeFrom(other.Multi);
                    break;
                case PanelOneofCase.Cargo:
                    if (Cargo == null)
                    {
                        Cargo = new global::SC2APIProtocol.CargoPanel();
                    }
                    Cargo.MergeFrom(other.Cargo);
                    break;
                case PanelOneofCase.Production:
                    if (Production == null)
                    {
                        Production = new global::SC2APIProtocol.ProductionPanel();
                    }
                    Production.MergeFrom(other.Production);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            groups_.AddEntriesFrom(input, _repeated_groups_codec);
                            break;
                        }
                    case 18:
                        {
                            global::SC2APIProtocol.SinglePanel subBuilder = new global::SC2APIProtocol.SinglePanel();
                            if (HasSingle)
                            {
                                subBuilder.MergeFrom(Single);
                            }
                            input.ReadMessage(subBuilder);
                            Single = subBuilder;
                            break;
                        }
                    case 26:
                        {
                            global::SC2APIProtocol.MultiPanel subBuilder = new global::SC2APIProtocol.MultiPanel();
                            if (HasMulti)
                            {
                                subBuilder.MergeFrom(Multi);
                            }
                            input.ReadMessage(subBuilder);
                            Multi = subBuilder;
                            break;
                        }
                    case 34:
                        {
                            global::SC2APIProtocol.CargoPanel subBuilder = new global::SC2APIProtocol.CargoPanel();
                            if (HasCargo)
                            {
                                subBuilder.MergeFrom(Cargo);
                            }
                            input.ReadMessage(subBuilder);
                            Cargo = subBuilder;
                            break;
                        }
                    case 42:
                        {
                            global::SC2APIProtocol.ProductionPanel subBuilder = new global::SC2APIProtocol.ProductionPanel();
                            if (HasProduction)
                            {
                                subBuilder.MergeFrom(Production);
                            }
                            input.ReadMessage(subBuilder);
                            Production = subBuilder;
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ControlGroup : pb::IMessage<ControlGroup>
    {
        private static readonly pb::MessageParser<ControlGroup> _parser = new pb::MessageParser<ControlGroup>(() => new ControlGroup());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ControlGroup> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.UiReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ControlGroup()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ControlGroup(ControlGroup other) : this()
        {
            _hasBits0 = other._hasBits0;
            controlGroupIndex_ = other.controlGroupIndex_;
            leaderUnitType_ = other.leaderUnitType_;
            count_ = other.count_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ControlGroup Clone()
        {
            return new ControlGroup(this);
        }

        /// <summary>Field number for the "control_group_index" field.</summary>
        public const int ControlGroupIndexFieldNumber = 1;
        private readonly static uint ControlGroupIndexDefaultValue = 0;

        private uint controlGroupIndex_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ControlGroupIndex
        {
            get { if ((_hasBits0 & 1) != 0) { return controlGroupIndex_; } else { return ControlGroupIndexDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                controlGroupIndex_ = value;
            }
        }
        /// <summary>Gets whether the "control_group_index" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasControlGroupIndex
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "control_group_index" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearControlGroupIndex()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "leader_unit_type" field.</summary>
        public const int LeaderUnitTypeFieldNumber = 2;
        private readonly static uint LeaderUnitTypeDefaultValue = 0;

        private uint leaderUnitType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LeaderUnitType
        {
            get { if ((_hasBits0 & 2) != 0) { return leaderUnitType_; } else { return LeaderUnitTypeDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                leaderUnitType_ = value;
            }
        }
        /// <summary>Gets whether the "leader_unit_type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLeaderUnitType
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "leader_unit_type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLeaderUnitType()
        {
            _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 3;
        private readonly static uint CountDefaultValue = 0;

        private uint count_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Count
        {
            get { if ((_hasBits0 & 4) != 0) { return count_; } else { return CountDefaultValue; } }
            set
            {
                _hasBits0 |= 4;
                count_ = value;
            }
        }
        /// <summary>Gets whether the "count" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCount
        {
            get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "count" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCount()
        {
            _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ControlGroup);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ControlGroup other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ControlGroupIndex != other.ControlGroupIndex) return false;
            if (LeaderUnitType != other.LeaderUnitType) return false;
            if (Count != other.Count) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasControlGroupIndex) hash ^= ControlGroupIndex.GetHashCode();
            if (HasLeaderUnitType) hash ^= LeaderUnitType.GetHashCode();
            if (HasCount) hash ^= Count.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasControlGroupIndex)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(ControlGroupIndex);
            }
            if (HasLeaderUnitType)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(LeaderUnitType);
            }
            if (HasCount)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(Count);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasControlGroupIndex)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ControlGroupIndex);
            }
            if (HasLeaderUnitType)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeaderUnitType);
            }
            if (HasCount)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ControlGroup other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasControlGroupIndex)
            {
                ControlGroupIndex = other.ControlGroupIndex;
            }
            if (other.HasLeaderUnitType)
            {
                LeaderUnitType = other.LeaderUnitType;
            }
            if (other.HasCount)
            {
                Count = other.Count;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            ControlGroupIndex = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            LeaderUnitType = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            Count = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class UnitInfo : pb::IMessage<UnitInfo>
    {
        private static readonly pb::MessageParser<UnitInfo> _parser = new pb::MessageParser<UnitInfo>(() => new UnitInfo());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UnitInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.UiReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UnitInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UnitInfo(UnitInfo other) : this()
        {
            _hasBits0 = other._hasBits0;
            unitType_ = other.unitType_;
            playerRelative_ = other.playerRelative_;
            health_ = other.health_;
            shields_ = other.shields_;
            energy_ = other.energy_;
            transportSlotsTaken_ = other.transportSlotsTaken_;
            buildProgress_ = other.buildProgress_;
            addOn_ = other.HasAddOn ? other.addOn_.Clone() : null;
            maxHealth_ = other.maxHealth_;
            maxShields_ = other.maxShields_;
            maxEnergy_ = other.maxEnergy_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UnitInfo Clone()
        {
            return new UnitInfo(this);
        }

        /// <summary>Field number for the "unit_type" field.</summary>
        public const int UnitTypeFieldNumber = 1;
        private readonly static uint UnitTypeDefaultValue = 0;

        private uint unitType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint UnitType
        {
            get { if ((_hasBits0 & 1) != 0) { return unitType_; } else { return UnitTypeDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                unitType_ = value;
            }
        }
        /// <summary>Gets whether the "unit_type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnitType
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "unit_type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnitType()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "player_relative" field.</summary>
        public const int PlayerRelativeFieldNumber = 2;
        private readonly static uint PlayerRelativeDefaultValue = 0;

        private uint playerRelative_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PlayerRelative
        {
            get { if ((_hasBits0 & 2) != 0) { return playerRelative_; } else { return PlayerRelativeDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                playerRelative_ = value;
            }
        }
        /// <summary>Gets whether the "player_relative" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerRelative
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "player_relative" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerRelative()
        {
            _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "health" field.</summary>
        public const int HealthFieldNumber = 3;
        private readonly static int HealthDefaultValue = 0;

        private int health_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Health
        {
            get { if ((_hasBits0 & 4) != 0) { return health_; } else { return HealthDefaultValue; } }
            set
            {
                _hasBits0 |= 4;
                health_ = value;
            }
        }
        /// <summary>Gets whether the "health" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHealth
        {
            get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "health" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHealth()
        {
            _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "shields" field.</summary>
        public const int ShieldsFieldNumber = 4;
        private readonly static int ShieldsDefaultValue = 0;

        private int shields_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Shields
        {
            get { if ((_hasBits0 & 8) != 0) { return shields_; } else { return ShieldsDefaultValue; } }
            set
            {
                _hasBits0 |= 8;
                shields_ = value;
            }
        }
        /// <summary>Gets whether the "shields" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasShields
        {
            get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "shields" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearShields()
        {
            _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "energy" field.</summary>
        public const int EnergyFieldNumber = 5;
        private readonly static int EnergyDefaultValue = 0;

        private int energy_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Energy
        {
            get { if ((_hasBits0 & 16) != 0) { return energy_; } else { return EnergyDefaultValue; } }
            set
            {
                _hasBits0 |= 16;
                energy_ = value;
            }
        }
        /// <summary>Gets whether the "energy" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasEnergy
        {
            get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "energy" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearEnergy()
        {
            _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "transport_slots_taken" field.</summary>
        public const int TransportSlotsTakenFieldNumber = 6;
        private readonly static int TransportSlotsTakenDefaultValue = 0;

        private int transportSlotsTaken_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TransportSlotsTaken
        {
            get { if ((_hasBits0 & 32) != 0) { return transportSlotsTaken_; } else { return TransportSlotsTakenDefaultValue; } }
            set
            {
                _hasBits0 |= 32;
                transportSlotsTaken_ = value;
            }
        }
        /// <summary>Gets whether the "transport_slots_taken" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTransportSlotsTaken
        {
            get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "transport_slots_taken" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTransportSlotsTaken()
        {
            _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "build_progress" field.</summary>
        public const int BuildProgressFieldNumber = 7;
        private readonly static float BuildProgressDefaultValue = 0F;

        private float buildProgress_;
        /// <summary>
        /// Range: [0.0, 1.0]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float BuildProgress
        {
            get { if ((_hasBits0 & 64) != 0) { return buildProgress_; } else { return BuildProgressDefaultValue; } }
            set
            {
                _hasBits0 |= 64;
                buildProgress_ = value;
            }
        }
        /// <summary>Gets whether the "build_progress" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBuildProgress
        {
            get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "build_progress" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBuildProgress()
        {
            _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "add_on" field.</summary>
        public const int AddOnFieldNumber = 8;
        private global::SC2APIProtocol.UnitInfo addOn_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.UnitInfo AddOn
        {
            get { return addOn_; }
            set
            {
                addOn_ = value;
            }
        }
        /// <summary>Gets whether the add_on field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAddOn
        {
            get { return addOn_ != null; }
        }
        /// <summary>Clears the value of the add_on field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAddOn()
        {
            addOn_ = null;
        }

        /// <summary>Field number for the "max_health" field.</summary>
        public const int MaxHealthFieldNumber = 9;
        private readonly static int MaxHealthDefaultValue = 0;

        private int maxHealth_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxHealth
        {
            get { if ((_hasBits0 & 128) != 0) { return maxHealth_; } else { return MaxHealthDefaultValue; } }
            set
            {
                _hasBits0 |= 128;
                maxHealth_ = value;
            }
        }
        /// <summary>Gets whether the "max_health" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMaxHealth
        {
            get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "max_health" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMaxHealth()
        {
            _hasBits0 &= ~128;
        }

        /// <summary>Field number for the "max_shields" field.</summary>
        public const int MaxShieldsFieldNumber = 10;
        private readonly static int MaxShieldsDefaultValue = 0;

        private int maxShields_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxShields
        {
            get { if ((_hasBits0 & 256) != 0) { return maxShields_; } else { return MaxShieldsDefaultValue; } }
            set
            {
                _hasBits0 |= 256;
                maxShields_ = value;
            }
        }
        /// <summary>Gets whether the "max_shields" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMaxShields
        {
            get { return (_hasBits0 & 256) != 0; }
        }
        /// <summary>Clears the value of the "max_shields" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMaxShields()
        {
            _hasBits0 &= ~256;
        }

        /// <summary>Field number for the "max_energy" field.</summary>
        public const int MaxEnergyFieldNumber = 11;
        private readonly static int MaxEnergyDefaultValue = 0;

        private int maxEnergy_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxEnergy
        {
            get { if ((_hasBits0 & 512) != 0) { return maxEnergy_; } else { return MaxEnergyDefaultValue; } }
            set
            {
                _hasBits0 |= 512;
                maxEnergy_ = value;
            }
        }
        /// <summary>Gets whether the "max_energy" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMaxEnergy
        {
            get { return (_hasBits0 & 512) != 0; }
        }
        /// <summary>Clears the value of the "max_energy" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMaxEnergy()
        {
            _hasBits0 &= ~512;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as UnitInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UnitInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UnitType != other.UnitType) return false;
            if (PlayerRelative != other.PlayerRelative) return false;
            if (Health != other.Health) return false;
            if (Shields != other.Shields) return false;
            if (Energy != other.Energy) return false;
            if (TransportSlotsTaken != other.TransportSlotsTaken) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BuildProgress, other.BuildProgress)) return false;
            if (!object.Equals(AddOn, other.AddOn)) return false;
            if (MaxHealth != other.MaxHealth) return false;
            if (MaxShields != other.MaxShields) return false;
            if (MaxEnergy != other.MaxEnergy) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasUnitType) hash ^= UnitType.GetHashCode();
            if (HasPlayerRelative) hash ^= PlayerRelative.GetHashCode();
            if (HasHealth) hash ^= Health.GetHashCode();
            if (HasShields) hash ^= Shields.GetHashCode();
            if (HasEnergy) hash ^= Energy.GetHashCode();
            if (HasTransportSlotsTaken) hash ^= TransportSlotsTaken.GetHashCode();
            if (HasBuildProgress) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BuildProgress);
            if (HasAddOn) hash ^= AddOn.GetHashCode();
            if (HasMaxHealth) hash ^= MaxHealth.GetHashCode();
            if (HasMaxShields) hash ^= MaxShields.GetHashCode();
            if (HasMaxEnergy) hash ^= MaxEnergy.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasUnitType)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(UnitType);
            }
            if (HasPlayerRelative)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(PlayerRelative);
            }
            if (HasHealth)
            {
                output.WriteRawTag(24);
                output.WriteInt32(Health);
            }
            if (HasShields)
            {
                output.WriteRawTag(32);
                output.WriteInt32(Shields);
            }
            if (HasEnergy)
            {
                output.WriteRawTag(40);
                output.WriteInt32(Energy);
            }
            if (HasTransportSlotsTaken)
            {
                output.WriteRawTag(48);
                output.WriteInt32(TransportSlotsTaken);
            }
            if (HasBuildProgress)
            {
                output.WriteRawTag(61);
                output.WriteFloat(BuildProgress);
            }
            if (HasAddOn)
            {
                output.WriteRawTag(66);
                output.WriteMessage(AddOn);
            }
            if (HasMaxHealth)
            {
                output.WriteRawTag(72);
                output.WriteInt32(MaxHealth);
            }
            if (HasMaxShields)
            {
                output.WriteRawTag(80);
                output.WriteInt32(MaxShields);
            }
            if (HasMaxEnergy)
            {
                output.WriteRawTag(88);
                output.WriteInt32(MaxEnergy);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasUnitType)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnitType);
            }
            if (HasPlayerRelative)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerRelative);
            }
            if (HasHealth)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Health);
            }
            if (HasShields)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Shields);
            }
            if (HasEnergy)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Energy);
            }
            if (HasTransportSlotsTaken)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(TransportSlotsTaken);
            }
            if (HasBuildProgress)
            {
                size += 1 + 4;
            }
            if (HasAddOn)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddOn);
            }
            if (HasMaxHealth)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHealth);
            }
            if (HasMaxShields)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxShields);
            }
            if (HasMaxEnergy)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxEnergy);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UnitInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasUnitType)
            {
                UnitType = other.UnitType;
            }
            if (other.HasPlayerRelative)
            {
                PlayerRelative = other.PlayerRelative;
            }
            if (other.HasHealth)
            {
                Health = other.Health;
            }
            if (other.HasShields)
            {
                Shields = other.Shields;
            }
            if (other.HasEnergy)
            {
                Energy = other.Energy;
            }
            if (other.HasTransportSlotsTaken)
            {
                TransportSlotsTaken = other.TransportSlotsTaken;
            }
            if (other.HasBuildProgress)
            {
                BuildProgress = other.BuildProgress;
            }
            if (other.HasAddOn)
            {
                if (!HasAddOn)
                {
                    AddOn = new global::SC2APIProtocol.UnitInfo();
                }
                AddOn.MergeFrom(other.AddOn);
            }
            if (other.HasMaxHealth)
            {
                MaxHealth = other.MaxHealth;
            }
            if (other.HasMaxShields)
            {
                MaxShields = other.MaxShields;
            }
            if (other.HasMaxEnergy)
            {
                MaxEnergy = other.MaxEnergy;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            UnitType = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            PlayerRelative = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            Health = input.ReadInt32();
                            break;
                        }
                    case 32:
                        {
                            Shields = input.ReadInt32();
                            break;
                        }
                    case 40:
                        {
                            Energy = input.ReadInt32();
                            break;
                        }
                    case 48:
                        {
                            TransportSlotsTaken = input.ReadInt32();
                            break;
                        }
                    case 61:
                        {
                            BuildProgress = input.ReadFloat();
                            break;
                        }
                    case 66:
                        {
                            if (!HasAddOn)
                            {
                                AddOn = new global::SC2APIProtocol.UnitInfo();
                            }
                            input.ReadMessage(AddOn);
                            break;
                        }
                    case 72:
                        {
                            MaxHealth = input.ReadInt32();
                            break;
                        }
                    case 80:
                        {
                            MaxShields = input.ReadInt32();
                            break;
                        }
                    case 88:
                        {
                            MaxEnergy = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SinglePanel : pb::IMessage<SinglePanel>
    {
        private static readonly pb::MessageParser<SinglePanel> _parser = new pb::MessageParser<SinglePanel>(() => new SinglePanel());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SinglePanel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.UiReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SinglePanel()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SinglePanel(SinglePanel other) : this()
        {
            _hasBits0 = other._hasBits0;
            unit_ = other.HasUnit ? other.unit_.Clone() : null;
            attackUpgradeLevel_ = other.attackUpgradeLevel_;
            armorUpgradeLevel_ = other.armorUpgradeLevel_;
            shieldUpgradeLevel_ = other.shieldUpgradeLevel_;
            buffs_ = other.buffs_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SinglePanel Clone()
        {
            return new SinglePanel(this);
        }

        /// <summary>Field number for the "unit" field.</summary>
        public const int UnitFieldNumber = 1;
        private global::SC2APIProtocol.UnitInfo unit_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.UnitInfo Unit
        {
            get { return unit_; }
            set
            {
                unit_ = value;
            }
        }
        /// <summary>Gets whether the unit field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnit
        {
            get { return unit_ != null; }
        }
        /// <summary>Clears the value of the unit field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnit()
        {
            unit_ = null;
        }

        /// <summary>Field number for the "attack_upgrade_level" field.</summary>
        public const int AttackUpgradeLevelFieldNumber = 2;
        private readonly static int AttackUpgradeLevelDefaultValue = 0;

        private int attackUpgradeLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AttackUpgradeLevel
        {
            get { if ((_hasBits0 & 1) != 0) { return attackUpgradeLevel_; } else { return AttackUpgradeLevelDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                attackUpgradeLevel_ = value;
            }
        }
        /// <summary>Gets whether the "attack_upgrade_level" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAttackUpgradeLevel
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "attack_upgrade_level" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAttackUpgradeLevel()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "armor_upgrade_level" field.</summary>
        public const int ArmorUpgradeLevelFieldNumber = 3;
        private readonly static int ArmorUpgradeLevelDefaultValue = 0;

        private int armorUpgradeLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ArmorUpgradeLevel
        {
            get { if ((_hasBits0 & 2) != 0) { return armorUpgradeLevel_; } else { return ArmorUpgradeLevelDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                armorUpgradeLevel_ = value;
            }
        }
        /// <summary>Gets whether the "armor_upgrade_level" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasArmorUpgradeLevel
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "armor_upgrade_level" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearArmorUpgradeLevel()
        {
            _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "shield_upgrade_level" field.</summary>
        public const int ShieldUpgradeLevelFieldNumber = 4;
        private readonly static int ShieldUpgradeLevelDefaultValue = 0;

        private int shieldUpgradeLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ShieldUpgradeLevel
        {
            get { if ((_hasBits0 & 4) != 0) { return shieldUpgradeLevel_; } else { return ShieldUpgradeLevelDefaultValue; } }
            set
            {
                _hasBits0 |= 4;
                shieldUpgradeLevel_ = value;
            }
        }
        /// <summary>Gets whether the "shield_upgrade_level" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasShieldUpgradeLevel
        {
            get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "shield_upgrade_level" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearShieldUpgradeLevel()
        {
            _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "buffs" field.</summary>
        public const int BuffsFieldNumber = 5;
        private static readonly pb::FieldCodec<int> _repeated_buffs_codec
            = pb::FieldCodec.ForInt32(40);
        private readonly pbc::RepeatedField<int> buffs_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> Buffs
        {
            get { return buffs_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SinglePanel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SinglePanel other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Unit, other.Unit)) return false;
            if (AttackUpgradeLevel != other.AttackUpgradeLevel) return false;
            if (ArmorUpgradeLevel != other.ArmorUpgradeLevel) return false;
            if (ShieldUpgradeLevel != other.ShieldUpgradeLevel) return false;
            if (!buffs_.Equals(other.buffs_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasUnit) hash ^= Unit.GetHashCode();
            if (HasAttackUpgradeLevel) hash ^= AttackUpgradeLevel.GetHashCode();
            if (HasArmorUpgradeLevel) hash ^= ArmorUpgradeLevel.GetHashCode();
            if (HasShieldUpgradeLevel) hash ^= ShieldUpgradeLevel.GetHashCode();
            hash ^= buffs_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasUnit)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Unit);
            }
            if (HasAttackUpgradeLevel)
            {
                output.WriteRawTag(16);
                output.WriteInt32(AttackUpgradeLevel);
            }
            if (HasArmorUpgradeLevel)
            {
                output.WriteRawTag(24);
                output.WriteInt32(ArmorUpgradeLevel);
            }
            if (HasShieldUpgradeLevel)
            {
                output.WriteRawTag(32);
                output.WriteInt32(ShieldUpgradeLevel);
            }
            buffs_.WriteTo(output, _repeated_buffs_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasUnit)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Unit);
            }
            if (HasAttackUpgradeLevel)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackUpgradeLevel);
            }
            if (HasArmorUpgradeLevel)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArmorUpgradeLevel);
            }
            if (HasShieldUpgradeLevel)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShieldUpgradeLevel);
            }
            size += buffs_.CalculateSize(_repeated_buffs_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SinglePanel other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasUnit)
            {
                if (!HasUnit)
                {
                    Unit = new global::SC2APIProtocol.UnitInfo();
                }
                Unit.MergeFrom(other.Unit);
            }
            if (other.HasAttackUpgradeLevel)
            {
                AttackUpgradeLevel = other.AttackUpgradeLevel;
            }
            if (other.HasArmorUpgradeLevel)
            {
                ArmorUpgradeLevel = other.ArmorUpgradeLevel;
            }
            if (other.HasShieldUpgradeLevel)
            {
                ShieldUpgradeLevel = other.ShieldUpgradeLevel;
            }
            buffs_.Add(other.buffs_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (!HasUnit)
                            {
                                Unit = new global::SC2APIProtocol.UnitInfo();
                            }
                            input.ReadMessage(Unit);
                            break;
                        }
                    case 16:
                        {
                            AttackUpgradeLevel = input.ReadInt32();
                            break;
                        }
                    case 24:
                        {
                            ArmorUpgradeLevel = input.ReadInt32();
                            break;
                        }
                    case 32:
                        {
                            ShieldUpgradeLevel = input.ReadInt32();
                            break;
                        }
                    case 42:
                    case 40:
                        {
                            buffs_.AddEntriesFrom(input, _repeated_buffs_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class MultiPanel : pb::IMessage<MultiPanel>
    {
        private static readonly pb::MessageParser<MultiPanel> _parser = new pb::MessageParser<MultiPanel>(() => new MultiPanel());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MultiPanel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.UiReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MultiPanel()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MultiPanel(MultiPanel other) : this()
        {
            units_ = other.units_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MultiPanel Clone()
        {
            return new MultiPanel(this);
        }

        /// <summary>Field number for the "units" field.</summary>
        public const int UnitsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.UnitInfo> _repeated_units_codec
            = pb::FieldCodec.ForMessage(10, global::SC2APIProtocol.UnitInfo.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.UnitInfo> units_ = new pbc::RepeatedField<global::SC2APIProtocol.UnitInfo>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.UnitInfo> Units
        {
            get { return units_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as MultiPanel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MultiPanel other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!units_.Equals(other.units_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= units_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            units_.WriteTo(output, _repeated_units_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += units_.CalculateSize(_repeated_units_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MultiPanel other)
        {
            if (other == null)
            {
                return;
            }
            units_.Add(other.units_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            units_.AddEntriesFrom(input, _repeated_units_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class CargoPanel : pb::IMessage<CargoPanel>
    {
        private static readonly pb::MessageParser<CargoPanel> _parser = new pb::MessageParser<CargoPanel>(() => new CargoPanel());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CargoPanel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.UiReflection.Descriptor.MessageTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CargoPanel()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CargoPanel(CargoPanel other) : this()
        {
            _hasBits0 = other._hasBits0;
            unit_ = other.HasUnit ? other.unit_.Clone() : null;
            passengers_ = other.passengers_.Clone();
            slotsAvailable_ = other.slotsAvailable_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CargoPanel Clone()
        {
            return new CargoPanel(this);
        }

        /// <summary>Field number for the "unit" field.</summary>
        public const int UnitFieldNumber = 1;
        private global::SC2APIProtocol.UnitInfo unit_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.UnitInfo Unit
        {
            get { return unit_; }
            set
            {
                unit_ = value;
            }
        }
        /// <summary>Gets whether the unit field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnit
        {
            get { return unit_ != null; }
        }
        /// <summary>Clears the value of the unit field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnit()
        {
            unit_ = null;
        }

        /// <summary>Field number for the "passengers" field.</summary>
        public const int PassengersFieldNumber = 2;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.UnitInfo> _repeated_passengers_codec
            = pb::FieldCodec.ForMessage(18, global::SC2APIProtocol.UnitInfo.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.UnitInfo> passengers_ = new pbc::RepeatedField<global::SC2APIProtocol.UnitInfo>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.UnitInfo> Passengers
        {
            get { return passengers_; }
        }

        /// <summary>Field number for the "slots_available" field.</summary>
        public const int SlotsAvailableFieldNumber = 3;
        private readonly static int SlotsAvailableDefaultValue = 0;

        private int slotsAvailable_;
        /// <summary>
        /// TODO: Change to cargo size
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SlotsAvailable
        {
            get { if ((_hasBits0 & 1) != 0) { return slotsAvailable_; } else { return SlotsAvailableDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                slotsAvailable_ = value;
            }
        }
        /// <summary>Gets whether the "slots_available" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSlotsAvailable
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "slots_available" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSlotsAvailable()
        {
            _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CargoPanel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CargoPanel other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Unit, other.Unit)) return false;
            if (!passengers_.Equals(other.passengers_)) return false;
            if (SlotsAvailable != other.SlotsAvailable) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasUnit) hash ^= Unit.GetHashCode();
            hash ^= passengers_.GetHashCode();
            if (HasSlotsAvailable) hash ^= SlotsAvailable.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasUnit)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Unit);
            }
            passengers_.WriteTo(output, _repeated_passengers_codec);
            if (HasSlotsAvailable)
            {
                output.WriteRawTag(24);
                output.WriteInt32(SlotsAvailable);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasUnit)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Unit);
            }
            size += passengers_.CalculateSize(_repeated_passengers_codec);
            if (HasSlotsAvailable)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotsAvailable);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CargoPanel other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasUnit)
            {
                if (!HasUnit)
                {
                    Unit = new global::SC2APIProtocol.UnitInfo();
                }
                Unit.MergeFrom(other.Unit);
            }
            passengers_.Add(other.passengers_);
            if (other.HasSlotsAvailable)
            {
                SlotsAvailable = other.SlotsAvailable;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (!HasUnit)
                            {
                                Unit = new global::SC2APIProtocol.UnitInfo();
                            }
                            input.ReadMessage(Unit);
                            break;
                        }
                    case 18:
                        {
                            passengers_.AddEntriesFrom(input, _repeated_passengers_codec);
                            break;
                        }
                    case 24:
                        {
                            SlotsAvailable = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class BuildItem : pb::IMessage<BuildItem>
    {
        private static readonly pb::MessageParser<BuildItem> _parser = new pb::MessageParser<BuildItem>(() => new BuildItem());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BuildItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.UiReflection.Descriptor.MessageTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BuildItem()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BuildItem(BuildItem other) : this()
        {
            _hasBits0 = other._hasBits0;
            abilityId_ = other.abilityId_;
            buildProgress_ = other.buildProgress_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BuildItem Clone()
        {
            return new BuildItem(this);
        }

        /// <summary>Field number for the "ability_id" field.</summary>
        public const int AbilityIdFieldNumber = 1;
        private readonly static uint AbilityIdDefaultValue = 0;

        private uint abilityId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AbilityId
        {
            get { if ((_hasBits0 & 1) != 0) { return abilityId_; } else { return AbilityIdDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                abilityId_ = value;
            }
        }
        /// <summary>Gets whether the "ability_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAbilityId
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "ability_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAbilityId()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "build_progress" field.</summary>
        public const int BuildProgressFieldNumber = 2;
        private readonly static float BuildProgressDefaultValue = 0F;

        private float buildProgress_;
        /// <summary>
        /// Range: [0.0, 1.0]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float BuildProgress
        {
            get { if ((_hasBits0 & 2) != 0) { return buildProgress_; } else { return BuildProgressDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                buildProgress_ = value;
            }
        }
        /// <summary>Gets whether the "build_progress" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBuildProgress
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "build_progress" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBuildProgress()
        {
            _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as BuildItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BuildItem other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (AbilityId != other.AbilityId) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BuildProgress, other.BuildProgress)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasAbilityId) hash ^= AbilityId.GetHashCode();
            if (HasBuildProgress) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BuildProgress);
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasAbilityId)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(AbilityId);
            }
            if (HasBuildProgress)
            {
                output.WriteRawTag(21);
                output.WriteFloat(BuildProgress);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasAbilityId)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AbilityId);
            }
            if (HasBuildProgress)
            {
                size += 1 + 4;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BuildItem other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasAbilityId)
            {
                AbilityId = other.AbilityId;
            }
            if (other.HasBuildProgress)
            {
                BuildProgress = other.BuildProgress;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            AbilityId = input.ReadUInt32();
                            break;
                        }
                    case 21:
                        {
                            BuildProgress = input.ReadFloat();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ProductionPanel : pb::IMessage<ProductionPanel>
    {
        private static readonly pb::MessageParser<ProductionPanel> _parser = new pb::MessageParser<ProductionPanel>(() => new ProductionPanel());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ProductionPanel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.UiReflection.Descriptor.MessageTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ProductionPanel()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ProductionPanel(ProductionPanel other) : this()
        {
            unit_ = other.HasUnit ? other.unit_.Clone() : null;
            buildQueue_ = other.buildQueue_.Clone();
            productionQueue_ = other.productionQueue_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ProductionPanel Clone()
        {
            return new ProductionPanel(this);
        }

        /// <summary>Field number for the "unit" field.</summary>
        public const int UnitFieldNumber = 1;
        private global::SC2APIProtocol.UnitInfo unit_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.UnitInfo Unit
        {
            get { return unit_; }
            set
            {
                unit_ = value;
            }
        }
        /// <summary>Gets whether the unit field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnit
        {
            get { return unit_ != null; }
        }
        /// <summary>Clears the value of the unit field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnit()
        {
            unit_ = null;
        }

        /// <summary>Field number for the "build_queue" field.</summary>
        public const int BuildQueueFieldNumber = 2;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.UnitInfo> _repeated_buildQueue_codec
            = pb::FieldCodec.ForMessage(18, global::SC2APIProtocol.UnitInfo.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.UnitInfo> buildQueue_ = new pbc::RepeatedField<global::SC2APIProtocol.UnitInfo>();
        /// <summary>
        /// build_queue ONLY gives information about units that are being produced.
        /// Use production_queue instead to see both units being trained as well as research in the queue.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.UnitInfo> BuildQueue
        {
            get { return buildQueue_; }
        }

        /// <summary>Field number for the "production_queue" field.</summary>
        public const int ProductionQueueFieldNumber = 3;
        private static readonly pb::FieldCodec<global::SC2APIProtocol.BuildItem> _repeated_productionQueue_codec
            = pb::FieldCodec.ForMessage(26, global::SC2APIProtocol.BuildItem.Parser);
        private readonly pbc::RepeatedField<global::SC2APIProtocol.BuildItem> productionQueue_ = new pbc::RepeatedField<global::SC2APIProtocol.BuildItem>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SC2APIProtocol.BuildItem> ProductionQueue
        {
            get { return productionQueue_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ProductionPanel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ProductionPanel other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Unit, other.Unit)) return false;
            if (!buildQueue_.Equals(other.buildQueue_)) return false;
            if (!productionQueue_.Equals(other.productionQueue_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasUnit) hash ^= Unit.GetHashCode();
            hash ^= buildQueue_.GetHashCode();
            hash ^= productionQueue_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasUnit)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Unit);
            }
            buildQueue_.WriteTo(output, _repeated_buildQueue_codec);
            productionQueue_.WriteTo(output, _repeated_productionQueue_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasUnit)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Unit);
            }
            size += buildQueue_.CalculateSize(_repeated_buildQueue_codec);
            size += productionQueue_.CalculateSize(_repeated_productionQueue_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ProductionPanel other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasUnit)
            {
                if (!HasUnit)
                {
                    Unit = new global::SC2APIProtocol.UnitInfo();
                }
                Unit.MergeFrom(other.Unit);
            }
            buildQueue_.Add(other.buildQueue_);
            productionQueue_.Add(other.productionQueue_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (!HasUnit)
                            {
                                Unit = new global::SC2APIProtocol.UnitInfo();
                            }
                            input.ReadMessage(Unit);
                            break;
                        }
                    case 18:
                        {
                            buildQueue_.AddEntriesFrom(input, _repeated_buildQueue_codec);
                            break;
                        }
                    case 26:
                        {
                            productionQueue_.AddEntriesFrom(input, _repeated_productionQueue_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ActionUI : pb::IMessage<ActionUI>
    {
        private static readonly pb::MessageParser<ActionUI> _parser = new pb::MessageParser<ActionUI>(() => new ActionUI());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActionUI> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.UiReflection.Descriptor.MessageTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionUI()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionUI(ActionUI other) : this()
        {
            switch (other.ActionCase)
            {
                case ActionOneofCase.ControlGroup:
                    ControlGroup = other.ControlGroup.Clone();
                    break;
                case ActionOneofCase.SelectArmy:
                    SelectArmy = other.SelectArmy.Clone();
                    break;
                case ActionOneofCase.SelectWarpGates:
                    SelectWarpGates = other.SelectWarpGates.Clone();
                    break;
                case ActionOneofCase.SelectLarva:
                    SelectLarva = other.SelectLarva.Clone();
                    break;
                case ActionOneofCase.SelectIdleWorker:
                    SelectIdleWorker = other.SelectIdleWorker.Clone();
                    break;
                case ActionOneofCase.MultiPanel:
                    MultiPanel = other.MultiPanel.Clone();
                    break;
                case ActionOneofCase.CargoPanel:
                    CargoPanel = other.CargoPanel.Clone();
                    break;
                case ActionOneofCase.ProductionPanel:
                    ProductionPanel = other.ProductionPanel.Clone();
                    break;
                case ActionOneofCase.ToggleAutocast:
                    ToggleAutocast = other.ToggleAutocast.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionUI Clone()
        {
            return new ActionUI(this);
        }

        /// <summary>Field number for the "control_group" field.</summary>
        public const int ControlGroupFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ActionControlGroup ControlGroup
        {
            get { return HasControlGroup ? (global::SC2APIProtocol.ActionControlGroup)action_ : null; }
            set
            {
                action_ = value;
                actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.ControlGroup;
            }
        }
        /// <summary>Gets whether the "control_group" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasControlGroup
        {
            get { return actionCase_ == ActionOneofCase.ControlGroup; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "control_group" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearControlGroup()
        {
            if (HasControlGroup)
            {
                ClearAction();
            }
        }

        /// <summary>Field number for the "select_army" field.</summary>
        public const int SelectArmyFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ActionSelectArmy SelectArmy
        {
            get { return HasSelectArmy ? (global::SC2APIProtocol.ActionSelectArmy)action_ : null; }
            set
            {
                action_ = value;
                actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.SelectArmy;
            }
        }
        /// <summary>Gets whether the "select_army" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSelectArmy
        {
            get { return actionCase_ == ActionOneofCase.SelectArmy; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "select_army" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSelectArmy()
        {
            if (HasSelectArmy)
            {
                ClearAction();
            }
        }

        /// <summary>Field number for the "select_warp_gates" field.</summary>
        public const int SelectWarpGatesFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ActionSelectWarpGates SelectWarpGates
        {
            get { return HasSelectWarpGates ? (global::SC2APIProtocol.ActionSelectWarpGates)action_ : null; }
            set
            {
                action_ = value;
                actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.SelectWarpGates;
            }
        }
        /// <summary>Gets whether the "select_warp_gates" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSelectWarpGates
        {
            get { return actionCase_ == ActionOneofCase.SelectWarpGates; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "select_warp_gates" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSelectWarpGates()
        {
            if (HasSelectWarpGates)
            {
                ClearAction();
            }
        }

        /// <summary>Field number for the "select_larva" field.</summary>
        public const int SelectLarvaFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ActionSelectLarva SelectLarva
        {
            get { return HasSelectLarva ? (global::SC2APIProtocol.ActionSelectLarva)action_ : null; }
            set
            {
                action_ = value;
                actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.SelectLarva;
            }
        }
        /// <summary>Gets whether the "select_larva" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSelectLarva
        {
            get { return actionCase_ == ActionOneofCase.SelectLarva; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "select_larva" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSelectLarva()
        {
            if (HasSelectLarva)
            {
                ClearAction();
            }
        }

        /// <summary>Field number for the "select_idle_worker" field.</summary>
        public const int SelectIdleWorkerFieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ActionSelectIdleWorker SelectIdleWorker
        {
            get { return HasSelectIdleWorker ? (global::SC2APIProtocol.ActionSelectIdleWorker)action_ : null; }
            set
            {
                action_ = value;
                actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.SelectIdleWorker;
            }
        }
        /// <summary>Gets whether the "select_idle_worker" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSelectIdleWorker
        {
            get { return actionCase_ == ActionOneofCase.SelectIdleWorker; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "select_idle_worker" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSelectIdleWorker()
        {
            if (HasSelectIdleWorker)
            {
                ClearAction();
            }
        }

        /// <summary>Field number for the "multi_panel" field.</summary>
        public const int MultiPanelFieldNumber = 6;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ActionMultiPanel MultiPanel
        {
            get { return HasMultiPanel ? (global::SC2APIProtocol.ActionMultiPanel)action_ : null; }
            set
            {
                action_ = value;
                actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.MultiPanel;
            }
        }
        /// <summary>Gets whether the "multi_panel" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMultiPanel
        {
            get { return actionCase_ == ActionOneofCase.MultiPanel; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "multi_panel" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMultiPanel()
        {
            if (HasMultiPanel)
            {
                ClearAction();
            }
        }

        /// <summary>Field number for the "cargo_panel" field.</summary>
        public const int CargoPanelFieldNumber = 7;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ActionCargoPanelUnload CargoPanel
        {
            get { return HasCargoPanel ? (global::SC2APIProtocol.ActionCargoPanelUnload)action_ : null; }
            set
            {
                action_ = value;
                actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.CargoPanel;
            }
        }
        /// <summary>Gets whether the "cargo_panel" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCargoPanel
        {
            get { return actionCase_ == ActionOneofCase.CargoPanel; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "cargo_panel" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCargoPanel()
        {
            if (HasCargoPanel)
            {
                ClearAction();
            }
        }

        /// <summary>Field number for the "production_panel" field.</summary>
        public const int ProductionPanelFieldNumber = 8;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ActionProductionPanelRemoveFromQueue ProductionPanel
        {
            get { return HasProductionPanel ? (global::SC2APIProtocol.ActionProductionPanelRemoveFromQueue)action_ : null; }
            set
            {
                action_ = value;
                actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.ProductionPanel;
            }
        }
        /// <summary>Gets whether the "production_panel" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasProductionPanel
        {
            get { return actionCase_ == ActionOneofCase.ProductionPanel; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "production_panel" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearProductionPanel()
        {
            if (HasProductionPanel)
            {
                ClearAction();
            }
        }

        /// <summary>Field number for the "toggle_autocast" field.</summary>
        public const int ToggleAutocastFieldNumber = 9;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ActionToggleAutocast ToggleAutocast
        {
            get { return HasToggleAutocast ? (global::SC2APIProtocol.ActionToggleAutocast)action_ : null; }
            set
            {
                action_ = value;
                actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.ToggleAutocast;
            }
        }
        /// <summary>Gets whether the "toggle_autocast" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasToggleAutocast
        {
            get { return actionCase_ == ActionOneofCase.ToggleAutocast; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "toggle_autocast" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearToggleAutocast()
        {
            if (HasToggleAutocast)
            {
                ClearAction();
            }
        }

        private object action_;
        /// <summary>Enum of possible cases for the "action" oneof.</summary>
        public enum ActionOneofCase
        {
            None = 0,
            ControlGroup = 1,
            SelectArmy = 2,
            SelectWarpGates = 3,
            SelectLarva = 4,
            SelectIdleWorker = 5,
            MultiPanel = 6,
            CargoPanel = 7,
            ProductionPanel = 8,
            ToggleAutocast = 9,
        }
        private ActionOneofCase actionCase_ = ActionOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionOneofCase ActionCase
        {
            get { return actionCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAction()
        {
            actionCase_ = ActionOneofCase.None;
            action_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ActionUI);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActionUI other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(ControlGroup, other.ControlGroup)) return false;
            if (!object.Equals(SelectArmy, other.SelectArmy)) return false;
            if (!object.Equals(SelectWarpGates, other.SelectWarpGates)) return false;
            if (!object.Equals(SelectLarva, other.SelectLarva)) return false;
            if (!object.Equals(SelectIdleWorker, other.SelectIdleWorker)) return false;
            if (!object.Equals(MultiPanel, other.MultiPanel)) return false;
            if (!object.Equals(CargoPanel, other.CargoPanel)) return false;
            if (!object.Equals(ProductionPanel, other.ProductionPanel)) return false;
            if (!object.Equals(ToggleAutocast, other.ToggleAutocast)) return false;
            if (ActionCase != other.ActionCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasControlGroup) hash ^= ControlGroup.GetHashCode();
            if (HasSelectArmy) hash ^= SelectArmy.GetHashCode();
            if (HasSelectWarpGates) hash ^= SelectWarpGates.GetHashCode();
            if (HasSelectLarva) hash ^= SelectLarva.GetHashCode();
            if (HasSelectIdleWorker) hash ^= SelectIdleWorker.GetHashCode();
            if (HasMultiPanel) hash ^= MultiPanel.GetHashCode();
            if (HasCargoPanel) hash ^= CargoPanel.GetHashCode();
            if (HasProductionPanel) hash ^= ProductionPanel.GetHashCode();
            if (HasToggleAutocast) hash ^= ToggleAutocast.GetHashCode();
            hash ^= (int)actionCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasControlGroup)
            {
                output.WriteRawTag(10);
                output.WriteMessage(ControlGroup);
            }
            if (HasSelectArmy)
            {
                output.WriteRawTag(18);
                output.WriteMessage(SelectArmy);
            }
            if (HasSelectWarpGates)
            {
                output.WriteRawTag(26);
                output.WriteMessage(SelectWarpGates);
            }
            if (HasSelectLarva)
            {
                output.WriteRawTag(34);
                output.WriteMessage(SelectLarva);
            }
            if (HasSelectIdleWorker)
            {
                output.WriteRawTag(42);
                output.WriteMessage(SelectIdleWorker);
            }
            if (HasMultiPanel)
            {
                output.WriteRawTag(50);
                output.WriteMessage(MultiPanel);
            }
            if (HasCargoPanel)
            {
                output.WriteRawTag(58);
                output.WriteMessage(CargoPanel);
            }
            if (HasProductionPanel)
            {
                output.WriteRawTag(66);
                output.WriteMessage(ProductionPanel);
            }
            if (HasToggleAutocast)
            {
                output.WriteRawTag(74);
                output.WriteMessage(ToggleAutocast);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasControlGroup)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ControlGroup);
            }
            if (HasSelectArmy)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectArmy);
            }
            if (HasSelectWarpGates)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectWarpGates);
            }
            if (HasSelectLarva)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectLarva);
            }
            if (HasSelectIdleWorker)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectIdleWorker);
            }
            if (HasMultiPanel)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(MultiPanel);
            }
            if (HasCargoPanel)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CargoPanel);
            }
            if (HasProductionPanel)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProductionPanel);
            }
            if (HasToggleAutocast)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ToggleAutocast);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActionUI other)
        {
            if (other == null)
            {
                return;
            }
            switch (other.ActionCase)
            {
                case ActionOneofCase.ControlGroup:
                    if (ControlGroup == null)
                    {
                        ControlGroup = new global::SC2APIProtocol.ActionControlGroup();
                    }
                    ControlGroup.MergeFrom(other.ControlGroup);
                    break;
                case ActionOneofCase.SelectArmy:
                    if (SelectArmy == null)
                    {
                        SelectArmy = new global::SC2APIProtocol.ActionSelectArmy();
                    }
                    SelectArmy.MergeFrom(other.SelectArmy);
                    break;
                case ActionOneofCase.SelectWarpGates:
                    if (SelectWarpGates == null)
                    {
                        SelectWarpGates = new global::SC2APIProtocol.ActionSelectWarpGates();
                    }
                    SelectWarpGates.MergeFrom(other.SelectWarpGates);
                    break;
                case ActionOneofCase.SelectLarva:
                    if (SelectLarva == null)
                    {
                        SelectLarva = new global::SC2APIProtocol.ActionSelectLarva();
                    }
                    SelectLarva.MergeFrom(other.SelectLarva);
                    break;
                case ActionOneofCase.SelectIdleWorker:
                    if (SelectIdleWorker == null)
                    {
                        SelectIdleWorker = new global::SC2APIProtocol.ActionSelectIdleWorker();
                    }
                    SelectIdleWorker.MergeFrom(other.SelectIdleWorker);
                    break;
                case ActionOneofCase.MultiPanel:
                    if (MultiPanel == null)
                    {
                        MultiPanel = new global::SC2APIProtocol.ActionMultiPanel();
                    }
                    MultiPanel.MergeFrom(other.MultiPanel);
                    break;
                case ActionOneofCase.CargoPanel:
                    if (CargoPanel == null)
                    {
                        CargoPanel = new global::SC2APIProtocol.ActionCargoPanelUnload();
                    }
                    CargoPanel.MergeFrom(other.CargoPanel);
                    break;
                case ActionOneofCase.ProductionPanel:
                    if (ProductionPanel == null)
                    {
                        ProductionPanel = new global::SC2APIProtocol.ActionProductionPanelRemoveFromQueue();
                    }
                    ProductionPanel.MergeFrom(other.ProductionPanel);
                    break;
                case ActionOneofCase.ToggleAutocast:
                    if (ToggleAutocast == null)
                    {
                        ToggleAutocast = new global::SC2APIProtocol.ActionToggleAutocast();
                    }
                    ToggleAutocast.MergeFrom(other.ToggleAutocast);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            global::SC2APIProtocol.ActionControlGroup subBuilder = new global::SC2APIProtocol.ActionControlGroup();
                            if (HasControlGroup)
                            {
                                subBuilder.MergeFrom(ControlGroup);
                            }
                            input.ReadMessage(subBuilder);
                            ControlGroup = subBuilder;
                            break;
                        }
                    case 18:
                        {
                            global::SC2APIProtocol.ActionSelectArmy subBuilder = new global::SC2APIProtocol.ActionSelectArmy();
                            if (HasSelectArmy)
                            {
                                subBuilder.MergeFrom(SelectArmy);
                            }
                            input.ReadMessage(subBuilder);
                            SelectArmy = subBuilder;
                            break;
                        }
                    case 26:
                        {
                            global::SC2APIProtocol.ActionSelectWarpGates subBuilder = new global::SC2APIProtocol.ActionSelectWarpGates();
                            if (HasSelectWarpGates)
                            {
                                subBuilder.MergeFrom(SelectWarpGates);
                            }
                            input.ReadMessage(subBuilder);
                            SelectWarpGates = subBuilder;
                            break;
                        }
                    case 34:
                        {
                            global::SC2APIProtocol.ActionSelectLarva subBuilder = new global::SC2APIProtocol.ActionSelectLarva();
                            if (HasSelectLarva)
                            {
                                subBuilder.MergeFrom(SelectLarva);
                            }
                            input.ReadMessage(subBuilder);
                            SelectLarva = subBuilder;
                            break;
                        }
                    case 42:
                        {
                            global::SC2APIProtocol.ActionSelectIdleWorker subBuilder = new global::SC2APIProtocol.ActionSelectIdleWorker();
                            if (HasSelectIdleWorker)
                            {
                                subBuilder.MergeFrom(SelectIdleWorker);
                            }
                            input.ReadMessage(subBuilder);
                            SelectIdleWorker = subBuilder;
                            break;
                        }
                    case 50:
                        {
                            global::SC2APIProtocol.ActionMultiPanel subBuilder = new global::SC2APIProtocol.ActionMultiPanel();
                            if (HasMultiPanel)
                            {
                                subBuilder.MergeFrom(MultiPanel);
                            }
                            input.ReadMessage(subBuilder);
                            MultiPanel = subBuilder;
                            break;
                        }
                    case 58:
                        {
                            global::SC2APIProtocol.ActionCargoPanelUnload subBuilder = new global::SC2APIProtocol.ActionCargoPanelUnload();
                            if (HasCargoPanel)
                            {
                                subBuilder.MergeFrom(CargoPanel);
                            }
                            input.ReadMessage(subBuilder);
                            CargoPanel = subBuilder;
                            break;
                        }
                    case 66:
                        {
                            global::SC2APIProtocol.ActionProductionPanelRemoveFromQueue subBuilder = new global::SC2APIProtocol.ActionProductionPanelRemoveFromQueue();
                            if (HasProductionPanel)
                            {
                                subBuilder.MergeFrom(ProductionPanel);
                            }
                            input.ReadMessage(subBuilder);
                            ProductionPanel = subBuilder;
                            break;
                        }
                    case 74:
                        {
                            global::SC2APIProtocol.ActionToggleAutocast subBuilder = new global::SC2APIProtocol.ActionToggleAutocast();
                            if (HasToggleAutocast)
                            {
                                subBuilder.MergeFrom(ToggleAutocast);
                            }
                            input.ReadMessage(subBuilder);
                            ToggleAutocast = subBuilder;
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ActionControlGroup : pb::IMessage<ActionControlGroup>
    {
        private static readonly pb::MessageParser<ActionControlGroup> _parser = new pb::MessageParser<ActionControlGroup>(() => new ActionControlGroup());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActionControlGroup> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.UiReflection.Descriptor.MessageTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionControlGroup()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionControlGroup(ActionControlGroup other) : this()
        {
            _hasBits0 = other._hasBits0;
            action_ = other.action_;
            controlGroupIndex_ = other.controlGroupIndex_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionControlGroup Clone()
        {
            return new ActionControlGroup(this);
        }

        /// <summary>Field number for the "action" field.</summary>
        public const int ActionFieldNumber = 1;
        private readonly static global::SC2APIProtocol.ActionControlGroup.Types.ControlGroupAction ActionDefaultValue = global::SC2APIProtocol.ActionControlGroup.Types.ControlGroupAction.Recall;

        private global::SC2APIProtocol.ActionControlGroup.Types.ControlGroupAction action_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ActionControlGroup.Types.ControlGroupAction Action
        {
            get { if ((_hasBits0 & 1) != 0) { return action_; } else { return ActionDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                action_ = value;
            }
        }
        /// <summary>Gets whether the "action" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAction
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "action" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAction()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "control_group_index" field.</summary>
        public const int ControlGroupIndexFieldNumber = 2;
        private readonly static uint ControlGroupIndexDefaultValue = 0;

        private uint controlGroupIndex_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ControlGroupIndex
        {
            get { if ((_hasBits0 & 2) != 0) { return controlGroupIndex_; } else { return ControlGroupIndexDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                controlGroupIndex_ = value;
            }
        }
        /// <summary>Gets whether the "control_group_index" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasControlGroupIndex
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "control_group_index" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearControlGroupIndex()
        {
            _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ActionControlGroup);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActionControlGroup other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Action != other.Action) return false;
            if (ControlGroupIndex != other.ControlGroupIndex) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasAction) hash ^= Action.GetHashCode();
            if (HasControlGroupIndex) hash ^= ControlGroupIndex.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasAction)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Action);
            }
            if (HasControlGroupIndex)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(ControlGroupIndex);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasAction)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Action);
            }
            if (HasControlGroupIndex)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ControlGroupIndex);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActionControlGroup other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasAction)
            {
                Action = other.Action;
            }
            if (other.HasControlGroupIndex)
            {
                ControlGroupIndex = other.ControlGroupIndex;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Action = (global::SC2APIProtocol.ActionControlGroup.Types.ControlGroupAction)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            ControlGroupIndex = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ActionControlGroup message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum ControlGroupAction
            {
                /// <summary>
                /// Equivalent to number hotkey. Replaces current selection with control group.
                /// </summary>
                [pbr::OriginalName("Recall")] Recall = 1,
                /// <summary>
                /// Equivalent to Control + number hotkey. Sets control group to current selection.
                /// </summary>
                [pbr::OriginalName("Set")] Set = 2,
                /// <summary>
                /// Equivalent to Shift + number hotkey. Adds current selection into control group.
                /// </summary>
                [pbr::OriginalName("Append")] Append = 3,
                /// <summary>
                /// Equivalent to Control + Alt + number hotkey. Sets control group to current selection. Units are removed from other control groups.
                /// </summary>
                [pbr::OriginalName("SetAndSteal")] SetAndSteal = 4,
                /// <summary>
                /// Equivalent to Shift + Alt + number hotkey. Adds current selection into control group. Units are removed from other control groups.
                /// </summary>
                [pbr::OriginalName("AppendAndSteal")] AppendAndSteal = 5,
            }

        }
        #endregion

    }

    public sealed partial class ActionSelectArmy : pb::IMessage<ActionSelectArmy>
    {
        private static readonly pb::MessageParser<ActionSelectArmy> _parser = new pb::MessageParser<ActionSelectArmy>(() => new ActionSelectArmy());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActionSelectArmy> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.UiReflection.Descriptor.MessageTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionSelectArmy()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionSelectArmy(ActionSelectArmy other) : this()
        {
            _hasBits0 = other._hasBits0;
            selectionAdd_ = other.selectionAdd_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionSelectArmy Clone()
        {
            return new ActionSelectArmy(this);
        }

        /// <summary>Field number for the "selection_add" field.</summary>
        public const int SelectionAddFieldNumber = 1;
        private readonly static bool SelectionAddDefaultValue = false;

        private bool selectionAdd_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool SelectionAdd
        {
            get { if ((_hasBits0 & 1) != 0) { return selectionAdd_; } else { return SelectionAddDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                selectionAdd_ = value;
            }
        }
        /// <summary>Gets whether the "selection_add" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSelectionAdd
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "selection_add" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSelectionAdd()
        {
            _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ActionSelectArmy);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActionSelectArmy other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (SelectionAdd != other.SelectionAdd) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasSelectionAdd) hash ^= SelectionAdd.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasSelectionAdd)
            {
                output.WriteRawTag(8);
                output.WriteBool(SelectionAdd);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasSelectionAdd)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActionSelectArmy other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasSelectionAdd)
            {
                SelectionAdd = other.SelectionAdd;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            SelectionAdd = input.ReadBool();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ActionSelectWarpGates : pb::IMessage<ActionSelectWarpGates>
    {
        private static readonly pb::MessageParser<ActionSelectWarpGates> _parser = new pb::MessageParser<ActionSelectWarpGates>(() => new ActionSelectWarpGates());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActionSelectWarpGates> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.UiReflection.Descriptor.MessageTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionSelectWarpGates()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionSelectWarpGates(ActionSelectWarpGates other) : this()
        {
            _hasBits0 = other._hasBits0;
            selectionAdd_ = other.selectionAdd_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionSelectWarpGates Clone()
        {
            return new ActionSelectWarpGates(this);
        }

        /// <summary>Field number for the "selection_add" field.</summary>
        public const int SelectionAddFieldNumber = 1;
        private readonly static bool SelectionAddDefaultValue = false;

        private bool selectionAdd_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool SelectionAdd
        {
            get { if ((_hasBits0 & 1) != 0) { return selectionAdd_; } else { return SelectionAddDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                selectionAdd_ = value;
            }
        }
        /// <summary>Gets whether the "selection_add" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSelectionAdd
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "selection_add" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSelectionAdd()
        {
            _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ActionSelectWarpGates);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActionSelectWarpGates other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (SelectionAdd != other.SelectionAdd) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasSelectionAdd) hash ^= SelectionAdd.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasSelectionAdd)
            {
                output.WriteRawTag(8);
                output.WriteBool(SelectionAdd);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasSelectionAdd)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActionSelectWarpGates other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasSelectionAdd)
            {
                SelectionAdd = other.SelectionAdd;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            SelectionAdd = input.ReadBool();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ActionSelectLarva : pb::IMessage<ActionSelectLarva>
    {
        private static readonly pb::MessageParser<ActionSelectLarva> _parser = new pb::MessageParser<ActionSelectLarva>(() => new ActionSelectLarva());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActionSelectLarva> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.UiReflection.Descriptor.MessageTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionSelectLarva()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionSelectLarva(ActionSelectLarva other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionSelectLarva Clone()
        {
            return new ActionSelectLarva(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ActionSelectLarva);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActionSelectLarva other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActionSelectLarva other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    public sealed partial class ActionSelectIdleWorker : pb::IMessage<ActionSelectIdleWorker>
    {
        private static readonly pb::MessageParser<ActionSelectIdleWorker> _parser = new pb::MessageParser<ActionSelectIdleWorker>(() => new ActionSelectIdleWorker());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActionSelectIdleWorker> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.UiReflection.Descriptor.MessageTypes[13]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionSelectIdleWorker()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionSelectIdleWorker(ActionSelectIdleWorker other) : this()
        {
            _hasBits0 = other._hasBits0;
            type_ = other.type_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionSelectIdleWorker Clone()
        {
            return new ActionSelectIdleWorker(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private readonly static global::SC2APIProtocol.ActionSelectIdleWorker.Types.Type TypeDefaultValue = global::SC2APIProtocol.ActionSelectIdleWorker.Types.Type.Set;

        private global::SC2APIProtocol.ActionSelectIdleWorker.Types.Type type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ActionSelectIdleWorker.Types.Type Type
        {
            get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                type_ = value;
            }
        }
        /// <summary>Gets whether the "type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasType
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType()
        {
            _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ActionSelectIdleWorker);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActionSelectIdleWorker other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Type != other.Type) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasType) hash ^= Type.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasType)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Type);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasType)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActionSelectIdleWorker other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasType)
            {
                Type = other.Type;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Type = (global::SC2APIProtocol.ActionSelectIdleWorker.Types.Type)input.ReadEnum();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ActionSelectIdleWorker message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum Type
            {
                /// <summary>
                /// Equivalent to click with no modifiers. Replaces selection with single idle worker.
                /// </summary>
                [pbr::OriginalName("Set")] Set = 1,
                /// <summary>
                /// Equivalent to shift+click. Adds single idle worker to current selection.
                /// </summary>
                [pbr::OriginalName("Add")] Add = 2,
                /// <summary>
                /// Equivalent to control+click. Selects all idle workers.
                /// </summary>
                [pbr::OriginalName("All")] All = 3,
                /// <summary>
                /// Equivalent to shift+control+click. Adds all idle workers to current selection.
                /// </summary>
                [pbr::OriginalName("AddAll")] AddAll = 4,
            }

        }
        #endregion

    }

    public sealed partial class ActionMultiPanel : pb::IMessage<ActionMultiPanel>
    {
        private static readonly pb::MessageParser<ActionMultiPanel> _parser = new pb::MessageParser<ActionMultiPanel>(() => new ActionMultiPanel());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActionMultiPanel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.UiReflection.Descriptor.MessageTypes[14]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionMultiPanel()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionMultiPanel(ActionMultiPanel other) : this()
        {
            _hasBits0 = other._hasBits0;
            type_ = other.type_;
            unitIndex_ = other.unitIndex_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionMultiPanel Clone()
        {
            return new ActionMultiPanel(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private readonly static global::SC2APIProtocol.ActionMultiPanel.Types.Type TypeDefaultValue = global::SC2APIProtocol.ActionMultiPanel.Types.Type.SingleSelect;

        private global::SC2APIProtocol.ActionMultiPanel.Types.Type type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SC2APIProtocol.ActionMultiPanel.Types.Type Type
        {
            get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                type_ = value;
            }
        }
        /// <summary>Gets whether the "type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasType
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "unit_index" field.</summary>
        public const int UnitIndexFieldNumber = 2;
        private readonly static int UnitIndexDefaultValue = 0;

        private int unitIndex_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int UnitIndex
        {
            get { if ((_hasBits0 & 2) != 0) { return unitIndex_; } else { return UnitIndexDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                unitIndex_ = value;
            }
        }
        /// <summary>Gets whether the "unit_index" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnitIndex
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "unit_index" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnitIndex()
        {
            _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ActionMultiPanel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActionMultiPanel other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Type != other.Type) return false;
            if (UnitIndex != other.UnitIndex) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasType) hash ^= Type.GetHashCode();
            if (HasUnitIndex) hash ^= UnitIndex.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasType)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Type);
            }
            if (HasUnitIndex)
            {
                output.WriteRawTag(16);
                output.WriteInt32(UnitIndex);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasType)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (HasUnitIndex)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitIndex);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActionMultiPanel other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasType)
            {
                Type = other.Type;
            }
            if (other.HasUnitIndex)
            {
                UnitIndex = other.UnitIndex;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Type = (global::SC2APIProtocol.ActionMultiPanel.Types.Type)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            UnitIndex = input.ReadInt32();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ActionMultiPanel message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum Type
            {
                /// <summary>
                /// Click on icon
                /// </summary>
                [pbr::OriginalName("SingleSelect")] SingleSelect = 1,
                /// <summary>
                /// Shift Click on icon
                /// </summary>
                [pbr::OriginalName("DeselectUnit")] DeselectUnit = 2,
                /// <summary>
                /// Control Click on icon.
                /// </summary>
                [pbr::OriginalName("SelectAllOfType")] SelectAllOfType = 3,
                /// <summary>
                /// Control+Shift Click on icon.
                /// </summary>
                [pbr::OriginalName("DeselectAllOfType")] DeselectAllOfType = 4,
            }

        }
        #endregion

    }

    public sealed partial class ActionCargoPanelUnload : pb::IMessage<ActionCargoPanelUnload>
    {
        private static readonly pb::MessageParser<ActionCargoPanelUnload> _parser = new pb::MessageParser<ActionCargoPanelUnload>(() => new ActionCargoPanelUnload());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActionCargoPanelUnload> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.UiReflection.Descriptor.MessageTypes[15]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionCargoPanelUnload()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionCargoPanelUnload(ActionCargoPanelUnload other) : this()
        {
            _hasBits0 = other._hasBits0;
            unitIndex_ = other.unitIndex_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionCargoPanelUnload Clone()
        {
            return new ActionCargoPanelUnload(this);
        }

        /// <summary>Field number for the "unit_index" field.</summary>
        public const int UnitIndexFieldNumber = 1;
        private readonly static int UnitIndexDefaultValue = 0;

        private int unitIndex_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int UnitIndex
        {
            get { if ((_hasBits0 & 1) != 0) { return unitIndex_; } else { return UnitIndexDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                unitIndex_ = value;
            }
        }
        /// <summary>Gets whether the "unit_index" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnitIndex
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "unit_index" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnitIndex()
        {
            _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ActionCargoPanelUnload);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActionCargoPanelUnload other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UnitIndex != other.UnitIndex) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasUnitIndex) hash ^= UnitIndex.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasUnitIndex)
            {
                output.WriteRawTag(8);
                output.WriteInt32(UnitIndex);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasUnitIndex)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitIndex);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActionCargoPanelUnload other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasUnitIndex)
            {
                UnitIndex = other.UnitIndex;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            UnitIndex = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ActionProductionPanelRemoveFromQueue : pb::IMessage<ActionProductionPanelRemoveFromQueue>
    {
        private static readonly pb::MessageParser<ActionProductionPanelRemoveFromQueue> _parser = new pb::MessageParser<ActionProductionPanelRemoveFromQueue>(() => new ActionProductionPanelRemoveFromQueue());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActionProductionPanelRemoveFromQueue> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.UiReflection.Descriptor.MessageTypes[16]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionProductionPanelRemoveFromQueue()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionProductionPanelRemoveFromQueue(ActionProductionPanelRemoveFromQueue other) : this()
        {
            _hasBits0 = other._hasBits0;
            unitIndex_ = other.unitIndex_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionProductionPanelRemoveFromQueue Clone()
        {
            return new ActionProductionPanelRemoveFromQueue(this);
        }

        /// <summary>Field number for the "unit_index" field.</summary>
        public const int UnitIndexFieldNumber = 1;
        private readonly static int UnitIndexDefaultValue = 0;

        private int unitIndex_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int UnitIndex
        {
            get { if ((_hasBits0 & 1) != 0) { return unitIndex_; } else { return UnitIndexDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                unitIndex_ = value;
            }
        }
        /// <summary>Gets whether the "unit_index" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnitIndex
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "unit_index" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnitIndex()
        {
            _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ActionProductionPanelRemoveFromQueue);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActionProductionPanelRemoveFromQueue other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UnitIndex != other.UnitIndex) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasUnitIndex) hash ^= UnitIndex.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasUnitIndex)
            {
                output.WriteRawTag(8);
                output.WriteInt32(UnitIndex);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasUnitIndex)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitIndex);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActionProductionPanelRemoveFromQueue other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasUnitIndex)
            {
                UnitIndex = other.UnitIndex;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            UnitIndex = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ActionToggleAutocast : pb::IMessage<ActionToggleAutocast>
    {
        private static readonly pb::MessageParser<ActionToggleAutocast> _parser = new pb::MessageParser<ActionToggleAutocast>(() => new ActionToggleAutocast());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActionToggleAutocast> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SC2APIProtocol.UiReflection.Descriptor.MessageTypes[17]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionToggleAutocast()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionToggleAutocast(ActionToggleAutocast other) : this()
        {
            _hasBits0 = other._hasBits0;
            abilityId_ = other.abilityId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionToggleAutocast Clone()
        {
            return new ActionToggleAutocast(this);
        }

        /// <summary>Field number for the "ability_id" field.</summary>
        public const int AbilityIdFieldNumber = 1;
        private readonly static int AbilityIdDefaultValue = 0;

        private int abilityId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AbilityId
        {
            get { if ((_hasBits0 & 1) != 0) { return abilityId_; } else { return AbilityIdDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                abilityId_ = value;
            }
        }
        /// <summary>Gets whether the "ability_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAbilityId
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "ability_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAbilityId()
        {
            _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ActionToggleAutocast);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActionToggleAutocast other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (AbilityId != other.AbilityId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasAbilityId) hash ^= AbilityId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasAbilityId)
            {
                output.WriteRawTag(8);
                output.WriteInt32(AbilityId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasAbilityId)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActionToggleAutocast other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasAbilityId)
            {
                AbilityId = other.AbilityId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            AbilityId = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code
